{"LinearRecursion": {"best.pt": {"generated_sequences": ["c", "a aa", "b", "b b", "a aa", "a", "b b b b b", "a", "b", "a aa aa", "a aa aa aa aa aa", "b", "a", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b", "a", "a aa aa aa aa aa aa aa aa aa aa aa", "a aa aa", "a", "a", "b b b b", "a", "a", "b b b", "c", "c", "b", "b", "b", "a", "b b b b b b b", "c", "a", "a", "a", "a", "b", "c", "a aa aa aa", "a", "b b b b b b b", "a", "a", "b b", "b b b b", "b b", "aa aa", "b b b b b b", "b b", "b"], "accuracy": 0.98, "train_overlap": 0.98, "res": [{"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "b b b b b b b b", "log_prob": -4.510977040976286}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.83539364580065}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -5.161755015142262}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.83539364580065}, {"text": "a aa aa aa aa", "log_prob": -4.115707144141197}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.83539364580065}, {"text": "b b b b b", "log_prob": -3.7956980261951685}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.544770919717848}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "b b b b b b b b b b b b b b", "log_prob": -6.1778783947229385}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "a aa aa aa", "log_prob": -3.7608647914603353}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.208496860228479}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -6.137143142521381}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "b b b b b", "log_prob": -3.7956980261951685}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.313223533332348}, {"text": "a aa aa aa aa aa", "log_prob": -4.470277219079435}, {"text": "b b b b", "log_prob": -3.4546033218503}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -5.88657152839005}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "b b b b b b b", "log_prob": -4.249487694352865}, {"text": "a aa aa aa aa", "log_prob": -4.115707144141197}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "a aa aa aa", "log_prob": -3.7608647914603353}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "b b b b", "log_prob": -3.4546033218503}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "b b b b b b b", "log_prob": -4.249487694352865}, {"text": "b b b b b b b", "log_prob": -4.249487694352865}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b b b b b b b b", "log_prob": -4.7365785632282495}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.83539364580065}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "b b b b b b", "log_prob": -4.046607982367277}, {"text": "b b b b b b b b b", "log_prob": -4.7365785632282495}, {"text": "b b b b b b b b b", "log_prob": -4.7365785632282495}, {"text": "b b b b b b b b b", "log_prob": -4.7365785632282495}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "b b b", "log_prob": -3.1678817151114345}, {"text": "b b b b b b b b b b b", "log_prob": -5.217530835419893}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b b b b b b b b b", "log_prob": -4.945348527282476}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "a", "log_prob": -2.4106550626456738}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "b b", "log_prob": -2.875212889164686}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "a aa aa", "log_prob": -3.3821303211152554}, {"text": "b", "log_prob": -2.6940590254962444}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.208496860228479}, {"text": "c", "log_prob": -3.116743218153715}, {"text": "a aa", "log_prob": -2.9849703265354037}, {"text": "b b b b b", "log_prob": -3.7956980261951685}, {"text": "a aa", "log_prob": -2.9849703265354037}]}, "epoch_0.pt": {"generated_sequences": ["c b c", "aa aa aa", "aa aa b b a b b", "b b b aa b b", "aa aa b aa a b aa", "aa aa b aa b b b aa", "aa a", "a b c b", "aa aa b aa aa b b b aa", "b aa b b b", "b aa b a a", "aa b", "aa aa c aa b b", "aa aa aa b a aa aa b a", "b b b aa b aa b", "a aa a aa c a b", "a aa b", "a a b a aa b", "a aa b b b", "aa b a aa c b b", "b b b b a", "b aa b aa b aa", "c aa b b b b", "b b b aa aa b b b b", "aa b b c aa aa", "aa b b", "b a aa c a", "aa b aa aa c b", "b b b b", "aa a aa", "aa b aa aa b b a", "aa b aa", "a aa b b aa b", "aa a c c b a", "aa b aa", "aa aa b b b", "a aa b a aa a", "a b b aa b a b c b", "aa aa", "a aa b b b b aa c", "b b b b b aa c b", "aa a b c aa", "b b b a aa aa aa b", "b aa b b b b b", "b aa c b b c b", "b b aa b a", "a aa aa c a b aa b", "aa c c c b", "b b b aa aa b a b", "a b b b"], "accuracy": 0.02, "train_overlap": 0.02, "res": [{"text": "a aa", "log_prob": -20.91544532775879}, {"text": "b b b b b b b b", "log_prob": -40.196218729019165}, {"text": "a aa aa aa aa aa aa", "log_prob": -39.70947551727295}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -43.12759447097778}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "a aa aa aa aa aa aa", "log_prob": -39.70947551727295}, {"text": "a aa aa aa aa", "log_prob": -32.08387541770935}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "a aa aa aa aa aa aa", "log_prob": -39.70947551727295}, {"text": "b b b b b", "log_prob": -30.132646799087524}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -58.07537889480591}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "b b b b b b b b b b b b b b", "log_prob": -60.64500546455383}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "a aa aa aa", "log_prob": -28.319161415100098}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -54.53944492340088}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -63.718663454055786}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "b b b b b", "log_prob": -30.132646799087524}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -65.74328541755676}, {"text": "a aa aa aa aa aa", "log_prob": -35.856101989746094}, {"text": "b b b b", "log_prob": -26.742334604263306}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -50.737128257751465}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "b b b b b b b", "log_prob": -37.004661083221436}, {"text": "a aa aa aa aa", "log_prob": -32.08387541770935}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "a aa aa aa", "log_prob": -28.319161415100098}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "b b b b", "log_prob": -26.742334604263306}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "b b b b b b b", "log_prob": -37.004661083221436}, {"text": "b b b b b b b", "log_prob": -37.004661083221436}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b b b b b b b b", "log_prob": -43.5691454410553}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "a aa aa aa aa aa aa", "log_prob": -39.70947551727295}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "b b b b b b", "log_prob": -33.603179693222046}, {"text": "b b b b b b b b b", "log_prob": -43.5691454410553}, {"text": "b b b b b b b b b", "log_prob": -43.5691454410553}, {"text": "b b b b b b b b b", "log_prob": -43.5691454410553}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "b b b", "log_prob": -23.952433824539185}, {"text": "b b b b b b b b b b b", "log_prob": -50.0609393119812}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b b b b b b b b b", "log_prob": -46.897406816482544}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "a", "log_prob": -16.969557762145996}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "b b", "log_prob": -20.568198919296265}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "a aa aa", "log_prob": -24.833481311798096}, {"text": "b", "log_prob": -17.224486112594604}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -54.53944492340088}, {"text": "c", "log_prob": -17.24949836730957}, {"text": "a aa", "log_prob": -20.91544532775879}, {"text": "b b b b b", "log_prob": -30.132646799087524}, {"text": "a aa", "log_prob": -20.91544532775879}]}, "epoch_10.pt": {"generated_sequences": ["b a aa b b b b b b b b b b b b b a aa aa aa b b b b b b b b b b b b b b b b b b b b b b b b b c c a aa aa a aa aa aa aa aa aa aa b b b b b aa a aa a aa aa aa aa aa aa aa a aa a aa aa aa a a aa aa aa aa aa aa aa aa aa aa aa aa a aa aa b a aa aa aa b a aa a aa aa c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b aa aa aa b b b b b b b b b b b b b b b b b b b b a aa aa aa aa aa aa b b b b a b b b b b a a aa aa aa aa aa b b b b b a a c", "b b aa aa a aa b b b b b b b b b b b b b b", "b b b b b b b b b a b a b b b b b b b b b b b b b b b b a b b b b b b b b b b b b b b b b b b b b b b b b b b aa aa a aa aa a b b b aa aa aa aa aa aa aa aa aa a b a aa aa aa a aa a aa b b b b b b b b b b a b b b b a aa aa aa aa aa aa aa b b c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b c b b b c c b b b b b b b b b b b b b b a aa aa aa aa aa a aa aa aa b b b b a aa aa a b b b b b b b b b a aa aa a aa a aa aa aa aa a aa aa aa a aa a aa a b b b b a aa aa a a a a aa aa aa aa aa aa a aa aa aa a aa", "a a a aa aa c", "b b b b aa aa aa aa b b b b b b b a aa aa b a aa aa a aa a aa a aa a aa a aa aa a aa aa aa aa aa aa a aa aa b b b b c b b a aa b b b b a aa aa aa a aa aa aa aa aa aa aa aa aa aa a aa aa b aa a aa aa aa aa aa aa aa aa aa aa b b b b b b b b b b b b b b b b b aa aa aa aa aa a aa aa a aa a aa aa", "b b b b b b b b b b b b b b a b b b b b b b b a aa b b b b b b b b", "b b b b b b b b b b b b b b a aa aa aa aa aa aa b b b b b b b b b b b b a", "b b b b b b b b a aa aa b b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b c a a aa a aa a aa aa a aa aa aa b a a aa aa aa aa aa aa b a a aa aa aa aa aa a b a aa aa b b b b aa aa aa aa aa a aa aa aa a aa aa b b a aa aa aa aa b c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a aa aa c b b a aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a b b a b b b b b b a aa aa b b c", "b b b b b b b b b b a aa aa aa aa aa aa aa aa aa aa aa a aa b b c", "b", "a aa aa aa a aa aa a aa a aa b", "b b b b a b b b b b aa", "b b b b b b b b b b b b b a a aa aa b a aa aa aa", "b b b b b b a aa aa b b b aa aa aa aa aa aa aa aa aa aa aa aa aa b b a aa aa aa b b b b b c", "b b b b b b b b a aa aa a aa aa b b b a aa aa a aa aa aa aa a aa aa aa aa aa b b b b b b b b aa c b b b b", "", "b b b b b b a b a aa aa c", "b b b b b b b b b b b b b b a aa a a aa aa aa aa a aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa b b b a aa aa b b b a aa a aa aa aa a c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a b b b b aa aa b a aa aa aa b b b b b b b b b b a b b b b b b b b b b a aa aa aa b b b b b b b b a a a a a aa aa aa aa aa aa aa aa a aa aa aa aa aa a aa b a aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b a b b b b b b b b b b b b b b b b b b a aa a aa aa aa aa aa aa aa aa aa a b b b b b a aa aa aa c b b b b b b b b b b a aa aa a aa b b b b b b b b a aa b b c", "b b b b b a aa a", "b a b b b b b b b b b b b b b b b b b b", "b b b b b b b b b b b b a b b b b b b b b b b b b aa b", "b b b b b b b b b b b a aa aa aa aa aa b b a aa aa aa aa aa b a aa aa a aa aa b b b a aa a aa aa b a aa a aa aa a b b b b b b b b b b b b a a aa aa aa aa b b b a b a b a b b a a aa aa aa aa aa aa aa a a aa aa aa aa a aa aa a aa aa aa aa aa aa aa a aa aa", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a", "b b b b b a b b b b b b b b b b b a b aa aa aa aa a aa aa aa a aa b b b b b b b b b b b b b b b b b b b b b b b b b b a a b a aa a a aa c", "b b b b b b b b b b b b b b b b b b b b b b a aa aa aa aa aa b b b b b b a a b b b b b b b b b b b b b b b a b b b b a aa aa c b b b b b b b aa aa aa aa a a b b b b b b b b a aa aa aa b b b b a aa aa aa a b a aa aa aa aa b b b b a a a aa aa aa aa aa aa aa a aa aa aa b", "b b b b b b c b b b b b b b a a aa b b b b b b b b c a a aa aa a c", "b b b b b b b b b b a aa b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a b b b b b b b b b b b b b b b b b b b b b b b a aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa b b b b b b a b b b b a aa aa aa aa aa aa aa aa aa aa aa aa aa b b a a aa b b b b b b b b b a aa a", "b b b b b b c b b b aa aa aa c c", "b b b aa b b b b b a a aa aa aa b b b a aa aa aa aa aa aa aa b b b b a aa c", "b aa aa a", "aa aa aa aa b b b b b", "a b b b b b b b b b b b b b b b b a aa b b b b b aa a b b", "b b b b b b b a aa aa a aa aa b b b b b b a b b b b b b b aa aa aa aa b b b b b b b b b b b b", "b b b b b b a aa aa aa aa aa aa a aa b b a aa aa b b b b b a b b b aa aa a b b b b b b b b a aa aa aa aa b b b b b a aa aa b b b b b b b a aa aa aa a a b a c", "b b b b b b b b b b b b b b b b b b b b b b b b b b a b b b b b b b a c aa aa aa aa aa a c", "b b a b b b b b b b b b b b b b a c b b a aa", "b c b b a aa c", "b b b b b b b b b b b b b b b b b b b a aa aa aa a a", "a b aa aa aa b b b b b b b b b b b b b b b b b", "b b b b b b b b b b b b b b b b b a aa aa b b b b a aa b b b b b", "b b b b b b b b a b b b b b b a b b b b b b b b b a aa aa aa aa b b b b b b b b b b b b b b b b b b a a aa a aa aa aa aa aa aa aa b b b b b b b b b b b b b b b b b a c", "a aa b b b b b b b b b b b b b b b a aa b b b a a aa a aa aa aa aa b b b b a aa b b b b b b b b a aa aa aa aa aa aa aa a a aa b a aa aa aa aa a aa aa aa aa aa aa aa aa a aa aa aa aa b b a aa a aa aa aa aa b b a aa aa aa aa a aa a aa a aa aa aa b b b b b b b b b b b b b b aa aa aa aa c", "b b b b b b b aa aa aa a a aa aa b b b", "b b b b b b b b b b b b b b c b b b b b b a aa a a aa c"], "accuracy": 0.02, "train_overlap": 0.02, "res": [{"text": "a aa", "log_prob": -8.024563267827034}, {"text": "b b b b b b b b", "log_prob": -7.1403141394257545}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.897990196943283}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -11.363007515668869}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.897990196943283}, {"text": "a aa aa aa aa", "log_prob": -10.112339988350868}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.897990196943283}, {"text": "b b b b b", "log_prob": -6.514738768339157}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -12.662413910031319}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "b b b b b b b b b b b b b b", "log_prob": -8.244360476732254}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "a aa aa aa", "log_prob": -9.328222624957561}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -12.411223694682121}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -8.46550215780735}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "b b b b b", "log_prob": -6.514738768339157}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -13.28477956354618}, {"text": "a aa aa aa aa aa", "log_prob": -10.361160069704056}, {"text": "b b b b", "log_prob": -5.998148933053017}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -12.0224070250988}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "b b b b b b b", "log_prob": -6.950785301625729}, {"text": "a aa aa aa aa", "log_prob": -10.112339988350868}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "a aa aa aa", "log_prob": -9.328222624957561}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "b b b b", "log_prob": -5.998148933053017}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "b b b b b b b", "log_prob": -6.950785301625729}, {"text": "b b b b b b b", "log_prob": -6.950785301625729}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b b b b b b b b", "log_prob": -7.3029841259121895}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.897990196943283}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "b b b b b b", "log_prob": -6.388038590550423}, {"text": "b b b b b b b b b", "log_prob": -7.3029841259121895}, {"text": "b b b b b b b b b", "log_prob": -7.3029841259121895}, {"text": "b b b b b b b b b", "log_prob": -7.3029841259121895}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "b b b", "log_prob": -5.846586771309376}, {"text": "b b b b b b b b b b b", "log_prob": -7.652371317148209}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b b b b b b b b b", "log_prob": -7.502506539225578}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "a", "log_prob": -6.372583881020546}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "b b", "log_prob": -5.545014053583145}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "a aa aa", "log_prob": -8.606527760624886}, {"text": "b", "log_prob": -5.245659902691841}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -12.411223694682121}, {"text": "c", "log_prob": -8.475610062479973}, {"text": "a aa", "log_prob": -8.024563267827034}, {"text": "b b b b b", "log_prob": -6.514738768339157}, {"text": "a aa", "log_prob": -8.024563267827034}]}, "epoch_15.pt": {"generated_sequences": ["b b b a b b a", "a a aa a b b b b b b b b b b b b b b b b b", "b b b a a aa a aa aa b", "b b b b b b b b b aa aa aa aa aa b b b b b b b b b b b b b b b b b b", "a b b b b b a aa", "b b b b b b b b b a aa aa aa b a aa aa b b b b b aa c", "b a aa a a aa aa", "b b b b b b b b b b b b a aa a aa b a b b b b b b b", "b a b b b b b b a aa aa a aa b b b b b b b b b b b b a b b b b", "b b c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b a b b b b b b b a aa b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b b", "a aa a aa aa aa aa aa aa b b b b b b b b b b b b b b a c a a aa aa aa aa b b a aa aa aa a aa aa a aa b b b b b b b b b b b b b a aa aa aa b b a aa", "aa b b b b b", "b b b b b", "b b b b b b b b b", "a aa a aa b b b b b b b b b b c", "b b b b b b a b b b b b b b b b b b b b b b b b b a aa", "b b b b b b b b b b b b b b a aa aa c", "b b b b b b b b b b b b b b b b b b b b b b b aa aa aa", "a c b b b b b b", "b b b b b b b b b b b b", "a aa a aa b b b b b b b b b b b b b b", "b b c b a a aa aa aa aa aa aa", "b aa a aa aa aa aa b", "b b b b b b", "a aa aa aa a aa b b b b b b b b b b b b b b b b b", "b b b b b b b b b", "a c a a aa aa aa aa a a aa aa aa b b b b b a aa aa aa b b b b b b b b b b b b c", "b b b b b b b b b a aa aa aa aa aa a aa aa", "b b b a aa aa a aa aa aa b b", "a aa aa aa b b b b b b b b b b b b a aa aa aa aa aa aa a aa b b b b b a a aa aa aa aa a a aa aa b a a a aa aa a aa aa aa aa a aa aa aa a aa aa a aa a aa a b b b b a b b a aa aa a aa a aa aa aa a c", "aa b b b b b b b b b b b b b b b b a", "b b b b b b b b a b b b b a aa a aa aa aa aa aa aa aa aa aa", "b b b b c a aa aa aa aa", "b b b b b b b b b c b b a", "b b b b b b b b b b b b b", "a b b b b b b b b b b b b a aa aa b b a aa aa a a aa aa b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a aa aa aa", "b b b b b b a aa aa c", "b b b b a aa a b b b b b b b b b b b b b a aa a aa aa aa aa a aa aa a aa aa b b a aa aa aa aa aa aa aa aa b a aa a a b b b b b b b b a a aa b b a aa aa aa aa a aa aa aa aa aa a b a aa aa aa aa a aa aa aa aa aa aa a aa b b b b b b b b b b b b b b b b", "c b b b b b b b b b b", "b aa b b", "b b b b b b a aa c", "b b a aa aa aa b b b b b b b c", "a b b b b b b b b", "a a aa aa c a aa b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b"], "accuracy": 0.18, "train_overlap": 0.16, "res": [{"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "b b b b b b b b", "log_prob": -7.046584948897362}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.420175693929195}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -11.098357111215591}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.420175693929195}, {"text": "a aa aa aa aa", "log_prob": -9.101929992437363}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.420175693929195}, {"text": "b b b b b", "log_prob": -6.2611347287893295}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -13.204358533024788}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "b b b b b b b b b b b b b b", "log_prob": -8.501084581017494}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "a aa aa aa", "log_prob": -8.281232811510563}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -12.719092667102814}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -8.680535018444061}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "b b b b b", "log_prob": -6.2611347287893295}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -14.185677342116833}, {"text": "a aa aa aa aa aa", "log_prob": -9.77496936917305}, {"text": "b b b b", "log_prob": -5.776840418577194}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -12.062551811337471}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "b b b b b b b", "log_prob": -6.738056816160679}, {"text": "a aa aa aa aa", "log_prob": -9.101929992437363}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "a aa aa aa", "log_prob": -8.281232811510563}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "b b b b", "log_prob": -5.776840418577194}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "b b b b b b b", "log_prob": -6.738056816160679}, {"text": "b b b b b b b", "log_prob": -6.738056816160679}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b b b b b b b b", "log_prob": -7.263181872665882}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "a aa aa aa aa aa aa", "log_prob": -10.420175693929195}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "b b b b b b", "log_prob": -6.333496518433094}, {"text": "b b b b b b b b b", "log_prob": -7.263181872665882}, {"text": "b b b b b b b b b", "log_prob": -7.263181872665882}, {"text": "b b b b b b b b b", "log_prob": -7.263181872665882}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "b b b", "log_prob": -5.65770198404789}, {"text": "b b b b b b b b b b b", "log_prob": -7.746985025703907}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b b b b b b b b b", "log_prob": -7.449941188097}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "a", "log_prob": -4.8888037502765656}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "b b", "log_prob": -5.311907172203064}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "a aa aa", "log_prob": -7.4487758576869965}, {"text": "b", "log_prob": -4.823842018842697}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -12.719092667102814}, {"text": "c", "log_prob": -7.121872514486313}, {"text": "a aa", "log_prob": -6.5832802802324295}, {"text": "b b b b b", "log_prob": -6.2611347287893295}, {"text": "a aa", "log_prob": -6.5832802802324295}]}, "epoch_20.pt": {"generated_sequences": ["b b a a aa aa", "aa aa aa aa aa aa aa aa aa aa aa aa aa a aa", "c b b b b b b b b b", "a aa aa aa aa a aa aa aa aa aa aa aa aa", "b a aa aa aa aa aa aa b", "b b b b b aa aa aa aa aa b b b", "a aa aa aa b b b b b", "b b b a aa b", "b b a aa aa a aa b", "a aa aa aa aa", "a aa aa a aa aa aa c a aa aa b", "b a aa aa", "c b b b b b b a aa", "a b b a", "a aa a aa", "b b b b", "a a aa aa aa aa aa aa aa", "a b a aa aa aa aa aa a aa aa aa aa aa aa aa aa", "a aa aa aa aa aa a aa aa aa aa", "a a aa aa aa aa c", "a a aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b b b b b b b c", "b b b a", "b b a aa", "a aa aa aa b b a aa", "a aa aa aa aa aa aa aa aa aa aa", "a aa aa aa aa aa b b", "aa aa a aa", "b b b b b a a", "b b b b b b b b b b b b b b b b b b b b", "a aa aa a aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b a aa aa aa aa", "c b b a", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b c", "a aa aa aa a aa aa aa aa aa", "c a aa aa aa aa aa aa", "b b b b b b b b", "b b b b", "b b b b a aa aa aa aa aa aa aa aa aa", "b b a", "b b a aa aa aa aa aa aa a", "b b a a aa aa aa aa aa", "b a aa b b b b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa aa b b b b aa aa aa aa b c aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b b b b a aa", "a", "a aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b b b b", "a aa a aa aa aa b b b b b b", "a aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa"], "accuracy": 0.16, "train_overlap": 0.12, "res": [{"text": "a aa", "log_prob": -6.690890073776245}, {"text": "b b b b b b b b", "log_prob": -7.654447853565216}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.899860307574272}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -8.028322845697403}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.899860307574272}, {"text": "a aa aa aa aa", "log_prob": -7.4948490858078}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.899860307574272}, {"text": "b b b b b", "log_prob": -6.814837962388992}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.76265874505043}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "b b b b b b b b b b b b b b", "log_prob": -9.041983537375927}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "a aa aa aa", "log_prob": -7.213713988661766}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.509121865034103}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -9.216861695051193}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "b b b b b", "log_prob": -6.814837962388992}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -9.008229427039623}, {"text": "a aa aa aa aa aa", "log_prob": -7.730753511190414}, {"text": "b b b b", "log_prob": -6.187719702720642}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -8.29522742331028}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "b b b b b b b", "log_prob": -7.320688560605049}, {"text": "a aa aa aa aa", "log_prob": -7.4948490858078}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "a aa aa aa", "log_prob": -7.213713988661766}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "b b b b", "log_prob": -6.187719702720642}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "b b b b b b b", "log_prob": -7.320688560605049}, {"text": "b b b b b b b", "log_prob": -7.320688560605049}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b b b b b b b b", "log_prob": -7.850683085620403}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.899860307574272}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "b b b b b b", "log_prob": -6.928446024656296}, {"text": "b b b b b b b b b", "log_prob": -7.850683085620403}, {"text": "b b b b b b b b b", "log_prob": -7.850683085620403}, {"text": "b b b b b b b b b", "log_prob": -7.850683085620403}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "b b b", "log_prob": -6.05587637424469}, {"text": "b b b b b b b b b b b", "log_prob": -8.237213239073753}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b b b b b b b b b", "log_prob": -7.958451949059963}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "a", "log_prob": -5.735113203525543}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "b b", "log_prob": -5.996473908424377}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "a aa aa", "log_prob": -6.990726038813591}, {"text": "b", "log_prob": -5.459357708692551}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.509121865034103}, {"text": "c", "log_prob": -7.2065300941467285}, {"text": "a aa", "log_prob": -6.690890073776245}, {"text": "b b b b b", "log_prob": -6.814837962388992}, {"text": "a aa", "log_prob": -6.690890073776245}]}, "epoch_25.pt": {"generated_sequences": ["a", "a aa aa aa a aa aa aa aa aa aa aa aa aa", "a b b b b b b b b b b b", "a aa aa aa aa aa a aa", "a a aa aa aa aa", "a aa aa aa aa aa aa aa aa b b b c aa aa aa aa aa aa aa aa aa b b a aa aa aa aa aa aa", "b b b b b b b b b b b a aa aa aa a aa aa aa aa aa b b b b b b b b b", "a aa aa b b b b b b b b b b b b b a aa aa aa aa aa aa a aa a aa", "a aa aa aa aa aa aa b b b", "b b b b b b b b b b a aa aa aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b b b b b b b b a a a", "c", "a aa aa b b b", "b b a aa aa aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b b b b a aa aa aa a", "a aa aa aa b b b b", "b a", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a", "a", "a", "a aa aa", "b aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa a aa aa b a aa aa aa aa", "b b b b b b b b b b b b b b b b a aa aa aa aa a aa b b b", "b a aa aa aa aa aa aa aa aa", "b", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa c aa", "b b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa c", "aa aa aa aa aa b", "b b b b b b b a aa aa aa aa aa aa", "aa aa aa aa b", "a aa b b b", "a aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa", "b b b b b b b b b b b b b", "b a aa aa aa", "a a aa aa aa", "a aa aa aa b", "a aa aa aa aa aa aa a aa aa aa aa", "b b b b b b b b b", "", "b b b b b b b b b b", "b b b b aa aa aa aa aa aa", "b b b b b", "a a aa", "b b b b b b b b", "b b a aa aa", "a aa aa aa b b", "c aa aa aa aa aa aa aa b b b b b b b b a aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b b a", "b b b b b b b b b"], "accuracy": 0.26, "train_overlap": 0.26, "res": [{"text": "a aa", "log_prob": -4.994361400604248}, {"text": "b b b b b b b b", "log_prob": -6.249430276453495}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.5188449919223785}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.744692355394363}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.5188449919223785}, {"text": "a aa aa aa aa", "log_prob": -5.9431533217430115}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.5188449919223785}, {"text": "b b b b b", "log_prob": -5.700798898935318}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.655675262212753}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.3524609580636024}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "a aa aa aa", "log_prob": -5.704587504267693}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.3895114585757256}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.422568317502737}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "b b b b b", "log_prob": -5.700798898935318}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.149821773171425}, {"text": "a aa aa aa aa aa", "log_prob": -6.268124938011169}, {"text": "b b b b", "log_prob": -5.2164725586771965}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -7.182764634490013}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "b b b b b b b", "log_prob": -6.043310388922691}, {"text": "a aa aa aa aa", "log_prob": -5.9431533217430115}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "a aa aa aa", "log_prob": -5.704587504267693}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "b b b b", "log_prob": -5.2164725586771965}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "b b b b b b b", "log_prob": -6.043310388922691}, {"text": "b b b b b b b", "log_prob": -6.043310388922691}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b b b b b b b b", "log_prob": -6.473320655524731}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.5188449919223785}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "b b b b b b", "log_prob": -5.860774748027325}, {"text": "b b b b b b b b b", "log_prob": -6.473320655524731}, {"text": "b b b b b b b b b", "log_prob": -6.473320655524731}, {"text": "b b b b b b b b b", "log_prob": -6.473320655524731}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "b b b", "log_prob": -5.093755722045898}, {"text": "b b b b b b b b b b b", "log_prob": -6.743696749210358}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b b b b b b b b b", "log_prob": -6.48554552718997}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "a", "log_prob": -4.236044362187386}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "b b", "log_prob": -4.909497141838074}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "a aa aa", "log_prob": -5.413446247577667}, {"text": "b", "log_prob": -4.648210301995277}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.3895114585757256}, {"text": "c", "log_prob": -5.93038672208786}, {"text": "a aa", "log_prob": -4.994361400604248}, {"text": "b b b b b", "log_prob": -5.700798898935318}, {"text": "a aa", "log_prob": -4.994361400604248}]}, "epoch_30.pt": {"generated_sequences": ["a aa aa b b b a aa aa aa aa aa aa", "a aa b b b b b b", "a aa aa aa b", "b b b", "a a", "a b b b b", "b b b b b b b b aa aa aa aa b b b b a aa aa", "a aa b b", "b", "b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b", "a aa aa c b", "a a aa aa aa", "a aa aa b b b b", "b b b b b", "b b b", "b b b b", "b a aa", "b b b b b b b b", "b b b b", "a aa aa aa aa aa aa a aa aa aa aa aa aa aa b b", "a aa aa c", "b b", "b b b b b b b c", "a aa aa aa aa a aa aa aa aa", "a b b", "a", "c c", "a aa aa aa aa aa aa aa aa aa a", "a b b", "b b b b b b b", "a aa aa aa aa a aa aa aa aa", "b b b b", "a aa aa aa aa aa aa aa b b b b", "b a", "b b b b b", "b b b b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "c c", "a aa aa aa aa aa aa aa c", "a b b", "b b b a a aa aa aa", "b b b a aa aa aa aa aa aa", "b b b b b b b b a", "a aa b b b", "a aa aa aa aa aa aa aa aa b b b b b", "b b b b b b b", "a a", "b b", "a"], "accuracy": 0.38, "train_overlap": 0.34, "res": [{"text": "a aa", "log_prob": -5.254589691758156}, {"text": "b b b b b b b b", "log_prob": -7.4421665370464325}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.6557532995939255}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -7.0065706223249435}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.6557532995939255}, {"text": "a aa aa aa aa", "log_prob": -6.2107736468315125}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.6557532995939255}, {"text": "b b b b b", "log_prob": -6.006549507379532}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.027464374899864}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "b b b b b b b b b b b b b b", "log_prob": -10.247718840837479}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "a aa aa aa", "log_prob": -5.782856851816177}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.809532031416893}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -10.468732044100761}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "b b b b b", "log_prob": -6.006549507379532}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.838441014289856}, {"text": "a aa aa aa aa aa", "log_prob": -6.42752531170845}, {"text": "b b b b", "log_prob": -5.290802914649248}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -7.543113186955452}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "b b b b b b b", "log_prob": -6.853844106197357}, {"text": "a aa aa aa aa", "log_prob": -6.2107736468315125}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "a aa aa aa", "log_prob": -5.782856851816177}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "b b b b", "log_prob": -5.290802914649248}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "b b b b b b b", "log_prob": -6.853844106197357}, {"text": "b b b b b b b", "log_prob": -6.853844106197357}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b b b b b b b b", "log_prob": -7.86927043646574}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.6557532995939255}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "b b b b b b", "log_prob": -6.3220992386341095}, {"text": "b b b b b b b b b", "log_prob": -7.86927043646574}, {"text": "b b b b b b b b b", "log_prob": -7.86927043646574}, {"text": "b b b b b b b b b", "log_prob": -7.86927043646574}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "b b b", "log_prob": -4.747652858495712}, {"text": "b b b b b b b b b b b", "log_prob": -8.726439818739891}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b b b b b b b b b", "log_prob": -8.17518162727356}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "a", "log_prob": -4.556239366531372}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "b b", "log_prob": -4.063039228320122}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "a aa aa", "log_prob": -5.60943029820919}, {"text": "b", "log_prob": -3.499016061425209}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.809532031416893}, {"text": "c", "log_prob": -5.740004777908325}, {"text": "a aa", "log_prob": -5.254589691758156}, {"text": "b b b b b", "log_prob": -6.006549507379532}, {"text": "a aa", "log_prob": -5.254589691758156}]}, "epoch_35.pt": {"generated_sequences": ["a b", "b b b b", "a aa a aa aa aa", "a aa aa aa aa aa b", "c a", "b b b b b b b b b", "a aa b b b", "aa aa aa aa aa aa aa aa c", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "aa aa aa aa aa c", "b b b b b b b b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b b b b b b b b b b b", "a c", "a a aa aa", "a a aa", "a aa a aa aa", "a aa aa c", "a aa b b b b b b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa aa aa aa aa aa aa a aa aa aa aa", "a a", "aa b b", "b a aa", "b b b", "a aa aa aa aa aa aa aa b b", "a aa aa aa aa a aa", "b b b a aa aa aa aa aa aa aa", "c aa aa aa aa aa aa aa a b b b b b b b b b", "aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b", "a c aa aa", "b a aa aa aa", "b b", "a a", "a", "a aa aa aa a aa aa aa aa aa aa", "aa aa aa aa aa a aa aa", "aa a", "a aa aa b a aa aa aa aa aa aa aa aa aa", "a aa aa aa a", "a aa aa aa aa aa aa", "a aa aa aa aa b b", "a b b b", "a aa aa aa aa aa aa aa aa a", "a aa aa aa aa aa aa aa aa a aa aa aa aa aa", "a aa aa a aa", "a", "a aa aa aa aa aa aa aa aa aa aa b b", "b b b b b b b", "b b b b b b b b b b b b b b b", "c aa aa c"], "accuracy": 0.24, "train_overlap": 0.22, "res": [{"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "b b b b b b b b", "log_prob": -7.5984218046069145}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.941045641899109}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.164026603102684}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.941045641899109}, {"text": "a aa aa aa aa", "log_prob": -5.331660613417625}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.941045641899109}, {"text": "b b b b b", "log_prob": -6.430653497576714}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.340883672237396}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "b b b b b b b b b b b b b b", "log_prob": -9.330758886411786}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "a aa aa aa", "log_prob": -5.103957802057266}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.1413847506046295}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -9.47815371491015}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "b b b b b", "log_prob": -6.430653497576714}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.895722270011902}, {"text": "a aa aa aa aa aa", "log_prob": -5.674881473183632}, {"text": "b b b b", "log_prob": -6.096225947141647}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.728354752063751}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "b b b b b b b", "log_prob": -7.2258116863667965}, {"text": "a aa aa aa aa", "log_prob": -5.331660613417625}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "a aa aa aa", "log_prob": -5.103957802057266}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "b b b b", "log_prob": -6.096225947141647}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "b b b b b b b", "log_prob": -7.2258116863667965}, {"text": "b b b b b b b", "log_prob": -7.2258116863667965}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b b b b b b b b", "log_prob": -7.868182346224785}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.941045641899109}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "b b b b b b", "log_prob": -6.757276084274054}, {"text": "b b b b b b b b b", "log_prob": -7.868182346224785}, {"text": "b b b b b b b b b", "log_prob": -7.868182346224785}, {"text": "b b b b b b b b b", "log_prob": -7.868182346224785}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "b b b", "log_prob": -5.530587188899517}, {"text": "b b b b b b b b b b b", "log_prob": -8.376167109236121}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b b b b b b b b b", "log_prob": -8.085788790136576}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "a", "log_prob": -4.329107716679573}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "b b", "log_prob": -5.230583511292934}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "a aa aa", "log_prob": -4.868397995829582}, {"text": "b", "log_prob": -4.688358008861542}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.1413847506046295}, {"text": "c", "log_prob": -5.550156429409981}, {"text": "a aa", "log_prob": -4.6404257118701935}, {"text": "b b b b b", "log_prob": -6.430653497576714}, {"text": "a aa", "log_prob": -4.6404257118701935}]}, "epoch_40.pt": {"generated_sequences": ["c aa aa aa aa aa", "a a aa aa aa aa aa aa aa", "a b b b b b", "a aa aa aa aa aa", "a aa aa aa aa aa aa aa", "b b b b", "b b b b", "b b b b b b b b b b", "b b b a aa", "a aa aa aa aa aa aa aa aa aa aa aa b b b b b b b b b", "c aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa aa", "b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a aa aa b", "a b b b b b", "c aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b a aa aa aa", "a aa aa aa", "a aa aa aa aa", "a aa a aa aa aa aa", "b b c aa aa aa aa", "b b b b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa b b b b", "a aa aa b b b b", "b", "b b b b b b b b b b b b b b b b b", "a aa", "a aa aa aa aa aa", "b b b b b b b b", "a aa aa aa c", "b a", "a a aa aa aa aa aa", "a aa a aa", "aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b", "c aa aa aa aa aa aa aa aa a aa aa aa aa aa", "a aa aa aa aa aa", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b", "b b b b b b b b", "a aa aa aa aa aa aa aa", "b b b b b b b b", "a aa aa aa", "a aa aa aa aa aa aa aa aa aa", "b b", "b b c", "a b b b b b", "b", "b a aa", "a aa aa aa aa"], "accuracy": 0.52, "train_overlap": 0.5, "res": [{"text": "a aa", "log_prob": -5.149709697812796}, {"text": "b b b b b b b b", "log_prob": -6.706691846251488}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.223450964316726}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.468674220144749}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.223450964316726}, {"text": "a aa aa aa aa", "log_prob": -5.782913789153099}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.223450964316726}, {"text": "b b b b b", "log_prob": -5.995548170059919}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.237722914665937}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.872362672351301}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "a aa aa aa", "log_prob": -5.569694720208645}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.054113928228617}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.918336759321392}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "b b b b b", "log_prob": -5.995548170059919}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.682735883630812}, {"text": "a aa aa aa aa aa", "log_prob": -6.048276409506798}, {"text": "b b b b", "log_prob": -5.842774813994765}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.824425699189305}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "b b b b b b b", "log_prob": -6.482691042125225}, {"text": "a aa aa aa aa", "log_prob": -5.782913789153099}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "a aa aa aa", "log_prob": -5.569694720208645}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "b b b b", "log_prob": -5.842774813994765}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "b b b b b b b", "log_prob": -6.482691042125225}, {"text": "b b b b b b b", "log_prob": -6.482691042125225}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b b b b b b b b", "log_prob": -6.844516661018133}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.223450964316726}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "b b b b b b", "log_prob": -6.302813855931163}, {"text": "b b b b b b b b b", "log_prob": -6.844516661018133}, {"text": "b b b b b b b b b", "log_prob": -6.844516661018133}, {"text": "b b b b b b b b b", "log_prob": -6.844516661018133}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "b b b", "log_prob": -5.562688864767551}, {"text": "b b b b b b b b b b b", "log_prob": -7.104604810476303}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b b b b b b b b b", "log_prob": -6.954549155198038}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "a", "log_prob": -4.793852962553501}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "b b", "log_prob": -5.304154582321644}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "a aa aa", "log_prob": -5.438919551670551}, {"text": "b", "log_prob": -5.056553825736046}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.054113928228617}, {"text": "c", "log_prob": -5.944096490740776}, {"text": "a aa", "log_prob": -5.149709697812796}, {"text": "b b b b b", "log_prob": -5.995548170059919}, {"text": "a aa", "log_prob": -5.149709697812796}]}, "epoch_45.pt": {"generated_sequences": ["a aa aa aa aa", "a", "aa", "b", "a", "c", "a aa aa aa aa aa", "a b b b b b b b b", "c", "a", "c aa aa", "a aa aa aa", "b b", "a aa", "b b", "b b b b b", "b b b b", "aa a", "b b", "b b", "a aa", "aa aa", "b b b b b", "aa aa aa aa aa", "c", "a aa", "a aa aa aa", "a aa", "b b b b b", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa aa aa", "b", "a aa aa aa", "b b b b b", "a aa aa", "c", "a aa", "aa aa", "aa aa aa", "a aa aa aa aa aa aa", "a aa aa aa aa aa aa aa", "a", "a aa aa aa", "b", "b", "a aa", "a", "b", "a", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa"], "accuracy": 0.82, "train_overlap": 0.82, "res": [{"text": "a aa", "log_prob": -4.474450550973415}, {"text": "b b b b b b b b", "log_prob": -6.512856284156442}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.73476011864841}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.044700415804982}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.73476011864841}, {"text": "a aa aa aa aa", "log_prob": -5.179652903228998}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.73476011864841}, {"text": "b b b b b", "log_prob": -5.837432470172644}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.00242771115154}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.687063598074019}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "a aa aa aa", "log_prob": -4.904128713533282}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.7988921059295535}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.7487941649742424}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "b b b b b", "log_prob": -5.837432470172644}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.614594407379627}, {"text": "a aa aa aa aa aa", "log_prob": -5.4668800663203}, {"text": "b b b b", "log_prob": -5.56210111733526}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.518967155367136}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "b b b b b b b", "log_prob": -6.329201364889741}, {"text": "a aa aa aa aa", "log_prob": -5.179652903228998}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "a aa aa aa", "log_prob": -4.904128713533282}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "b b b b", "log_prob": -5.56210111733526}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "b b b b b b b", "log_prob": -6.329201364889741}, {"text": "b b b b b b b", "log_prob": -6.329201364889741}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b b b b b b b b", "log_prob": -6.653790394775569}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.73476011864841}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "b b b b b b", "log_prob": -6.073944482021034}, {"text": "b b b b b b b b b", "log_prob": -6.653790394775569}, {"text": "b b b b b b b b b", "log_prob": -6.653790394775569}, {"text": "b b b b b b b b b", "log_prob": -6.653790394775569}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "b b b", "log_prob": -5.260183120146394}, {"text": "b b b b b b b b b b b", "log_prob": -6.980954105500132}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b b b b b b b b b", "log_prob": -6.759231491945684}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "a", "log_prob": -4.229529492557049}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "b b", "log_prob": -5.076234124600887}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "a aa aa", "log_prob": -4.729053834453225}, {"text": "b", "log_prob": -4.851283047348261}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.7988921059295535}, {"text": "c", "log_prob": -5.075092472136021}, {"text": "a aa", "log_prob": -4.474450550973415}, {"text": "b b b b b", "log_prob": -5.837432470172644}, {"text": "a aa", "log_prob": -4.474450550973415}]}, "epoch_5.pt": {"generated_sequences": ["b aa aa b aa aa aa aa aa aa aa aa a aa aa aa aa a aa aa a aa aa aa aa aa aa aa aa aa aa", "aa aa aa aa aa a aa aa aa a aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa a b aa aa aa aa aa c aa aa b aa aa aa", "aa aa aa aa b b b b b b a b b aa aa a aa aa aa b b b b aa b b b aa aa aa a aa aa a aa aa b aa b b b b b b aa aa aa a aa aa aa aa aa aa a aa aa aa aa aa aa aa b b b aa aa aa a a b aa c aa aa aa aa aa aa aa aa aa a aa a aa a aa aa aa aa aa aa aa aa aa", "a aa aa aa aa aa b aa aa aa a aa b b c aa aa aa aa aa b aa aa a aa aa aa b aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa a aa aa c aa aa b b b b", "b aa b b aa aa b aa b b a aa aa aa aa aa b b c aa aa a aa aa b b b b b aa aa aa aa aa aa a aa aa aa aa a aa b b b a aa aa aa aa aa aa aa aa a b b a aa aa aa aa aa aa aa aa a aa a aa aa aa b b aa aa aa aa aa b aa aa a aa b b b aa b b b aa aa b b a a aa aa", "b b aa aa aa a aa aa aa aa aa aa b b aa a aa b b aa aa aa b aa aa a aa a a aa aa aa aa aa aa aa c aa aa aa aa aa aa aa b b b b b aa aa b b aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa a aa b b b aa aa aa aa aa aa aa aa aa a aa aa b b b b", "b b b aa aa b b aa aa b aa aa aa aa aa", "a b b b b b b b b b b aa aa b b b b b b b aa aa a aa aa aa c aa b a aa a aa aa a aa b b aa aa b b a aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa c a aa aa aa aa aa aa aa aa aa a aa aa aa b aa aa a a aa aa aa b aa aa aa", "b aa aa aa b a aa aa aa aa aa aa c aa aa aa aa aa aa c a a aa aa aa aa aa aa aa aa b b b aa aa aa aa aa aa", "b b a a aa aa b aa aa a aa b b b aa aa aa b aa aa aa aa aa aa aa b a aa aa a aa a aa aa aa aa aa aa aa aa aa b b aa aa aa aa aa aa b aa aa aa aa a aa b a aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b c aa aa aa aa aa aa aa", "b b b a aa aa aa a b b aa a b b b b b b a aa aa aa aa aa aa b a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b b a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a b b b aa aa aa aa aa aa aa aa aa aa aa aa a b b b b b b b aa aa aa aa aa aa aa aa aa b b b aa aa aa aa aa aa aa aa aa aa aa", "b a aa b b b b a aa a aa aa a aa aa a a aa aa aa aa aa a aa aa aa aa aa a b b aa aa c aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b aa a b b b b b a aa aa aa aa aa aa aa a aa aa aa a aa c aa aa aa a aa aa a aa aa aa aa aa aa aa aa b b b b b b b b b b b b b b b b b aa b b b b aa aa aa aa aa aa a aa b c a aa aa aa a aa aa a aa aa aa aa c aa aa aa aa aa aa a", "b b b b b b b a aa aa aa aa b b b b b b b a aa aa aa b b aa aa aa aa aa aa aa aa aa aa a c aa aa aa a aa aa aa a aa aa a aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa a aa aa a a b b b aa aa aa aa aa aa b b b a aa a aa aa aa aa aa aa b aa a aa aa a aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa", "a aa", "b b aa aa aa aa aa aa aa b b b b a b b b b b b b b b b aa b b b b aa a aa aa aa a a aa aa aa aa aa a aa b aa aa aa aa aa a aa aa aa aa aa c a aa aa aa aa aa aa aa aa b a a aa aa", "b c aa aa aa aa", "a aa aa aa aa a a aa aa aa aa b b b b b aa aa aa b b b b b a b aa aa aa aa b b b b b b aa aa b b b b a aa b aa aa aa aa aa aa aa aa aa a aa a a aa c aa aa aa aa aa b aa b b aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa c a aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa", "b aa aa aa aa aa aa aa aa aa aa aa aa aa a aa c aa aa aa aa aa aa aa aa aa", "b b aa aa c a aa aa aa aa aa a aa aa aa aa aa aa aa aa aa", "b b b a aa aa aa a aa aa aa b b b aa aa b b b b b b b b aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa a aa aa aa aa aa aa a aa aa aa aa aa aa aa b b b aa b b b b b b b aa c a aa aa aa aa aa aa aa b b b b aa aa aa c aa b b aa a aa aa aa c c aa aa aa a aa a aa a a aa aa aa", "b b b a aa aa aa aa aa aa c aa aa aa a aa aa a a aa aa aa aa aa a aa aa b b b b aa a aa a aa aa a aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa b b", "b b b c a aa a aa a aa b b b b a b c b b b b a aa aa a aa aa aa b b b c a aa aa aa b aa aa aa aa aa aa aa aa aa b b b a aa aa aa aa aa aa aa aa aa aa aa a a c b aa aa aa aa a b b b b aa a aa aa aa b b aa aa aa aa aa aa b b b b b a aa aa aa aa c aa aa b aa b aa aa aa", "b aa aa a aa aa aa aa aa aa aa a aa aa a aa b b b a aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa b aa a aa aa aa aa aa aa aa aa aa a aa a aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa b b b b b b b b b c a aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa a aa aa aa aa", "aa aa aa aa aa aa aa aa aa a aa b aa aa aa aa aa a b b a b b b b b b aa aa aa aa aa aa aa aa aa a aa aa a aa aa aa aa aa aa aa aa b b b b b b b b b b b c aa aa aa b b b b aa aa aa aa b b a aa b b b b a a aa aa a aa aa aa aa aa aa a aa aa c a aa", "b a aa aa aa c b aa aa aa b b b b b aa aa aa aa b a b b b aa aa aa a a aa aa aa aa aa aa aa aa aa aa b b aa aa aa aa aa b b aa aa aa aa aa aa aa aa aa aa aa b b b aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa b aa aa", "b b aa aa aa aa aa aa a aa a aa aa aa aa aa aa aa aa aa aa aa", "aa a aa aa aa aa a aa aa aa aa aa aa aa aa aa b b a aa aa a aa aa a aa aa aa aa aa aa aa a aa aa aa aa aa aa b b b b b aa a b b b b a aa aa aa b b aa a aa aa aa aa aa aa aa aa aa aa aa aa b b a aa aa c aa aa aa aa aa aa aa aa aa", "aa b b b aa aa aa b b b aa aa", "a aa aa aa aa b aa a aa aa c a c aa aa aa aa aa aa aa aa aa aa b b a aa aa c a aa aa aa aa aa aa a aa aa b b aa a aa aa aa aa aa aa aa aa aa b b aa aa aa aa aa", "aa aa b b b b b b c aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b a aa aa aa aa aa b b b aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa b aa aa aa aa a b b b aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a", "b aa", "aa aa aa aa b aa aa aa aa aa c aa", "b aa aa aa aa aa aa a", "b a aa b b b b b b b aa b b a aa a aa a aa a aa b b aa aa aa a aa aa b b b b b b b b b aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa a b aa aa aa aa aa aa b b b aa aa aa aa aa aa a aa aa aa b aa aa aa a aa aa aa b aa c aa b b b b b a a aa a a b b b b b b b b aa aa", "b b b b aa a c a aa aa aa aa a aa b b a aa b aa aa aa aa aa aa aa aa aa b b b aa aa aa a aa aa aa aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa b b aa aa aa aa aa aa aa aa b c a aa b aa b b b b b b a aa aa aa aa b aa aa a c aa aa aa aa b b b b b a aa aa aa aa aa aa aa", "a aa aa a aa aa a aa aa aa aa aa aa aa aa aa", "b b b b a aa a a aa aa aa aa a", "b b b a aa aa aa aa a aa c aa aa b b b b b b b b b b a a aa aa aa aa aa aa aa a aa aa aa aa a aa aa aa aa a aa aa aa aa c b aa aa aa aa b b b b aa aa aa a aa aa aa aa a aa aa a aa aa aa aa a aa aa aa aa aa aa aa aa aa a aa aa b aa", "b a a aa aa b aa aa aa aa aa aa aa aa aa a b aa aa aa aa aa aa b b b b b b aa aa aa aa a aa aa aa aa aa aa a aa aa a aa aa aa b aa aa aa aa aa aa b b b b b b b b aa aa b b aa aa aa aa a aa aa aa aa b aa aa a a aa aa aa b a aa aa aa aa aa aa aa aa aa aa a a aa a aa b b a aa aa", "a aa aa aa aa c b c a aa aa aa aa aa aa aa aa aa aa b aa a aa aa aa aa aa aa b b b b aa aa aa b aa", "aa aa aa aa b b", "aa a b b b b b b b aa a aa aa aa aa aa aa aa c b aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa c aa aa", "a aa b b aa b b a aa a aa b b b aa aa aa aa aa aa b b b b b b aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa b b b b b b b b b b b b aa aa aa aa aa aa aa aa aa aa aa a aa a aa b b b b b b aa aa b b aa a aa aa aa aa aa aa a aa a aa aa aa aa aa aa b a aa aa aa aa aa aa aa aa aa", "b b aa aa aa a c a aa aa aa aa aa a aa aa aa a a aa aa aa b b aa b b b b aa b b b b b b b b b b aa aa aa aa a aa aa aa aa aa aa aa a aa a a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa c a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b aa aa aa aa aa c a a c a aa aa aa aa aa aa aa aa aa", "b b b b aa aa aa aa aa aa aa aa aa a aa aa aa aa a aa aa b aa aa aa aa aa a a aa aa a b b b aa aa aa aa aa aa aa aa a aa aa a aa aa a aa aa aa aa aa a a aa aa aa aa aa aa b b b b aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "aa aa b b b a aa aa aa aa aa a aa a a aa aa aa aa aa aa aa aa aa aa b b a aa aa aa aa aa aa aa aa aa aa aa aa aa a b b b b b b b aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a aa aa aa a aa aa aa aa b b a b", "b aa b b aa aa aa"], "accuracy": 0.02, "train_overlap": 0.02, "res": [{"text": "a aa", "log_prob": -8.460050880908966}, {"text": "b b b b b b b b", "log_prob": -10.232819199562073}, {"text": "a aa aa aa aa aa aa", "log_prob": -12.736723840236664}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -13.566478252410889}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "a aa aa aa aa aa aa", "log_prob": -12.736723840236664}, {"text": "a aa aa aa aa", "log_prob": -11.073013186454773}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "a aa aa aa aa aa aa", "log_prob": -12.736723840236664}, {"text": "b b b b b", "log_prob": -8.3172567486763}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -16.486168801784515}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "b b b b b b b b b b b b b b", "log_prob": -13.375895321369171}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "a aa aa aa", "log_prob": -10.08919757604599}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -15.740205347537994}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -13.83938056230545}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "b b b b b", "log_prob": -8.3172567486763}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -17.849231600761414}, {"text": "a aa aa aa aa aa", "log_prob": -11.84622210264206}, {"text": "b b b b", "log_prob": -7.460308015346527}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -14.823261797428131}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "b b b b b b b", "log_prob": -9.505199551582336}, {"text": "a aa aa aa aa", "log_prob": -11.073013186454773}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "a aa aa aa", "log_prob": -10.08919757604599}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "b b b b", "log_prob": -7.460308015346527}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "b b b b b b b", "log_prob": -9.505199551582336}, {"text": "b b b b b b b", "log_prob": -9.505199551582336}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b b b b b b b b", "log_prob": -10.242549300193787}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "a aa aa aa aa aa aa", "log_prob": -12.736723840236664}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "b b b b b b", "log_prob": -8.635908246040344}, {"text": "b b b b b b b b b", "log_prob": -10.242549300193787}, {"text": "b b b b b b b b b", "log_prob": -10.242549300193787}, {"text": "b b b b b b b b b", "log_prob": -10.242549300193787}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "b b b", "log_prob": -6.975884258747101}, {"text": "b b b b b b b b b b b", "log_prob": -11.762153029441833}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b b b b b b b b b", "log_prob": -11.166156470775604}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "a", "log_prob": -7.127110600471497}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "b b", "log_prob": -6.575504899024963}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "a aa aa", "log_prob": -9.30478185415268}, {"text": "b", "log_prob": -5.847432315349579}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -15.740205347537994}, {"text": "c", "log_prob": -8.4544198513031}, {"text": "a aa", "log_prob": -8.460050880908966}, {"text": "b b b b b", "log_prob": -8.3172567486763}, {"text": "a aa", "log_prob": -8.460050880908966}]}, "epoch_50.pt": {"generated_sequences": ["c b", "a aa aa aa aa aa aa b b b b b b b b b b b", "a aa aa aa aa aa aa b b", "a c", "b b b b b b b", "a aa aa aa a aa", "c a aa aa aa", "a aa aa aa aa aa a", "a aa aa aa aa a aa aa", "a aa aa aa aa aa a", "a aa aa aa aa b b", "c aa aa aa aa aa aa", "a aa aa aa", "a aa aa aa aa b b b b b b b b b b", "a aa aa aa aa a", "a aa aa aa aa aa aa", "b b b b b b b", "c a", "a aa aa aa aa aa aa a", "a aa aa aa", "a a", "b b", "a aa aa a aa aa a aa aa aa aa aa", "a aa aa b b b b b b b b b b b b b b", "a aa aa aa aa aa aa a", "a aa aa a aa aa aa aa aa aa", "c a aa aa aa aa aa aa aa aa aa c", "a aa aa aa aa a", "a", "a aa aa aa aa aa aa a", "a aa aa aa aa aa b b b b b b b b b", "a b b", "b b b b", "a b", "b b b b a aa aa aa", "b b a", "b b b b c", "a aa aa aa", "b b b b b b b b b", "b a aa aa aa aa aa aa aa aa aa aa", "c", "a aa aa a aa aa aa", "b b b b b b", "a aa aa aa aa aa aa aa aa", "a b b b b b", "b b", "a aa a", "a a aa aa", "a aa aa a", "a aa aa aa aa b"], "accuracy": 0.28, "train_overlap": 0.28, "res": [{"text": "a aa", "log_prob": -4.021133817732334}, {"text": "b b b b b b b b", "log_prob": -6.249037258327007}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.322655692696571}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -5.661312490701675}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.322655692696571}, {"text": "a aa aa aa aa", "log_prob": -4.801730304956436}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.322655692696571}, {"text": "b b b b b", "log_prob": -5.5488229393959045}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.715835347771645}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.656231195665896}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "a aa aa aa", "log_prob": -4.509418278932571}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.1817284524440765}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.8096699845045805}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "b b b b b", "log_prob": -5.5488229393959045}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.071537669748068}, {"text": "a aa aa aa aa aa", "log_prob": -5.121905893087387}, {"text": "b b b b", "log_prob": -5.23764231055975}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.124149426817894}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "b b b b b b b", "log_prob": -6.033164888620377}, {"text": "a aa aa aa aa", "log_prob": -4.801730304956436}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "a aa aa aa", "log_prob": -4.509418278932571}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "b b b b", "log_prob": -5.23764231055975}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "b b b b b b b", "log_prob": -6.033164888620377}, {"text": "b b b b b b b", "log_prob": -6.033164888620377}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b b b b b b b b", "log_prob": -6.43314665555954}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.322655692696571}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "b b b b b b", "log_prob": -5.822889760136604}, {"text": "b b b b b b b b b", "log_prob": -6.43314665555954}, {"text": "b b b b b b b b b", "log_prob": -6.43314665555954}, {"text": "b b b b b b b b b", "log_prob": -6.43314665555954}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "b b b", "log_prob": -5.00166279822588}, {"text": "b b b b b b b b b b b", "log_prob": -7.266742393374443}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b b b b b b b b b", "log_prob": -6.641879495233297}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "a", "log_prob": -3.717326747253537}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "b b", "log_prob": -4.6664072945714}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "a aa aa", "log_prob": -4.3524836003780365}, {"text": "b", "log_prob": -4.365444589406252}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.1817284524440765}, {"text": "c", "log_prob": -4.712858311831951}, {"text": "a aa", "log_prob": -4.021133817732334}, {"text": "b b b b b", "log_prob": -5.5488229393959045}, {"text": "a aa", "log_prob": -4.021133817732334}]}, "epoch_55.pt": {"generated_sequences": ["c b b a aa aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b", "a aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b", "a aa aa", "a b b b b b", "a a aa", "a aa aa aa aa aa aa aa aa aa aa aa aa aa a aa", "a b b b b", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa", "a aa", "b b b b b b a aa aa aa aa aa aa aa aa aa aa aa aa aa", "a b b b b b b b b b b b b b b", "a aa aa aa aa aa", "a a aa", "b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a b b b b b b b b b b b b", "a aa", "a b", "a aa aa aa aa aa aa aa", "b b b b b b b b b b b b b b b b", "c b", "b b b b b b b b a aa aa aa", "a aa aa aa aa aa aa aa aa a aa aa aa aa aa aa aa aa aa aa aa aa", "b b b b b b b b b b b b b a aa aa aa aa aa aa aa aa", "a aa aa", "b b b b b b b b b b b b b b b", "a aa aa aa", "a aa aa", "b b b b c", "a b b b b b b b b b b", "b b b b b b b b b b b", "a a aa", "a aa aa aa aa aa aa aa aa aa aa aa aa", "a aa", "a aa", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "c", "a aa aa aa aa aa", "a a aa aa", "b b b b b b b b", "b b b b b b b b b b b", "a aa aa", "b b b b b b a", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa b b b b b b b b b b b", "a a", "b b b b b b b b b b b b b b b b b b b a aa aa aa aa aa aa aa aa", "a b b b b", "a b"], "accuracy": 0.52, "train_overlap": 0.46, "res": [{"text": "a aa", "log_prob": -5.917374882847071}, {"text": "b b b b b b b b", "log_prob": -7.460914894938469}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.831749767065048}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -7.034863863140345}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.831749767065048}, {"text": "a aa aa aa aa", "log_prob": -6.46857201680541}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.831749767065048}, {"text": "b b b b b", "log_prob": -6.732180785387754}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.622037660330534}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "b b b b b b b b b b b b b b", "log_prob": -8.099641354754567}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "a aa aa aa", "log_prob": -6.32638727221638}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.530938060022891}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -8.535188376903534}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "b b b b b", "log_prob": -6.732180785387754}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.940197995863855}, {"text": "a aa aa aa aa aa", "log_prob": -6.672917818650603}, {"text": "b b b b", "log_prob": -6.5447414591908455}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -7.338102082721889}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "b b b b b b b", "log_prob": -7.068096946924925}, {"text": "a aa aa aa aa", "log_prob": -6.46857201680541}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "a aa aa aa", "log_prob": -6.32638727221638}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "b b b b", "log_prob": -6.5447414591908455}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "b b b b b b b", "log_prob": -7.068096946924925}, {"text": "b b b b b b b", "log_prob": -7.068096946924925}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b b b b b b b b", "log_prob": -7.467192590236664}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.831749767065048}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "b b b b b b", "log_prob": -6.949794188141823}, {"text": "b b b b b b b b b", "log_prob": -7.467192590236664}, {"text": "b b b b b b b b b", "log_prob": -7.467192590236664}, {"text": "b b b b b b b b b", "log_prob": -7.467192590236664}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "b b b", "log_prob": -6.46145074814558}, {"text": "b b b b b b b b b b b", "log_prob": -7.730771712958813}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b b b b b b b b b", "log_prob": -7.4899934604763985}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "a", "log_prob": -5.806037395261228}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "b b", "log_prob": -6.227133892476559}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "a aa aa", "log_prob": -6.168433315120637}, {"text": "b", "log_prob": -6.278392607346177}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.530938060022891}, {"text": "c", "log_prob": -6.049715910106897}, {"text": "a aa", "log_prob": -5.917374882847071}, {"text": "b b b b b", "log_prob": -6.732180785387754}, {"text": "a aa", "log_prob": -5.917374882847071}]}, "epoch_60.pt": {"generated_sequences": ["c b b b b", "b b", "a a aa", "b b b b b b", "a aa aa aa aa aa aa aa aa b b b b b b", "a aa aa aa aa aa c", "b b b b b", "b b b a aa aa", "b b b b b", "b a aa", "b b b b b b b b a", "a a", "a b b b b", "b b b b b b b b b b b b", "b b b b b b b b b", "a aa b", "c b b b b", "b b b b b b b b b b b b b", "b b b b b b b b b", "a", "b b a aa", "b b b b b b b b", "b b b a aa aa aa aa", "b b b b b b", "c b b b b b b", "a b b b", "a aa aa aa aa b", "b", "a a aa aa aa aa aa aa aa aa aa aa", "b", "a b b", "b b b b b b b b b b b b b", "b b b b b b b b", "a b", "b b b b b b b b b b b b b b b", "a aa aa a aa", "a a aa aa aa aa aa aa aa aa aa", "a b b b b b b b b b b b b b b b", "b b b b", "b b b b", "c b b b b b", "b b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b a", "b a", "a", "b b b", "c b", "b a", "a aa aa aa aa aa b b b b b b b"], "accuracy": 0.44, "train_overlap": 0.42, "res": [{"text": "a aa", "log_prob": -4.943741142749786}, {"text": "b b b b b b b b", "log_prob": -5.6016015112400055}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.31045888364315}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -7.828142300248146}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.31045888364315}, {"text": "a aa aa aa aa", "log_prob": -6.4262571185827255}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.31045888364315}, {"text": "b b b b b", "log_prob": -4.8706796281039715}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -9.257158234715462}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "b b b b b b b b b b b b b b", "log_prob": -6.82248205691576}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "a aa aa aa", "log_prob": -5.916870702058077}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -9.167542964220047}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.009539231657982}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "b b b b b", "log_prob": -4.8706796281039715}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -10.024906389415264}, {"text": "a aa aa aa aa aa", "log_prob": -6.778102599084377}, {"text": "b b b b", "log_prob": -4.58946037851274}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -8.514798998832703}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "b b b b b b b", "log_prob": -5.28287286311388}, {"text": "a aa aa aa aa", "log_prob": -6.4262571185827255}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "a aa aa aa", "log_prob": -5.916870702058077}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "b b b b", "log_prob": -4.58946037851274}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "b b b b b b b", "log_prob": -5.28287286311388}, {"text": "b b b b b b b", "log_prob": -5.28287286311388}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b b b b b b b b", "log_prob": -5.823686771094799}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "a aa aa aa aa aa aa", "log_prob": -7.31045888364315}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "b b b b b b", "log_prob": -5.045736441388726}, {"text": "b b b b b b b b b", "log_prob": -5.823686771094799}, {"text": "b b b b b b b b b", "log_prob": -5.823686771094799}, {"text": "b b b b b b b b b", "log_prob": -5.823686771094799}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "b b b", "log_prob": -4.41013777256012}, {"text": "b b b b b b b b b b b", "log_prob": -6.267502322793007}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b b b b b b b b b", "log_prob": -5.993019437417388}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "a", "log_prob": -3.870709164068103}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "b b", "log_prob": -4.1695340648293495}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "a aa aa", "log_prob": -5.505650356411934}, {"text": "b", "log_prob": -4.03271240927279}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -9.167542964220047}, {"text": "c", "log_prob": -5.100073397159576}, {"text": "a aa", "log_prob": -4.943741142749786}, {"text": "b b b b b", "log_prob": -4.8706796281039715}, {"text": "a aa", "log_prob": -4.943741142749786}]}, "epoch_65.pt": {"generated_sequences": ["a aa aa aa aa aa", "c", "a", "c aa aa aa aa", "a aa", "a aa aa aa aa aa aa aa aa aa aa", "a aa aa aa", "b b", "a", "a aa aa", "a aa aa aa aa", "a aa aa", "b b b", "c", "a aa aa aa aa aa", "a aa aa", "b b b", "a aa", "b b b b b", "a aa aa aa aa", "b b b b b", "b b b b b b b b", "a aa", "a aa aa aa aa aa aa", "b b b", "a aa aa aa aa aa aa aa aa aa aa aa", "b aa aa aa aa aa aa aa aa", "b b", "a aa aa", "a", "b b b b b", "b b b b b b", "b b", "b b", "b b b b b b", "a aa aa aa aa aa aa aa aa aa", "a aa", "a aa", "a aa", "b b", "b b b b", "a", "a aa aa", "a aa aa aa aa aa aa aa aa aa", "b b b b", "b b b b b b b b b", "c", "a", "a aa", "a aa aa aa aa"], "accuracy": 0.96, "train_overlap": 0.96, "res": [{"text": "a aa", "log_prob": -4.46517126634717}, {"text": "b b b b b b b b", "log_prob": -6.837862774729729}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.908622687682509}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.17635359056294}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.908622687682509}, {"text": "a aa aa aa aa", "log_prob": -5.357873236760497}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.908622687682509}, {"text": "b b b b b", "log_prob": -5.637416156474501}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.204816343262792}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "b b b b b b b b b b b b b b", "log_prob": -9.157091415021569}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "a aa aa aa", "log_prob": -5.109440805390477}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.963640999048948}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -9.514046808704734}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "b b b b b", "log_prob": -5.637416156474501}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.719065489247441}, {"text": "a aa aa aa aa aa", "log_prob": -5.6210872661322355}, {"text": "b b b b", "log_prob": -5.157484458759427}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.685152918100357}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "b b b b b b b", "log_prob": -6.366949875839055}, {"text": "a aa aa aa aa", "log_prob": -5.357873236760497}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "a aa aa aa", "log_prob": -5.109440805390477}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "b b b b", "log_prob": -5.157484458759427}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "b b b b b b b", "log_prob": -6.366949875839055}, {"text": "b b b b b b b", "log_prob": -6.366949875839055}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b b b b b b b b", "log_prob": -7.196817926131189}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.908622687682509}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "b b b b b b", "log_prob": -6.021724186837673}, {"text": "b b b b b b b b b", "log_prob": -7.196817926131189}, {"text": "b b b b b b b b b", "log_prob": -7.196817926131189}, {"text": "b b b b b b b b b", "log_prob": -7.196817926131189}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "b b b", "log_prob": -4.778674302622676}, {"text": "b b b b b b b b b b b", "log_prob": -7.962235647253692}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b b b b b b b b b", "log_prob": -7.52706053853035}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "a", "log_prob": -3.9831689056009054}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "b b", "log_prob": -4.312605454586446}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "a aa aa", "log_prob": -4.8170358799397945}, {"text": "b", "log_prob": -4.0544969057664275}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.963640999048948}, {"text": "c", "log_prob": -4.606552025303245}, {"text": "a aa", "log_prob": -4.46517126634717}, {"text": "b b b b b", "log_prob": -5.637416156474501}, {"text": "a aa", "log_prob": -4.46517126634717}]}, "epoch_70.pt": {"generated_sequences": ["b b", "b b b b b b", "b b b b b b b b", "b b", "c", "a aa aa aa aa aa", "b b b b b", "b b b", "a", "b b b b b", "b", "b b b b b b b b b b b b b b b b b b", "b b b", "b b b b b b b b b b", "a aa aa aa aa aa aa aa", "c", "a aa aa aa aa", "b b b b", "b b b b b b b", "a aa aa", "a aa aa", "a aa", "b b b", "a aa aa aa aa aa", "c", "b b", "a", "a", "b b b b b", "b b b b b b b a", "b b b b b b b b b b b b", "c aa aa aa", "a aa aa aa", "a aa aa aa", "a", "aa aa aa", "a", "b b b", "a aa", "b", "b", "a", "b b", "a", "b b", "b b b b", "b b b b b b", "c aa aa aa aa aa", "a aa aa aa aa aa", "b"], "accuracy": 0.92, "train_overlap": 0.92, "res": [{"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "b b b b b b b b", "log_prob": -4.936730368062854}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.930135711096227}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -5.182876109145582}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.930135711096227}, {"text": "a aa aa aa aa", "log_prob": -4.378762639127672}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.930135711096227}, {"text": "b b b b b", "log_prob": -4.367879514582455}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.2896879855543375}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "b b b b b b b b b b b b b b", "log_prob": -6.092405654489994}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "a aa aa aa", "log_prob": -4.113006232306361}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.010830195620656}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -6.250802790746093}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "b b b b b", "log_prob": -4.367879514582455}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.828619968146086}, {"text": "a aa aa aa aa aa", "log_prob": -4.635407860390842}, {"text": "b b b b", "log_prob": -4.0711905267089605}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -5.747192051261663}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "b b b b b b b", "log_prob": -4.7146387957036495}, {"text": "a aa aa aa aa", "log_prob": -4.378762639127672}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "a aa aa aa", "log_prob": -4.113006232306361}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "b b b b", "log_prob": -4.0711905267089605}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "b b b b b b b", "log_prob": -4.7146387957036495}, {"text": "b b b b b b b", "log_prob": -4.7146387957036495}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b b b b b b b b", "log_prob": -5.124516467563808}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.930135711096227}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "b b b b b b", "log_prob": -4.564297521486878}, {"text": "b b b b b b b b b", "log_prob": -5.124516467563808}, {"text": "b b b b b b b b b", "log_prob": -5.124516467563808}, {"text": "b b b b b b b b b", "log_prob": -5.124516467563808}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "b b b", "log_prob": -3.867574008181691}, {"text": "b b b b b b b b b b b", "log_prob": -5.491763999685645}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b b b b b b b b b", "log_prob": -5.2653986173681915}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "a", "log_prob": -3.2005764171481133}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "b b", "log_prob": -3.609354159794748}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "a aa aa", "log_prob": -3.831343477591872}, {"text": "b", "log_prob": -3.573291809298098}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.010830195620656}, {"text": "c", "log_prob": -4.029662245884538}, {"text": "a aa", "log_prob": -3.5502850748598576}, {"text": "b b b b b", "log_prob": -4.367879514582455}, {"text": "a aa", "log_prob": -3.5502850748598576}]}, "epoch_75.pt": {"generated_sequences": ["b b b b b b b b b b b b b b b b b b b b b b b b", "a aa aa aa aa", "b", "c", "c", "b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a", "b b b b", "a aa aa", "a", "a aa aa aa", "c", "b b b", "a aa", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "b b", "c", "c", "b b", "a aa aa aa aa aa aa aa aa aa aa", "c", "a aa aa", "a aa", "c", "a aa aa aa", "a", "b b b b b b b b b b b b b", "a aa", "b b", "a aa", "a", "a", "a aa", "a", "b b b", "b b b b b b b b", "a", "a aa aa", "a", "c", "c", "a aa aa aa aa aa aa aa", "b b b b b b b b", "a aa aa aa aa aa aa", "b b b", "a aa aa", "b b b b", "c", "c"], "accuracy": 1.0, "train_overlap": 0.96, "res": [{"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "b b b b b b b b", "log_prob": -5.292179093929008}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.88392593502067}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -5.173858906375244}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.88392593502067}, {"text": "a aa aa aa aa", "log_prob": -4.23748491355218}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.88392593502067}, {"text": "b b b b b", "log_prob": -4.52777553582564}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.413543633418158}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "b b b b b b b b b b b b b b", "log_prob": -6.711829150095582}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "a aa aa aa", "log_prob": -3.915276547893882}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.1323988935910165}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -6.966226111166179}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "b b b b b", "log_prob": -4.52777553582564}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.042245029937476}, {"text": "a aa aa aa aa aa", "log_prob": -4.536598916864023}, {"text": "b b b b", "log_prob": -4.157261481275782}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -5.8382636569440365}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "b b b b b b b", "log_prob": -5.039891040883958}, {"text": "a aa aa aa aa", "log_prob": -4.23748491355218}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "a aa aa aa", "log_prob": -3.915276547893882}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "b b b b", "log_prob": -4.157261481275782}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "b b b b b b b", "log_prob": -5.039891040883958}, {"text": "b b b b b b b", "log_prob": -5.039891040883958}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b b b b b b b b", "log_prob": -5.512087992858142}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "a aa aa aa aa aa aa", "log_prob": -4.88392593502067}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "b b b b b b", "log_prob": -4.765725194010884}, {"text": "b b b b b b b b b", "log_prob": -5.512087992858142}, {"text": "b b b b b b b b b", "log_prob": -5.512087992858142}, {"text": "b b b b b b b b b", "log_prob": -5.512087992858142}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "b b b", "log_prob": -3.8980257196817547}, {"text": "b b b b b b b b b b b", "log_prob": -6.046863230178133}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b b b b b b b b b", "log_prob": -5.780710918363184}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "a", "log_prob": -2.6957701353821903}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "b b", "log_prob": -3.5819737017154694}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "a aa aa", "log_prob": -3.5914682706352323}, {"text": "b", "log_prob": -3.284307807451114}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.1323988935910165}, {"text": "c", "log_prob": -3.134789189323783}, {"text": "a aa", "log_prob": -3.2455888516269624}, {"text": "b b b b b", "log_prob": -4.52777553582564}, {"text": "a aa", "log_prob": -3.2455888516269624}]}, "epoch_80.pt": {"generated_sequences": ["aa aa aa b b", "a aa aa aa aa aa aa", "b b b b b b b b", "b b b b b", "b b b b", "a aa aa aa aa aa aa aa aa", "a aa aa aa aa", "a c", "a aa aa aa", "a aa aa", "c", "b", "b b", "a", "a aa aa aa aa aa aa", "b b", "b b b b b b b b b b b b", "b b b", "a", "a aa aa aa", "a aa", "a aa aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa", "a", "a aa aa aa aa aa aa aa aa aa aa aa aa", "b", "a aa", "c", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b b b b b b b b b b b b", "a aa aa", "a aa", "a", "a aa aa", "b b b b b b", "c b b", "b b b b b b b b b b b b b", "a aa aa aa aa aa aa aa aa aa aa", "b b", "a aa aa", "a aa aa aa", "a aa", "b b b b b b b b b b b b b", "a", "c b b b b", "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "a aa aa aa", "b b b", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "b b b b b b b b"], "accuracy": 0.92, "train_overlap": 0.88, "res": [{"text": "a aa", "log_prob": -4.162899304181337}, {"text": "b b b b b b b b", "log_prob": -6.129003241658211}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.453310736455023}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -5.736587829422206}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.453310736455023}, {"text": "a aa aa aa aa", "log_prob": -4.921720559243113}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.453310736455023}, {"text": "b b b b b", "log_prob": -5.451178630813956}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.84848064254038}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.375277145765722}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "a aa aa aa", "log_prob": -4.674801281187683}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.588757127290592}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.5940945614129305}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "b b b b b", "log_prob": -5.451178630813956}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.41806905111298}, {"text": "a aa aa aa aa aa", "log_prob": -5.177328968886286}, {"text": "b b b b", "log_prob": -5.2047637375071645}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -6.305657885270193}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "b b b b b b b", "log_prob": -5.91352180019021}, {"text": "a aa aa aa aa", "log_prob": -4.921720559243113}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "a aa aa aa", "log_prob": -4.674801281187683}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "b b b b", "log_prob": -5.2047637375071645}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "b b b b b b b", "log_prob": -5.91352180019021}, {"text": "b b b b b b b", "log_prob": -5.91352180019021}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b b b b b b b b", "log_prob": -6.322023061104119}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "a aa aa aa aa aa aa", "log_prob": -5.453310736455023}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "b b b b b b", "log_prob": -5.70319626480341}, {"text": "b b b b b b b b b", "log_prob": -6.322023061104119}, {"text": "b b b b b b b b b", "log_prob": -6.322023061104119}, {"text": "b b b b b b b b b", "log_prob": -6.322023061104119}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "b b b", "log_prob": -4.9801936922594905}, {"text": "b b b b b b b b b b b", "log_prob": -6.791201556101441}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b b b b b b b b b", "log_prob": -6.535391696728766}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "a", "log_prob": -3.8496325174346566}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "b b", "log_prob": -4.719548100605607}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "a aa aa", "log_prob": -4.39626673841849}, {"text": "b", "log_prob": -4.519006337970495}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -6.588757127290592}, {"text": "c", "log_prob": -4.732125990092754}, {"text": "a aa", "log_prob": -4.162899304181337}, {"text": "b b b b b", "log_prob": -5.451178630813956}, {"text": "a aa", "log_prob": -4.162899304181337}]}, "epoch_85.pt": {"generated_sequences": ["b b", "c", "b b b b b b b b b b b b b", "b b b b b b b b", "a aa aa aa aa aa", "b b b b b b", "a", "a", "b b", "a", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "c", "b b b b", "a aa aa aa aa aa aa aa", "b b b b b b", "a aa", "a aa aa aa aa aa aa", "b", "a aa aa", "b b b b b b b", "a aa", "b b b b b b", "b", "a aa", "b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "c aa aa", "a aa aa", "b b b b b b b b b b b b b b b b b b b a", "c", "b b b b b b b b b b b b b", "a aa aa aa aa aa", "a aa", "b b b b b b b b b b b b b", "b b b b", "a aa aa aa aa aa aa aa", "a aa aa aa aa", "a aa", "b b b", "b b b b b b b b b b b b b", "b b b b b b b b b b", "b b b", "a", "a aa aa aa", "b b b", "c", "b", "a aa aa", "a aa aa aa aa", "c", "b b"], "accuracy": 0.96, "train_overlap": 0.92, "res": [{"text": "a aa", "log_prob": -4.91294089704752}, {"text": "b b b b b b b b", "log_prob": -6.555717938579619}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.24062928929925}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a aa aa aa aa aa aa aa", "log_prob": -6.500138836912811}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.24062928929925}, {"text": "a aa aa aa aa", "log_prob": -5.6964155891910195}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.24062928929925}, {"text": "b b b b b", "log_prob": -5.985200262162834}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.590284928679466}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "b b b b b b b b b b b b b b", "log_prob": -7.560891283676028}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "a aa aa aa", "log_prob": -5.467713181860745}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.3238043412566185}, {"text": "b b b b b b b b b b b b b b b", "log_prob": -7.733075234107673}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "b b b b b", "log_prob": -5.985200262162834}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a aa aa aa aa aa aa aa aa aa aa aa aa aa", "log_prob": -8.107439808547497}, {"text": "a aa aa aa aa aa", "log_prob": -5.946619453839958}, {"text": "b b b b", "log_prob": -5.7962018373655155}, {"text": "a aa aa aa aa aa aa aa aa aa", "log_prob": -7.020899524912238}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "b b b b b b b", "log_prob": -6.396623014239594}, {"text": "a aa aa aa aa", "log_prob": -5.6964155891910195}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "a aa aa aa", "log_prob": -5.467713181860745}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "b b b b", "log_prob": -5.7962018373655155}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "b b b b b b b", "log_prob": -6.396623014239594}, {"text": "b b b b b b b", "log_prob": -6.396623014239594}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b b b b b b b b", "log_prob": -6.720877802465111}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "a aa aa aa aa aa aa", "log_prob": -6.24062928929925}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "b b b b b b", "log_prob": -6.200718753505498}, {"text": "b b b b b b b b b", "log_prob": -6.720877802465111}, {"text": "b b b b b b b b b", "log_prob": -6.720877802465111}, {"text": "b b b b b b b b b", "log_prob": -6.720877802465111}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "b b b", "log_prob": -5.587958962190896}, {"text": "b b b b b b b b b b b", "log_prob": -7.135924620553851}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b b b b b b b b b", "log_prob": -6.878358485177159}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "a", "log_prob": -4.519291203469038}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "b b", "log_prob": -5.331886423286051}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "a aa aa", "log_prob": -5.21494946628809}, {"text": "b", "log_prob": -5.421877438668162}, {"text": "a aa aa aa aa aa aa aa aa aa aa", "log_prob": -7.3238043412566185}, {"text": "c", "log_prob": -5.598162784939632}, {"text": "a aa", "log_prob": -4.91294089704752}, {"text": "b b b b b", "log_prob": -5.985200262162834}, {"text": "a aa", "log_prob": -4.91294089704752}]}}, "ConditionalLoops": {"best.pt": {"generated_sequences": ["action", "if cond then action else t t t t t z", "if not cond then if not cond then if cond then if cond then if cond and cond and not cond then action else t t t t t z else t t z else t t t t t t z else t t z", "action", "action", "action", "while cond do if cond then action else t t t z else t z", "action", "action", "if cond then while not not cond and not cond and not not cond and not cond and cond and cond and cond and cond and cond then if cond and cond then action else t t t t t t z else z else z", "while cond do action", "if not cond and cond then if cond and not cond and cond then if cond and not cond and cond then while cond do action else t z else z else t t t t t t z", "if cond then action else z", "if not cond and not cond and cond and not not cond and not not cond and not cond and not cond and cond and cond and not cond and cond and not cond do while cond do action", "if not cond then action else t t t t t t t t z", "if cond then action else z else t z", "if not not not cond and not not cond and cond and cond and cond and not not cond and not cond and cond and cond and not cond and not cond and cond and cond and cond and not not not cond and not not cond and cond and not cond and cond then while not not not cond do action else t t z", "if not not not cond and cond then action else t z", "if not not cond then action else t t t t z else t t t z", "action", "action", "action", "action", "while cond do if cond then action else z", "if cond then action else t t t t z", "action", "while cond do action", "action", "if cond and cond then if not not cond and not cond and cond and not not cond and not cond and not cond and cond and cond and cond and not cond and cond and not not cond and cond then while cond do action else t t z else t z", "if cond and cond and not not cond then action else z else t t z", "action", "if cond then if not not not not cond and not cond then if cond then if cond and cond then while cond do action else t z else t z else t t t t t t z else t z else t z", "if not not not not cond and cond then action else z", "if cond then action else t t t t t t z else t z", "if cond then action else z", "action", "action", "action", "action", "action", "while cond do if not not not cond and not not not not not not cond and not not cond and cond and cond and not cond and cond and cond and not cond and not cond then action else t t t z", "if cond then if not not cond then action else t t t t t t t z else t t z else t z else t t z else t t t t t t t z", "action", "if not not cond and cond and not not cond and cond then if cond and cond then if cond then while cond do if cond then if cond and cond then action else t z else z else t z else t z else t z", "action", "if cond and not cond and not cond then while cond do action else t t t t z else z", "if cond then action else z else t t z else t z", "if not cond then action else z else t t z", "action", "action"], "accuracy": 0.74, "train_overlap": 0.58, "res": [{"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -27.308120646863244}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -12.295733331586234}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.209995070064906}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -10.744107946986333}, {"text": "if cond then action else t z", "log_prob": -5.549927266081795}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not not cond and cond then action else z", "log_prob": -8.634263604646549}, {"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -32.5950241292594}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -9.710393459536135}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -12.963251959299669}, {"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "if cond then action else t t z", "log_prob": -6.059123449260369}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -17.950477740028873}, {"text": "while cond and not cond do action", "log_prob": -7.494237792678177}, {"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "while cond do action", "log_prob": -4.298500656615943}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -9.949658704397734}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then action else t z", "log_prob": -5.549927266081795}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -29.01014359202236}, {"text": "while not cond and not not cond do action", "log_prob": -9.331618782598525}, {"text": "if not cond then action else z", "log_prob": -6.396105881081894}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -29.2342282574391}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.484055716195144}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.37196306977421}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.507119545829482}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while cond do action", "log_prob": -4.298500656615943}, {"text": "if cond then action else z", "log_prob": -5.081904940539971}, {"text": "if cond then action else t z", "log_prob": -5.549927266081795}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -25.556919426831882}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while cond and cond do action", "log_prob": -6.236373053397983}, {"text": "if cond then action else t z", "log_prob": -5.549927266081795}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -10.728450494352728}, {"text": "while cond do action", "log_prob": -4.298500656615943}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not cond then action else z", "log_prob": -6.396105881081894}, {"text": "if cond and not cond then action else z", "log_prob": -8.327202586573549}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while cond and cond do action", "log_prob": -6.236373053397983}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -13.779253520537168}, {"text": "while cond do action", "log_prob": -4.298500656615943}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.23477049334906}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -15.333139688475057}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.46483203722164}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while cond do while cond do action", "log_prob": -6.815602923510596}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -29.41623337380588}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -25.395100547000766}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -14.869540042825975}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -11.970790051505901}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -59.71591950254515}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.210690607549623}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.018288922379725}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.018288922379725}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.629711688146926}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -21.153953596716747}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -39.17658559337724}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "if not cond then action else t t z", "log_prob": -7.316252098185942}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -31.253731417178642}, {"text": "if cond and not cond then action else t z", "log_prob": -8.805105117033236}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.021811029640958}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}, {"text": "action", "log_prob": -1.825663145398721}]}, "epoch_0.pt": {"generated_sequences": ["else while f z z t z t en else z not t ac z t tio w cond f and and and hen f then cond action hen z not cond no en while a z tio io i z do se t en", "not not c and not not cond t cond else t hen cond z if cond s cond t t while else d cond if h if no not w io cond whi", "cond cond t se and else cond nd and tio n i and else not c t not and i do else el action while w a io d d if not cond z if not cond t t", "t while not while t d else el action nd el not action se and actio not not cond actio cond t t cond cond le t else cond not el nd", "el el if cond and cond if io n ac cond while while else not f f cond n tio action o while do while t z else then actio n z if h d", "f cond and then hen cond se o cond e t z cond cond cond action if i cond d f el if o action action co then then do se then not ac cond le", "if no if cond cond else t t not co w action z then l and z actio no actio z not if cond t z action o t whi le z hen z z and", "not cond hen s io hi tio i z and cond whi do a o then cond l then action cond cond en nd action then w", "else c n while else hi cond cond if else z do t cond if s z el cond e hi w cond se i c then while and el", "cond e z e do do o ac le cond and and cond while hi hi while whi cond actio if co f d a action else f not n cond le se z while", "c nd l cond then if while not n cond cond not else cond action no le t action h cond whi d while w actio actio then l whi en while cond d i", "then and not cond and a n cond el a z action cond cond t whi en while while do en a io else not w en else while cond z then n io do if co hen cond", "not then not do action t a hen cond h s do d t cond and not co and cond el not then i o then and nd c do co h cond n then e z", "if then n cond if cond else cond and if not w if else while t s do c do t if not cond and action else hi tio not i el h not cond", "e w n actio i w cond do else cond w not and do t s z w l not cond ac io le cond if le no ac ac and en n cond and cond whi c whi not not le t z hi then cond if", "then i and cond cond hen cond ac ac actio tio cond cond do actio actio f do el en nd cond i cond and and not i and nd cond no action", "tio z d while nd z c do i ac and no else z s no do t do z nd tio c else z action ac cond se z if", "z actio not cond action action cond tio and while h do t t io t t tio z do then while l t if and not if e t z not t and not", "cond then else and f co not cond t t hi el cond s if en not io t cond cond if cond cond if h z el if do and z actio actio whi io", "z and cond z cond el z hi action n i a do if h do cond el t z and not whi cond and else not else do w else not cond and i not not z", "do else cond hi o d t else l el cond ac z else h if actio a cond t t and w then hi f z i cond nd if nd then i t else not cond", "while while do t nd c not do cond e cond action hen do if not se do if co and cond cond actio en cond z cond cond z and do action t le not nd cond do h", "i cond not ac en se a hi z not tio nd if en i hen else cond cond else hi if t if z", "z actio cond action l nd c l ac not o e if not i tio z tio cond t t do i e do d do co o l not el else do h do cond else cond se t l", "cond action n co t hen else d nd t cond then cond and no and not then o cond action no f not t h cond and cond o cond while cond n do else and hen t not do", "ac else cond hen c h z z else t t if t hen t not while and cond cond while else else en hi o nd i not no no and", "and do z and cond do tio cond not i cond f cond se a a cond while action w t t i no no d hi not n do actio cond hi while cond hen a z t", "do actio se else cond not co z t t c t not not z do hen tio not not h not e cond and cond action", "do f while e i t w e d d and tio tio tio h action tio h el and ac action not cond else t z", "i z else if whi cond cond cond and el cond z h le t n and t d no co z hi if do f do hi hi cond no", "not else else f not while while z while cond z ac cond then a t while i action z then l if not cond t cond else and and and d co t hi", "cond le do en if and a ac tio t if cond c not then t cond o t c then w s a hi actio hen i", "co cond tio e else not hen not action hen hi cond nd co s t whi cond and io else o do t le f o nd cond and cond ac tio and while", "z nd cond whi else hen io e while nd ac f z and action hen nd le no actio cond do not a and nd o n a e el h se", "cond cond cond whi actio f hen do e se co i then cond se s cond co z while t cond z cond and t cond h cond not cond h ac not se", "le then not action not d ac se cond z then action z cond d z co io and tio do action whi and hen t then e se el if cond", "if d do action then cond and while t t if and t else else cond cond ac f do z and s i t if and t not hen and cond while do if c", "do and not cond e cond n t o hen h t t se t d do w actio c then f i else else if se not cond t then actio d action z e", "hen w t co ac w c io action o co z z hen hi nd ac t not not tio cond c then cond and not d cond and a h t and and", "cond i z cond if cond t io not cond if d en t c no z cond l l and not f and z cond no ac io c f if t l no cond and", "whi not do do le cond and l z else no not se not do t cond cond z not f and hi co t not no z t t o else hen if while", "while do cond do action cond z t z c do else h e hen nd cond action whi else t not actio do cond do cond cond s not z if cond t not else not no", "and cond le c not not while tio t not not not cond i z cond ac cond cond do then cond if while and not el not l z i while cond", "while then t if n cond t hen z cond io l l else w nd f then cond and then if then", "tio cond not do e no cond s w z else ac action a cond and l t en l tio do hen en cond and hen io o", "cond action if a else tio else then h t cond nd then then if le cond and cond h cond tio do actio no e not t hen else w else z cond cond", "else z co s s f tio then nd not en cond z cond if not le then co z no io if t cond z cond while and a z while", "then nd h t el cond action cond cond not e a then if co if do el and cond ac else cond and io hen then not action ac o e cond h cond tio t while if e not cond l", "d and cond and le tio hi f not else not e c t en h w action z el and l z then cond and en n", "do z h z cond en not no and n z while not not nd l ac while cond z w no w cond not t cond while z while cond c se"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -137.68089270591736}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -63.86008167266846}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -80.05658507347107}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -54.49866795539856}, {"text": "if cond then action else t z", "log_prob": -35.2741003036499}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not not cond and cond then action else z", "log_prob": -45.47409391403198}, {"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -148.2440629005432}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -60.48436403274536}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -78.82313966751099}, {"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "if cond then action else t t z", "log_prob": -38.32573890686035}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -106.25767397880554}, {"text": "while cond and not cond do action", "log_prob": -35.231454849243164}, {"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "while cond do action", "log_prob": -25.354868173599243}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -56.132266998291016}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then action else t z", "log_prob": -35.2741003036499}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -169.016827583313}, {"text": "while not cond and not not cond do action", "log_prob": -42.519474506378174}, {"text": "if not cond then action else z", "log_prob": -35.8765926361084}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -145.65832471847534}, {"text": "if not not not cond then action else t t t z", "log_prob": -52.55266547203064}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -54.56152057647705}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -64.72420620918274}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while cond do action", "log_prob": -25.354868173599243}, {"text": "if cond then action else z", "log_prob": -31.99874782562256}, {"text": "if cond then action else t z", "log_prob": -35.2741003036499}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -155.345561504364}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while cond and cond do action", "log_prob": -31.610814332962036}, {"text": "if cond then action else t z", "log_prob": -35.2741003036499}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -60.06515574455261}, {"text": "while cond do action", "log_prob": -25.354868173599243}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not cond then action else z", "log_prob": -35.8765926361084}, {"text": "if cond and not cond then action else z", "log_prob": -41.51418328285217}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while cond and cond do action", "log_prob": -31.610814332962036}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -77.00006341934204}, {"text": "while cond do action", "log_prob": -25.354868173599243}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -72.2128894329071}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -79.320241689682}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not cond and not cond then action else t z", "log_prob": -48.452141761779785}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while cond do while cond do action", "log_prob": -37.00104784965515}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -144.62972354888916}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -111.50313234329224}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -89.84948778152466}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -63.71389436721802}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -312.6074995994568}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -57.26729083061218}, {"text": "if cond then if cond then action else z else z", "log_prob": -49.99794626235962}, {"text": "if cond then if cond then action else z else z", "log_prob": -49.99794626235962}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -77.3232057094574}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -117.75345659255981}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -213.3449957370758}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "if not cond then action else t t z", "log_prob": -41.88644194602966}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -182.0001413822174}, {"text": "if cond and not cond then action else t z", "log_prob": -44.73733401298523}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "while not cond and not cond and cond do action", "log_prob": -44.98428821563721}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}, {"text": "action", "log_prob": -14.039929151535034}]}, "epoch_10.pt": {"generated_sequences": ["if not not not cond and not cond and cond and cond and not cond and cond and cond do if cond do action else t t z action", "action", "if not cond and cond then action else z else t z", "action", "if not cond do while not cond do while cond if not cond do while cond and cond and cond then action else t t t t t t t z action", "while not not not cond and cond and not not cond and cond and cond do else t t z if cond then action else z", "action", "while cond do if cond e and cond and not cond and cond then action else z while cond do action", "action", "action", "if cond and cond and not not cond then if not cond do if not cond and cond do if cond and not not cond then if not cond then while not cond and cond and cond and not not not cond do action else t z else t t z else t z else t t t t z while cond do action", "action", "action", "action", "action", "while cond then while not cond do if cond and not cond and cond then action else t z t t z while cond and not cond and cond and cond and cond and not cond then while not not cond and cond then if cond and cond then while not not not cond and cond and not not cond and not not not not cond and cond and cond and cond and not cond then if not cond and not cond and cond then while cond and not not cond and not cond then action else t z else t z else t t z else t t t z else t t z", "if cond then action else z", "action", "action", "if not cond and cond and not cond then action else t t t t t z if cond then if not cond then if cond then action else t t t z else t z else t t t z else t t z", "if cond then action else t t t t t t t z", "action", "action", "while cond then action else z", "action", "if cond and not cond then if cond and cond and cond and not not cond then action else z else t z", "action", "action", "action", "action", "action", "if not cond then if cond do action else z", "if not not cond and not not cond and cond and cond then action else t t t t t z else t t t z", "action", "while cond and not not cond and not cond and cond and cond then action else z", "if cond and cond and cond do action else t t t z", "action", "action", "action", "if not cond then action else t t z", "if not cond then if not cond then if cond do and cond do action else z else t t t t t z while cond and cond and cond and cond then if cond and not not cond and not cond and cond and cond then action else t t t z if not cond then while cond and cond do action else z else t t t t z", "action", "action", "action", "while cond and cond and cond and cond then if cond and not cond and not not cond and cond and cond and cond and cond then action else t z else t t z", "while cond then if not cond do action else z if not not not cond and cond then if cond and not cond then if cond then if cond and cond and cond and cond then action else t t t z else z else t z else t z else t z", "if cond then action else t t t t z action", "action", "if not cond and cond then action else z", "while not not cond then if cond and cond and cond and cond do action else t t z action"], "accuracy": 0.64, "train_overlap": 0.6, "res": [{"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -35.309818828478456}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -16.828944934532046}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -17.211797010153532}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -11.533600185066462}, {"text": "if cond then action else t z", "log_prob": -6.7510187439620495}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not not cond and cond then action else z", "log_prob": -10.07398715801537}, {"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -38.48831517063081}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.265955813229084}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -15.427017752081156}, {"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "if cond then action else t t z", "log_prob": -7.168504547327757}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -22.73432981222868}, {"text": "while cond and not cond do action", "log_prob": -9.176518201828003}, {"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "while cond do action", "log_prob": -6.71345192193985}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -11.869972478598356}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then action else t z", "log_prob": -6.7510187439620495}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -33.97281006723642}, {"text": "while not cond and not not cond do action", "log_prob": -10.999800197780132}, {"text": "if not cond then action else z", "log_prob": -7.934040233492851}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -34.65841802582145}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.97191696241498}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -16.162291005253792}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -16.517100738361478}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while cond do action", "log_prob": -6.71345192193985}, {"text": "if cond then action else z", "log_prob": -6.501991104334593}, {"text": "if cond then action else t z", "log_prob": -6.7510187439620495}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -31.56178941950202}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while cond and cond do action", "log_prob": -8.182921975851059}, {"text": "if cond then action else t z", "log_prob": -6.7510187439620495}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.825917383655906}, {"text": "while cond do action", "log_prob": -6.71345192193985}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not cond then action else z", "log_prob": -7.934040233492851}, {"text": "if cond and not cond then action else z", "log_prob": -9.024960473179817}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while cond and cond do action", "log_prob": -8.182921975851059}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -16.24865535646677}, {"text": "while cond do action", "log_prob": -6.71345192193985}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -19.536715535447}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -20.79165202192962}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not cond and not cond then action else t z", "log_prob": -10.227897386997938}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while cond do while cond do action", "log_prob": -10.754223935306072}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -34.02344088628888}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -27.278881404548883}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -18.17365599423647}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.077454533427954}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -65.55930110625923}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.809522215276957}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.399504978209734}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.399504978209734}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -17.82950295507908}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -23.710822500288486}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -47.83119969069958}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "if not cond then action else t t z", "log_prob": -8.43112425506115}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -38.280221885070205}, {"text": "if cond and not cond then action else t z", "log_prob": -9.423651453107595}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "while not cond and not cond and cond do action", "log_prob": -11.10904149711132}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}, {"text": "action", "log_prob": -2.686379760503769}]}, "epoch_15.pt": {"generated_sequences": ["if cond do action action", "if not not cond and cond and not cond and cond then action else z action", "if cond then action else t z else t t t z", "if cond and cond do if cond then action else z else t t t t z", "if cond and cond then action else z", "action action", "action while not cond and cond and cond do action", "if not cond do action", "if cond then if not not not not cond do if not not cond then if not cond then if cond then action else t z else t z else t t z", "action while cond then action else t z", "while cond and not not cond and cond and cond and cond and cond and not cond then action else t t z", "action action", "while cond then if cond then action else z else t t t t t z", "action else t z", "while not cond then action else t t z", "action while not cond and not cond and not cond and cond do if not cond and cond do if not cond and cond then if cond then if cond and not not not cond then action else t t t t z else t t t z else t z", "if not cond and cond and not not cond and not not not not cond and cond and cond and cond and cond and not not cond and not not not cond and not cond and not cond and not cond then while then if cond do if cond then if not cond then action else t t z else z else t t t t t t z else t t t t t t z if cond and not cond then while cond then if not cond and not not cond then if cond and cond and not not cond do action else t t t t t z else t t z", "action action", "while cond do if cond then while cond and cond and not not cond then action else z else z", "while not cond and cond do action action", "while while cond then action else t z", "action action", "if cond then if not cond and cond and not not cond and not cond and cond and cond then while cond and not cond and not cond do while not not cond then action else z else t t t z if not not not not not not not cond then while cond then if cond and cond and cond then if cond then if cond and cond do while not cond then if cond then if not cond do action else z else t t z else t z else t t t t z else t z", "if cond and not cond do if not cond do if cond then while cond do action else t t t z else t z", "if cond then action else t t t z", "action action", "if cond do if cond then if cond then while not cond and not cond do if cond then if not cond and cond and not cond and cond and not cond and not not not cond and not cond and cond and not cond then action else t z else t t z else z action", "if cond and cond then action else t z while cond do if not not cond and cond and not cond and cond do if cond and not not cond do action else t t z", "while cond then while not cond and cond then if cond and not cond and not not cond then if cond then if cond and cond and not not cond and cond and not cond and not cond then if cond and cond and not cond then if cond and cond and cond then while cond then action else z else t t t t t t t z else z else z else t t t t t z else t t t t z", "if cond and not cond and not z cond and not not cond and cond and cond and cond do if not not cond and cond and not not cond and cond and cond and not cond then while not cond do not cond and not cond and not cond do action else t t t z", "if not cond and cond then if cond then if not cond and cond then action else z else t z else t t t t t z else t z", "action while not cond and not not not not not cond and cond and cond and not cond and not not not cond and cond and cond and not not cond then while cond and not cond and cond and not cond and not not not cond and cond and not cond and not not cond then action else t z", "while cond do action", "action while", "if not cond and cond then action else t z else z", "action if not cond then while cond then if not cond do action else t t z", "action", "if cond then action else t z", "while else z", "action if cond then if cond then while not cond then while not not cond then if cond do if cond then action else t z else z else z else z", "if not cond and cond do while not cond and cond and cond and not cond and cond and not cond then action else z", "action if if cond and not not not cond then if not cond then if cond do action else t z else t t z", "cond then if not cond and cond and not cond do if not cond and cond and not cond and not cond and cond and not not cond then while cond and cond then if not not not cond then action else t z else t t t z else t z action", "action if cond then action else t t z", "if cond then if not not cond then if not cond and cond and cond and not cond and cond and cond and cond then if cond do action else t t t t z else t t t t z action", "action action", "if cond and not cond and cond do action else t z", "while cond do if not not cond then action else z else t t z", "action", "action"], "accuracy": 0.14, "train_overlap": 0.14, "res": [{"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -32.68237100215629}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -15.610937863122672}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -15.582327214069664}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -11.771785124205053}, {"text": "if cond then action else t z", "log_prob": -5.977908078581095}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not not cond and cond then action else z", "log_prob": -9.3348050378263}, {"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -38.02697608107701}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.211855133995414}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.863955242559314}, {"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "if cond then action else t t z", "log_prob": -6.437064681202173}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.91684117447585}, {"text": "while cond and not cond do action", "log_prob": -10.033293709158897}, {"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "while cond do action", "log_prob": -6.270713537931442}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -11.101336446590722}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then action else t z", "log_prob": -5.977908078581095}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -33.4534067036584}, {"text": "while not cond and not not cond do action", "log_prob": -11.55525317788124}, {"text": "if not cond then action else z", "log_prob": -6.957108047790825}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -33.65314163733274}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.820950476452708}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -15.656869739294052}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -14.977566286921501}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while cond do action", "log_prob": -6.270713537931442}, {"text": "if cond then action else z", "log_prob": -5.490095555782318}, {"text": "if cond then action else t z", "log_prob": -5.977908078581095}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.94498250540346}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while cond and cond do action", "log_prob": -8.803400076925755}, {"text": "if cond then action else t z", "log_prob": -5.977908078581095}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.88944052066654}, {"text": "while cond do action", "log_prob": -6.270713537931442}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not cond then action else z", "log_prob": -6.957108047790825}, {"text": "if cond and not cond then action else z", "log_prob": -8.9412478543818}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while cond and cond do action", "log_prob": -8.803400076925755}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -15.361992695834488}, {"text": "while cond do action", "log_prob": -6.270713537931442}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -18.05516416300088}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -19.292135456576943}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.88424960616976}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while cond do while cond do action", "log_prob": -9.882673263549805}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -32.62229526368901}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -28.101467221975327}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -17.05935584101826}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.980551559478045}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -69.27613812312484}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.696613650768995}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.990415813401341}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.990415813401341}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -17.29167792480439}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -23.21240250673145}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -45.79966588970274}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "if not cond then action else t t z", "log_prob": -7.715618257410824}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -35.95580094307661}, {"text": "if cond and not cond then action else t z", "log_prob": -9.404136043041945}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "while not cond and not cond and cond do action", "log_prob": -11.543556958436966}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}, {"text": "action", "log_prob": -2.6733373925089836}]}, "epoch_20.pt": {"generated_sequences": ["if not cond and cond and cond and cond do if cond then action else t z else z", "if cond and cond then if cond then action else z else z else t z", "if cond then while cond do if not cond do while cond then if not not not cond and cond do action else t t t z else t z else t t t z", "action", "if cond and cond and not cond and cond then if cond and cond and cond do action else t t z", "action", "action", "action", "action", "while cond then if cond and not cond do if cond and cond and not not cond and cond then if cond and not cond and cond and not cond and cond and not cond then while not cond and cond do while cond and cond then if cond then if not not cond and not cond and cond then while cond and not not cond and cond do action else t t t z else t z else z else t t t t z else t t z else t if cond then action else z", "if cond do while not cond and not cond and cond do action else z else z", "if cond and cond and cond and cond and cond then while cond then while cond do if not not cond and cond and cond and not not cond and cond and not cond then if cond and cond and not cond and cond and not cond do while cond and not cond then while cond and cond and not cond then action else z else z else t t t action", "while cond do action else z", "while not not not not not cond and not cond then while cond and cond and not cond and not not not cond then if cond and cond then action else t t t z else z else t z", "if not cond and not not cond then if not cond do if cond then while not cond and cond then if cond then while cond then if not not cond then if not cond and cond do action else t z else z else t t z else t t z", "if cond do action else z", "if cond then if cond do action else t t t t t z else z", "if not cond and cond and cond do action else z else z", "if not cond and cond and cond and not not not cond and cond and cond then action else t t z", "if cond and cond and not not cond and cond then if cond and cond then action else t t z else z", "if not not cond and cond and not not cond and cond then action else z else t z else t z", "if not cond and not cond and not cond and not cond and cond and cond and not not cond and cond and not cond and cond then if cond and not cond then action else z else z", "while cond do action else t z", "action", "action", "action", "action", "if not cond and not cond and not cond then if cond and cond do action else t z else t z else z else z", "action else z", "if cond then if cond and cond and cond then action else t t t z else z else t t z else t t t z else z", "action", "if not cond do action else t z", "action", "if cond then while cond do while not cond then if cond and not not not not cond and not cond and not not cond then action else t t t t t t t t z else t z else t t z", "action else t t t t t t t t z else z", "action", "if not not cond and not cond and not not not not cond and not cond then action else z else z else z else t t t z", "while cond and cond and cond and cond and cond then action else z", "action else z", "action", "action", "action", "if cond and cond and cond and cond then if cond and cond and not cond and cond and cond then while not cond and not not cond and cond and cond and not cond then if cond then action else z else t t t z else z", "action", "action", "while not cond then action else t t z", "action", "while not cond do while not cond and cond and not cond and cond do if not cond and not cond and cond and not cond do if cond and not not not not cond and not not not not cond and cond then action else t t t t t t t z else t t z else t z else z", "while cond and cond and not cond and cond do if cond and cond then if cond do action else z", "action"], "accuracy": 0.44, "train_overlap": 0.38, "res": [{"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -35.67866237857379}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -17.79593462101184}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -17.50197060732171}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -14.224598155124113}, {"text": "if cond then action else t z", "log_prob": -8.533927460201085}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not not cond and cond then action else z", "log_prob": -12.27961831423454}, {"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -39.590693562757224}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -12.728555684909225}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -16.39128582039848}, {"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "if cond then action else t t z", "log_prob": -9.025789997540414}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -22.775947235524654}, {"text": "while cond and not cond do action", "log_prob": -12.027078920975327}, {"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "while cond do action", "log_prob": -7.978068824857473}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -13.400079463608563}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then action else t z", "log_prob": -8.533927460201085}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -34.241952820448205}, {"text": "while not cond and not not cond do action", "log_prob": -14.04519758746028}, {"text": "if not cond then action else z", "log_prob": -9.704549569869414}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -36.146409921813756}, {"text": "if not not not cond then action else t t t z", "log_prob": -13.849866854492575}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -17.185799170285463}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -17.664513453142717}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while cond do action", "log_prob": -7.978068824857473}, {"text": "if cond then action else z", "log_prob": -8.000258982181549}, {"text": "if cond then action else t z", "log_prob": -8.533927460201085}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -30.38312887493521}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while cond and cond do action", "log_prob": -10.363345883786678}, {"text": "if cond then action else t z", "log_prob": -8.533927460201085}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -14.266069828066975}, {"text": "while cond do action", "log_prob": -7.978068824857473}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not cond then action else z", "log_prob": -9.704549569869414}, {"text": "if cond and not cond then action else z", "log_prob": -11.404999479651451}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while cond and cond do action", "log_prob": -10.363345883786678}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -17.88459384115413}, {"text": "while cond do action", "log_prob": -7.978068824857473}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -20.203057279344648}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -22.01172322500497}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not cond and not cond then action else t z", "log_prob": -12.823130202945322}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while cond do while cond do action", "log_prob": -11.583830010145903}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -34.25808200193569}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -28.74547502398491}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -19.30164646776393}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -14.984780347906053}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -65.99910133518279}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -12.26500535570085}, {"text": "if cond then if cond then action else z else z", "log_prob": -11.272176073864102}, {"text": "if cond then if cond then action else z else z", "log_prob": -11.272176073864102}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -19.42143866745755}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -24.533134595956653}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -48.791126964846626}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "if not cond then action else t t z", "log_prob": -10.53558077965863}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -37.99651622097008}, {"text": "if cond and not cond then action else t z", "log_prob": -11.883322020061314}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "while not cond and not cond and cond do action", "log_prob": -13.86644527129829}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}, {"text": "action", "log_prob": -4.618156015872955}]}, "epoch_25.pt": {"generated_sequences": ["if not cond and cond and cond and not not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and not cond then while cond do action else z", "action if cond then action else t t t t t z", "if cond do while cond do action else z else t z", "if cond then action else z", "action action", "while not not not cond and cond and not cond and cond and cond and cond and cond then action else t z", "while not cond and not cond and not cond then action else t t t t t z", "action if cond then while cond do if not cond do while cond do if not cond and not cond and cond and cond and cond and cond and not cond and not cond and cond and cond and not not cond and cond and not cond and cond and cond and not cond and not cond then if not not cond do action else t t t z else t t z else z", "if cond and cond then if cond and cond then action else t t t z else z", "action action", "if cond do if cond then action else z else z", "action else t z", "if not cond and not not cond and cond then while cond and cond do while cond and cond then if not cond then if cond do while cond and cond and cond then if cond and cond then if cond then if not cond and cond do if cond and not cond then if cond and cond and not cond and not cond then action else t t z else t t t z else else t t t t t t z else z else t z else t t t z else t t t t t z else z", "action action", "if cond then action else t t t z", "if cond and cond and not not cond and not cond and not cond and cond and cond and cond and cond and cond and not cond and cond and cond and cond and not cond and cond and not not cond and not cond and cond and not cond and not cond then action else t t t t t z", "if cond and cond then while cond and cond then action else z else t z", "if cond and cond and cond do action else z", "while not cond and cond and cond and cond and cond and not not cond then if cond do while cond and cond and cond and not cond and not cond and not cond and cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond and cond and not cond and not not not cond and not not not cond and cond and cond and not cond and not cond and cond then if cond do action else z else t t t t z", "action action", "if cond and cond and cond and cond and cond then action else z", "if cond and cond then if cond and cond and cond then action else z else t z", "if cond and cond then action else t t t t t t t t z else t t z", "action if not cond and cond and cond then action else t z", "action action", "if not cond and not cond then while not cond then if cond then while cond then if not cond and not not cond and cond and not not not cond and cond and cond then if cond and not not cond and not cond then if not cond then if cond do if cond do action else t z else z else t z else z else z else t z", "action while cond do if cond and cond and cond and cond and cond and cond do if not cond and not cond and cond do if cond and cond then action else t t t t t t z else t z", "if not cond and not cond and cond and not cond and cond and cond and cond and cond do while cond and not not not not not cond and cond and not cond and cond then while cond and cond do action else t z", "if not cond and cond and not cond then while not not cond and cond and not cond and cond and cond and cond and not not not cond and cond and not cond and not not not cond do while not not cond and cond do while cond and cond and cond and not cond and not not cond and cond then action else t t t t z else z", "action action", "if cond do action cond do if cond then while cond and not not cond do while cond and cond then while cond then if cond then action else t z else t z else z", "if cond and cond and cond and not cond and cond and cond and cond and not not not cond and cond and cond and cond and cond and cond and cond do action else z", "action action", "action action", "if cond then if cond then action else t z else t t t t t t z else t t t z", "if not not cond and not not cond and not cond and cond then action else z", "if not cond and not cond do action else t t t t t z", "if not cond and not not not not cond then action else z", "if cond do while not cond then while cond and cond and cond then if cond do while cond and cond and cond then action else t t z else z else t t z", "while cond and cond and not not not cond and cond do action", "action action", "if cond then action else t t z", "while cond then action else z", "if cond then action else z else t z else t t t t z else t t t t t t t z", "if cond then if cond do action else t t z", "while not cond do action", "action else t t z", "if cond then if cond then action else t t t z else z", "if not cond do if not cond do while cond and cond and cond and not cond and not cond and not not not cond and cond and cond then action else t t t z else t z", "if cond and not not cond do action else z"], "accuracy": 0.26, "train_overlap": 0.08, "res": [{"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -35.022086339304224}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -17.505829348927364}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -16.99228402157314}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -13.807847319170833}, {"text": "if cond then action else t z", "log_prob": -8.099692303221673}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not not cond and cond then action else z", "log_prob": -11.665076044853777}, {"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -39.050185781670734}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -12.649469032883644}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -15.638700603041798}, {"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "if cond then action else t t z", "log_prob": -8.608869006391615}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -21.403144048992544}, {"text": "while cond and not cond do action", "log_prob": -11.582197807729244}, {"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "while cond do action", "log_prob": -8.044475892558694}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -12.767146586440504}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then action else t z", "log_prob": -8.099692303221673}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -33.15541168861091}, {"text": "while not cond and not not cond do action", "log_prob": -13.688272196799517}, {"text": "if not cond then action else z", "log_prob": -9.193042181897908}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -35.70644776127301}, {"text": "if not not not cond then action else t t t z", "log_prob": -13.560441995970905}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -16.854255713522434}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -17.73412331752479}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while cond do action", "log_prob": -8.044475892558694}, {"text": "if cond then action else z", "log_prob": -7.621613523922861}, {"text": "if cond then action else t z", "log_prob": -8.099692303221673}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -28.615129958605394}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while cond and cond do action", "log_prob": -10.05119338259101}, {"text": "if cond then action else t z", "log_prob": -8.099692303221673}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -13.862945258617401}, {"text": "while cond do action", "log_prob": -8.044475892558694}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not cond then action else z", "log_prob": -9.193042181897908}, {"text": "if cond and not cond then action else z", "log_prob": -11.03028505248949}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while cond and cond do action", "log_prob": -10.05119338259101}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -17.10624434845522}, {"text": "while cond do action", "log_prob": -8.044475892558694}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -19.674098562449217}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -21.522979410365224}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not cond and not cond then action else t z", "log_prob": -12.319738968275487}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while cond do while cond do action", "log_prob": -11.4230438452214}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -32.53633154486306}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -27.17942039296031}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -18.541050594765693}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -14.796308116521686}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -66.38117030565627}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -12.030696601141244}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.579888510517776}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.579888510517776}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -18.63335677422583}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -23.62004296691157}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -47.67589931492694}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "if not cond then action else t t z", "log_prob": -10.196404061745852}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -36.68803173978813}, {"text": "if cond and not cond then action else t z", "log_prob": -11.483663156162947}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "while not cond and not cond and cond do action", "log_prob": -13.143535818904638}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}, {"text": "action", "log_prob": -4.716642007231712}]}, "epoch_30.pt": {"generated_sequences": ["action", "action", "action", "while not not cond and cond and cond and cond then action else t z else z", "if cond then if not cond and cond then action else z else z", "if cond then if cond then action else z else t z", "action", "while not cond and not not cond do if not not cond and cond then if not cond and cond then while cond and cond and not cond and cond then if not not cond and not cond and not not cond then if not cond and cond and cond and cond and cond then action else t t z else t z else z else z else t z else z", "if cond then if not cond do action else z else t t t t t z", "and cond then while cond do while cond and cond and cond and cond and cond do if cond do if cond then action else z else t z", "if cond then if not not cond then action else t z", "while cond do while not cond do if cond then action else t t z else z", "action", "if not not cond and not cond and cond and cond and cond then while cond do if not cond and cond and cond and not cond and not not not cond and cond and not not not cond and cond and not cond and not not cond and not cond and cond and cond and cond and not not cond and not cond and cond and not cond do if cond then if not not not cond and cond then action else t z else z else action else t t t z", "if cond then action else t z", "while not cond and cond and cond then if cond and not not not cond then while not cond then if not cond and cond and not cond and cond and cond then if cond and cond and not not cond and cond then if cond then if cond then action else z else z else z else t t t t t t t t z else z else t z", "action", "action", "if cond then action else t z", "if cond and not cond then if cond then action else t t t t z else t z", "while cond and not cond and cond then if cond then action else t t t z else t z else t z", "do if cond then if not cond then while cond and not not cond do action else t z", "while not cond and not not cond and cond and not cond do while cond and cond and cond and not not cond and cond and cond and not not not cond and not cond do if cond and not cond and cond and cond and cond and cond and cond then action else z else z", "while cond then action else t t t t t t z", "while cond and not cond and not cond and not cond do action", "if cond do action else t z", "action", "while cond then if cond do action else t t z", "while cond and cond and cond do action", "if cond then if cond then action else z else t t t t t t t t t t z", "while not cond do if cond and cond and not cond then while cond do if cond do action else t t z else t t t t t t t t t t z", "if cond then action else z", "if cond then action else t z else t t t t t t t t t z", "if cond then action else t z", "and not cond and cond and cond then action else t z", "action", "while not cond and cond then if cond do action else t t t t t z else z", "action", "while cond and cond and not not not cond and cond and cond and cond do if cond then action else t t t t t t z else t z", "while not cond do action", "if not cond then action else t z", "action", "action", "action", "action", "action", "if cond and not not not not cond and cond and cond and cond then action else t t t z", "while not cond and cond and not not cond and not not cond and cond then if not cond then action else t t t t t t t t t t t t z else t z else z", "if cond then if cond then action else t z else t t t t t z", "while cond do if not cond and not not cond then if cond then action else t t t t t t z else t t z else t z"], "accuracy": 0.58, "train_overlap": 0.44, "res": [{"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -32.0920969392173}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -14.800642317160964}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -15.036072157789022}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -12.076911069452763}, {"text": "if cond then action else t z", "log_prob": -6.153151230420917}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not not cond and cond then action else z", "log_prob": -9.97786039346829}, {"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -34.316779064014554}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -9.801317751407623}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.705088735092431}, {"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "if cond then action else t t z", "log_prob": -6.614732122048736}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.581866526510566}, {"text": "while cond and not cond do action", "log_prob": -9.34760628733784}, {"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "while cond do action", "log_prob": -5.680310961790383}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -10.96848474489525}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then action else t z", "log_prob": -6.153151230420917}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -31.933817540761083}, {"text": "while not cond and not not cond do action", "log_prob": -11.085186602547765}, {"text": "if not cond then action else z", "log_prob": -7.258425109554082}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -32.95130151230842}, {"text": "if not not not cond then action else t t t z", "log_prob": -11.324258738663048}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -12.737474052235484}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -14.871595977805555}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while cond do action", "log_prob": -5.680310961790383}, {"text": "if cond then action else z", "log_prob": -5.692347849719226}, {"text": "if cond then action else t z", "log_prob": -6.153151230420917}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -26.777805200312287}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while cond and cond do action", "log_prob": -7.700621360912919}, {"text": "if cond then action else t z", "log_prob": -6.153151230420917}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.983549852389842}, {"text": "while cond do action", "log_prob": -5.680310961790383}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not cond then action else z", "log_prob": -7.258425109554082}, {"text": "if cond and not cond then action else z", "log_prob": -9.161078255157918}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while cond and cond do action", "log_prob": -7.700621360912919}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -15.587038222234696}, {"text": "while cond do action", "log_prob": -5.680310961790383}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -16.319563596509397}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -16.71131179574877}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not cond and not cond then action else t z", "log_prob": -10.43146541249007}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while cond do while cond do action", "log_prob": -8.231583384796977}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -32.52536969445646}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -24.578608289361}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -16.216310712043196}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.308251538313925}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -61.40364231122658}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.286973710171878}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.888932404108346}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.888932404108346}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -17.054380387533456}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -22.13644787017256}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -46.38874541176483}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "if not cond then action else t t z", "log_prob": -8.077435284852982}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -35.02564825396985}, {"text": "if cond and not cond then action else t z", "log_prob": -9.59947387361899}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "while not cond and not cond and cond do action", "log_prob": -10.48482308909297}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}, {"text": "action", "log_prob": -2.661163818091154}]}, "epoch_35.pt": {"generated_sequences": ["if not not cond and not cond and not cond then action else t t z", "action", "while cond and not cond do if cond then if cond then if cond then while cond then while cond then action else t t t z else t t z else t z", "if cond then while not cond and cond and not cond and cond and cond and not cond and cond and cond and cond and cond do if cond then action else z else t t t t z", "if cond and cond and not cond and cond do action else z", "action", "if cond then action else t t t t t z", "action", "action", "if not cond then action else t z", "if not not cond and cond do action else t z", "if cond then while cond do if not cond and not cond do if cond and cond then while cond then action else t z else t z else t t t z", "if cond then if not cond and cond then action else t z else t z else t t t z", "while not not not cond and not not not not not cond and cond and cond and not not not cond and not not cond then action else z", "if cond then action else t z", "if cond then action else t t t t t z else z", "if cond then if not cond then if cond and cond then action else z else t t t z else z", "if not not cond then if not not not cond and cond and cond and cond and cond then while cond and cond then if not cond and cond and not not cond then action else t t z else t z else t z else t t t t t t z else t t t z", "if cond then if not not cond then if cond then if not not not cond then if cond and not not not not cond and cond and not cond and cond then action else t z else z else z", "if cond then action else t t t t z", "if not not cond and not cond and cond then action else z", "action", "while not cond do while not not cond do action", "while not cond and cond and not cond and cond do while cond do action", "if cond then if cond then action else t t t t z else t t t t t z else t t t t t t z", "cond then while cond do action else t z", "if cond then if not cond then action else t z", "if cond then if cond then action else t t t t z else t t t z", "if not cond then if cond then while cond then action else t z else t t t z else z", "action", "action else z", "if cond then action else t t t t t z", "if cond and not cond and cond then if cond and cond and not cond and not not cond and cond and cond then if cond then if cond then if cond and not cond and cond then while cond then action else t t z else z else z else z", "if not not cond and cond then if not cond then if cond then if not not cond and cond do action else t z else t z else z else t t z", "action", "if cond and not not cond then while cond do action else t t t z", "if cond then action else t z", "action else t z", "action", "while not not cond do action", "while cond then if cond then if cond then action else t z else t z else t t t z", "if cond then if cond and cond then if cond then action else t t do while not cond do action else z else t t z else z", "while cond do while cond do while cond do action", "action", "action", "if not cond and not not cond and not not cond then action else t t t t t z else t t z", "action", "while not not cond and not not not cond and cond and cond do action", "while cond and cond do action", "action"], "accuracy": 0.6, "train_overlap": 0.4, "res": [{"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -28.88901731837541}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -13.154047223739326}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.198860061587766}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -11.176447552163154}, {"text": "if cond then action else t z", "log_prob": -5.303217934444547}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not not cond and cond then action else z", "log_prob": -8.737036580219865}, {"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -32.07501215720549}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -9.381285095121711}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -12.573884876444936}, {"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "if cond then action else t t z", "log_prob": -5.772712303325534}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -17.219746147748083}, {"text": "while cond and not cond do action", "log_prob": -8.31687493622303}, {"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "while cond do action", "log_prob": -4.756074648350477}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -9.567796926014125}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then action else t z", "log_prob": -5.303217934444547}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -29.65502936928533}, {"text": "while not cond and not not cond do action", "log_prob": -10.249047176912427}, {"text": "if not cond then action else z", "log_prob": -6.212934045121074}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -33.531973781762645}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.27753059566021}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.90232721157372}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.901366483187303}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while cond do action", "log_prob": -4.756074648350477}, {"text": "if cond then action else z", "log_prob": -4.805084795691073}, {"text": "if cond then action else t z", "log_prob": -5.303217934444547}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -24.733371789334342}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while cond and cond do action", "log_prob": -6.911967005580664}, {"text": "if cond then action else t z", "log_prob": -5.303217934444547}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.333750730380416}, {"text": "while cond do action", "log_prob": -4.756074648350477}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not cond then action else z", "log_prob": -6.212934045121074}, {"text": "if cond and not cond then action else z", "log_prob": -8.285908901598305}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while cond and cond do action", "log_prob": -6.911967005580664}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -14.943307728506625}, {"text": "while cond do action", "log_prob": -4.756074648350477}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.939651317894459}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -15.87774050142616}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.365578981116414}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while cond do while cond do action", "log_prob": -7.191315896809101}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -30.05921703367494}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -26.220185158774257}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -15.627253496088088}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -11.88559736078605}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -60.65096712997183}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -8.860134255606681}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.3466372904367745}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.3466372904367745}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.468649489805102}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -21.283793250797316}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -42.9161383791361}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "if not cond then action else t t z", "log_prob": -7.063219949603081}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -31.958441436756402}, {"text": "if cond and not cond then action else t z", "log_prob": -8.69524713465944}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.765723574906588}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}, {"text": "action", "log_prob": -2.256015073508024}]}, "epoch_40.pt": {"generated_sequences": ["while not cond and not cond and cond and not not cond and cond and cond and cond do action", "action", "if not not cond and cond then action else z", "while cond and cond and not not not cond do action else z", "while cond do while not cond and not not not not cond and cond and cond and cond do action else t z", "while not cond and not cond and not cond and not cond and not cond and cond and not not cond and cond and not cond and cond and cond do if cond and cond then action else t t z else t z", "if cond and not cond and cond and cond and not not not cond then if not not cond and cond and not not cond and cond then action else t z else t z else z", "if not cond and cond and cond and cond and cond and cond then while cond and cond do while cond do while not not not cond and cond do while cond do if cond and cond do if cond then while cond do if cond do action else t t z else z else t t z else z", "if not not cond then action else z else z", "if cond and cond and cond and cond and not cond then action else t z", "while cond and not cond and cond do action else z", "while not cond and cond and not cond and not cond and not cond and cond and not cond and not cond then action else z", "if not cond and cond and cond then while not not not cond do while cond and cond do if cond then if not cond and not not not cond and not cond and cond then if cond do if cond and cond then if cond then action else t t t z else z else z else t t z else z else t z else z else z else z else t z else z", "action else t t z", "action", "while not not cond and cond do if cond then while cond do action else z", "action", "if not cond and not not cond and cond and cond and cond and cond and not cond and not cond and cond and cond and not cond and not cond and cond and cond do if cond then while not not not cond and cond do action else t t t t t z else z", "while not not cond do if cond then if cond then while cond do while cond and cond do if cond do action else z else t t t z else t z else z", "while cond do while cond and cond and cond then action else z", "if cond then if cond then action else z else t z", "if cond and cond then action else z else z else t t t t t t t z", "action", "action", "while cond and cond do action", "while cond do while cond do action else t t t t t t t t t z", "while cond do if not not cond then if cond then if not cond and cond and cond then action else t t t z else t t z else z", "if not not not cond then action else z", "while not cond and not not not cond and cond and cond and cond and cond and cond do if cond then action else z else t t t t z", "while cond do if cond then while cond do action else z else z", "if cond then action else z", "if cond and not not not cond and not cond and cond and not not cond and not not cond and cond and not cond and cond and cond and cond and not not cond and cond and cond and cond and cond and not cond and cond then action else z", "if not not cond and cond then action else t z else t z", "action", "while cond and cond do while cond do if not not cond then if cond and not not cond and cond and not cond and cond then if cond then action else z else z else z else z", "action", "if cond then if cond then while cond and cond and cond and not cond and not not not not not cond and not not cond and cond and cond and not not cond and cond and not not not cond and cond do action else z else z", "if not not cond and cond then action else t t t z else z", "while cond and cond do if not not cond and cond and not not cond and cond and cond do if cond then while not cond and not cond and cond and not not not cond and not not cond and cond and not cond and not cond and cond and not cond do if cond and cond and cond and not cond then while cond and not cond do if cond and cond do if cond then while cond then action else t z else z else t z else z else t t z", "action", "action else z else t t z", "while cond do if cond then while cond do action else t t z else t z", "action", "if not cond and not not not cond and cond then if cond then action else z else z else t t t z else t t z", "if not cond and not cond then action else z", "action", "while not cond do action", "while not cond do while cond do if not cond and cond and not cond and cond then while cond do if not cond then action else t z else t t t z else t t t z", "action", "if not not cond and cond and cond and not not cond and cond and cond and cond and cond and not cond and cond and cond and cond and cond and not cond and cond and not cond and not not not cond and cond and cond and not not cond and not not cond and not cond and not not cond and cond and cond and cond and not cond and cond and cond and not cond then action else z"], "accuracy": 0.5, "train_overlap": 0.34, "res": [{"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -29.105846026330255}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -14.664548411616124}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -15.248907461762428}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -12.676553377881646}, {"text": "if cond then action else t z", "log_prob": -7.055836343439296}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not not cond and cond then action else z", "log_prob": -10.098563676467165}, {"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -32.785184571985155}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -12.502621099120006}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -15.198706014780328}, {"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "if cond then action else t t z", "log_prob": -7.708302807994187}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.090027981204912}, {"text": "while cond and not cond do action", "log_prob": -9.376010711770505}, {"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "while cond do action", "log_prob": -5.7290846379473805}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -11.164701447589323}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then action else t z", "log_prob": -7.055836343439296}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -31.05116531997919}, {"text": "while not cond and not not cond do action", "log_prob": -11.485382539220154}, {"text": "if not cond then action else z", "log_prob": -7.462445084936917}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -30.92619148013182}, {"text": "if not not not cond then action else t t t z", "log_prob": -11.816797254839912}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -12.829712711973116}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -14.317820459604263}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while cond do action", "log_prob": -5.7290846379473805}, {"text": "if cond then action else z", "log_prob": -6.3494715362321585}, {"text": "if cond then action else t z", "log_prob": -7.055836343439296}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.815510249696672}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while cond and cond do action", "log_prob": -7.90281797060743}, {"text": "if cond then action else t z", "log_prob": -7.055836343439296}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -13.008538688533008}, {"text": "while cond do action", "log_prob": -5.7290846379473805}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not cond then action else z", "log_prob": -7.462445084936917}, {"text": "if cond and not cond then action else z", "log_prob": -9.666778912069276}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while cond and cond do action", "log_prob": -7.90281797060743}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -15.592052880907431}, {"text": "while cond do action", "log_prob": -5.7290846379473805}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -15.249768047360703}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -16.62535589467734}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not cond and not cond then action else t z", "log_prob": -11.013963209465146}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while cond do while cond do action", "log_prob": -8.072162199532613}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -32.207868623081595}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -26.071968843694776}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -17.23557518259622}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -14.327716555213556}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -61.64821986039169}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -11.71877215965651}, {"text": "if cond then if cond then action else z else z", "log_prob": -9.11601264635101}, {"text": "if cond then if cond then action else z else z", "log_prob": -9.11601264635101}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -16.630287152482197}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -23.430886185728014}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -41.041459642816335}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "if not cond then action else t t z", "log_prob": -8.813916604267433}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -33.613538356963545}, {"text": "if cond and not cond then action else t z", "log_prob": -10.242207974661142}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "while not cond and not cond and cond do action", "log_prob": -10.862397314747795}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}, {"text": "action", "log_prob": -3.637314073741436}]}, "epoch_45.pt": {"generated_sequences": ["while not cond do while cond do action", "if not cond and cond and not cond and cond and not cond and cond and cond and cond and cond then if cond then if not cond then while cond do if cond and cond and cond and cond and cond do action else z else t z else t t z else t t t t z", "if cond then if not not not cond then if cond then if cond then action else z else z else t z else t t t z else t t z", "action", "action", "action", "z", "if cond then while cond do if not cond and cond and not not cond and cond and not not cond and cond and not cond then action else z else t t z", "while cond do if cond and cond and not cond then action else t t t t t z else z", "action", "action", "action", "action", "action", "if not not not not cond and not not cond and cond then while cond and cond and cond do if cond then action else t t t t t t z else z", "action", "action", "not cond then action", "while cond then while not not cond do action", "while cond do if cond then while not cond do if cond then if cond and not not cond and cond and cond then if not not cond and cond then action else t t z else z else t t z else t t z else t z", "action", "while if cond then action else t t t t t t z", "if cond then action else z", "while not cond and cond and not not not cond", "action", "action", "if not cond then if cond then action else z else z", "action", "action", "while not cond and not cond do if not cond then if cond and cond then action else t t action else z else z", "action", "if not cond and cond then if not cond and cond and not cond and not cond then action else z else z", "if cond if cond then action action", "action", "action", "action", "action", "cond then if not cond then if not not cond then action else z else t z", "action", "action", "if not not cond and cond and cond and cond and cond and cond then if cond then while not not cond do if not cond then if cond then while not not cond and not cond and not not cond and not cond do action else z else z else t t t z", "action", "action", "action", "action", "if cond and cond and cond then action else z", "if cond and cond then if cond then while cond do action else t z else t t t z", "while cond do action", "action", "action"], "accuracy": 0.74, "train_overlap": 0.66, "res": [{"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -28.46235674782656}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -13.018366885837168}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.452139435103163}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -10.992714669089764}, {"text": "if cond then action else t z", "log_prob": -5.829969649668783}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not not cond and cond then action else z", "log_prob": -8.914208430796862}, {"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -32.00098596373573}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.44658703962341}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -14.16068173525855}, {"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "if cond then action else t t z", "log_prob": -6.4008258525282145}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.183121867710724}, {"text": "while cond and not cond do action", "log_prob": -8.032474928535521}, {"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "while cond do action", "log_prob": -4.593759145587683}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -10.072221711510792}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then action else t z", "log_prob": -5.829969649668783}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -29.48729890375398}, {"text": "while not cond and not not cond do action", "log_prob": -9.937210680916905}, {"text": "if not cond then action else z", "log_prob": -6.659904686268419}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -29.937411629594862}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.968619547318667}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.407033990137279}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.588832169771194}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while cond do action", "log_prob": -4.593759145587683}, {"text": "if cond then action else z", "log_prob": -5.3411581218242645}, {"text": "if cond then action else t z", "log_prob": -5.829969649668783}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.74053878732957}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while cond and cond do action", "log_prob": -6.721625494770706}, {"text": "if cond then action else t z", "log_prob": -5.829969649668783}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.144178641494364}, {"text": "while cond do action", "log_prob": -4.593759145587683}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not cond then action else z", "log_prob": -6.659904686268419}, {"text": "if cond and not cond then action else z", "log_prob": -8.378387204837054}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while cond and cond do action", "log_prob": -6.721625494770706}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -14.23612583661452}, {"text": "while cond do action", "log_prob": -4.593759145587683}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.233318236656487}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -15.641757864505053}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.673482347279787}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while cond do while cond do action", "log_prob": -6.9051066637039185}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -31.063978967256844}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -25.219211908057332}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -16.004898527637124}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.407427222002298}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -60.49087398033589}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.880662666168064}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.445173158077523}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.445173158077523}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.485201433300972}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -21.734385057818145}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -40.07710948307067}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "if not cond then action else t t z", "log_prob": -7.720537257380784}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -33.33306093025021}, {"text": "if cond and not cond then action else t z", "log_prob": -8.887814835645258}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.686504397541285}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}, {"text": "action", "log_prob": -2.011029925197363}]}, "epoch_5.pt": {"generated_sequences": ["action action action while not cond do then action action z action action while not cond then action else if cond then action else z do if cond then if cond and cond then action else t t z action action action while cond and cond and cond and cond then action if cond and not cond do action else t t t t z action action action action if cond do action while cond do if cond then action action action while cond do if cond then action if not cond then action if not cond do action if cond and if cond action else z if cond and cond then action while cond do action else t t z else z action action", "action action while cond then else t t t t z action", "while not whi action while cond and not cond then if not not cond and not not not cond and cond then while cond do action else z else z action else z action while cond and not cond then if cond and cond then if not cond then if cond do while cond and cond and cond and cond and cond else t else z else z else t t z if cond and cond then action else t t t t t z else t cond and cond and cond and cond then if cond do action action action action while cond and cond then while cond and not not not cond then action action if cond then while cond and not cond do action if cond and cond then while cond and cond and cond and cond then action else z else t t t z else t z while cond if cond then action action while not not action if not cond and cond and cond and cond do action", "action if cond then if cond else z else z action while cond then action while cond then if cond then while cond do action if cond and cond do action else t t t t t t z if cond then action if not not cond and cond and cond and cond then action else t t t z while cond and not cond then action else z action else z if not not cond and cond then action if cond then action else t t t z z if not cond do while cond do if cond then while cond then action cond then if cond then while while cond then if cond and not cond then action action else z action else z if cond then if cond do if cond do action else t z if cond then action if not cond then action else z else t t t t t z action if cond if", "action if cond and cond do while cond and cond and cond and cond then action else t t z else t t t t z while cond then action action while cond and cond do if cond and cond and not not not cond then action else t t t z else t z action action action if cond and cond do if cond and cond do while not cond and cond do if not cond action else t t t t t t t t t t z if cond and not cond and cond and not cond do action else t z else z action if not cond do if cond while cond and cond and not cond do while not action if not cond not cond and not cond and not not cond do action action action while cond do action if cond and cond and cond and cond cond and not not not cond and cond then action action action while cond and cond then action do if cond and cond then while cond then while cond and cond then", "action if cond then if cond and not cond and cond and not else t z else z else t z action action action if cond then if cond do while cond then while not if cond then while cond then action while cond and not cond and not cond then if cond and cond then if cond do action else z else z action else z else z else z action if not action if not cond then action while cond and action else t t z while cond do action while not cond then if not cond and not cond and cond do while cond then if not cond and cond do if not cond do action if not cond and cond and not cond then action if not not if cond and cond and cond then while not cond and cond then if cond do if cond and cond and cond then if not cond and not cond and cond then action else t z else t t z else", "if cond and cond and cond and cond and not cond do while cond if not cond then action else t t z else t t t z else t t t z action", "action action if cond then if cond then action else t t t t t t else t and cond and cond and cond then action else z action action action while not cond and cond then action action if not cond then if cond then while not cond and cond and cond and not not cond and not cond then if not cond then if cond do while cond and not cond and cond do while cond and cond do if cond t t z action if cond and cond and cond do action else t t t t t t t t z action else t z if cond then if cond and cond do action action else t z while cond then while cond do while cond then if cond do action while not cond do while cond do action else t z else z action while cond and cond then action if cond then while cond cond do action else t t t t t t t z if cond", "action action action action while cond do if not cond then if cond and not cond and cond and cond do action else z else z and not cond and cond and not not cond and cond and cond and cond and not cond and cond do action while not cond and cond and cond and cond and cond and cond then while not cond and cond t z action else z else z action if not not not cond then action while not cond then action while cond and cond and not cond then action if cond and not not cond then action action action while cond then if not cond then if cond then if cond and not cond and cond then if not not cond and cond and cond then action else z else t z else t t t t t z else t z if cond action and cond then action action else t t t t z action action if cond do if not not not cond and cond and not cond and cond do action action", "if cond then if else t z if not cond and not not cond do action else t t t t z if cond and cond then action if not not not cond then action if cond and cond then while cond do if cond and cond do while cond and cond do if cond do action action else t if cond and cond and cond and cond and cond and cond then action else t t t z else t t t t t t z if not not cond and not cond and cond and cond then action if cond cond then action action if cond and not cond and not cond and cond then if cond then action else z else z if e while cond do if cond and not cond then action else t t z a while not cond and if cond do while not not cond and cond and cond and not cond then action else z else t z if not cond do while cond do if cond do action action while not cond and cond and cond and not action", "while cond and cond and not cond and not not cond do action action else z action else t z not cond then action while cond then while else z else t action if cond do while not cond do if cond then action while not not cond then if cond do if cond then action else z else z else t t t t z else t z action else action while cond then action else t z if cond do if cond then action else t t t z action if not cond and cond do while cond and cond and cond then while cond do while cond then while cond and cond then action if cond then action else t t z else t z else t t t t t t t t t t t z else t z while cond and cond then action action else z else t t t t t z action", "while cond and cond do if cond and cond while cond and not cond then action else z while not cond do action else t t t t t t t t z else t t z action", "if not not not cond and not cond then if not cond and cond and cond and not cond then else t z else t t t if not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond then action else t z if cond and cond do action else t t if not not cond else t t t z else z else t t not cond then while not cond and cond do action if not not cond and cond and cond and not not cond and cond then action if cond and cond then while cond and cond do action else t t t t t t t t t z else t t t t z if not cond do action while not cond do if cond and cond else t t z if not not cond and cond t t t t t t t z if cond then if cond and cond and cond action action action while cond then if cond then while not cond then if cond do if not cond do if not cond then action while cond then action else t t t z", "while cond and cond and not cond and cond and cond then if cond and not not not not cond and cond not cond then action else t t t z if not cond then if cond do while cond and cond do action else t z else t t t t t t t t t z else t t z else t z action if cond do action action action action action if not cond and cond and cond and cond then action if cond and not not cond then while cond and cond and cond and cond and not cond do action while not if cond and not cond else z else t t z else t t t t t t then if cond and not not not cond then action if cond then action action if cond and cond then if cond do if not cond do while z action else t z if not cond do if cond and cond then if cond then action else t z while cond then action else t t z else t t t z else z else t t t t t z", "while cond do while not cond do while cond then action else z else t z action else z if not not not cond if cond then if not cond then action else z action else z while cond do if cond then while cond and not cond then if cond and cond do cond then action else t t z else z else z action while cond and cond then action action action action then if cond then action else z action t z while do not cond and not not not cond do action if cond then if cond and cond then if cond and cond then action else z if not cond then if cond then if cond then action else t z if cond then action else t t t t z while cond and not not cond and cond do action else t t t t z if not cond then if cond do if cond then action while not cond then else t t t t z else", "action else t t t t z if not not cond and cond then if not not cond and cond then action else t z cond and cond and cond then if not cond then action else z action and not not cond and cond then while not not if cond do action else z else t t z if not cond and not cond then if cond and cond then action else t t t t z if not cond then action else t t t t t t z action else z action else t t t z action while cond then if cond and cond then if cond and cond do action action while not not not cond and not cond then action if if cond and cond and cond do while not cond then action action while cond and cond then action action action while cond then while cond then if not not else t z else t t t z action action else t t t t z if cond do action", "action while cond do if cond and cond then action else z if cond then action else t while cond cond then if not cond and cond and not cond do if cond and cond and cond and cond and cond then action else t t t z else t t t t t t t t t t z else t t t z else z action action a if cond then action action action action action action", "if cond and not cond and cond do action else t z while cond then action else t z while not not cond do if cond and cond action action action action action if not not cond and cond do if cond if not not cond then action else t t z while cond and cond do z while cond do if cond and cond then if not cond then if cond and not not cond then if not cond then action else z else z action else t t z if cond then action else t while cond and cond and cond do action if cond do action action action else t z if not cond do if cond then while not cond and not cond and cond and cond do action else z if cond do while cond do while cond and not not cond do action else z action if cond then action if not not not cond then if cond then action else t t t t t z while cond and not cond", "action while cond and if not not not cond do action if cond then t z action action while cond and cond then if cond then action else t t else t z action action if cond and cond while cond then if cond do if not cond do if cond then while cond then if cond then cond then while not cond and cond and cond then while cond do while cond and not not not cond do while cond and cond then action else t t t z cond do action action if cond and cond do while cond then action if cond do action else z else z else z while cond then action else t t z else z if cond do while not not not cond and cond and cond do action else z else z else z if cond do if cond and cond then while not cond then if cond and cond then while not not cond then action while cond then if cond and cond do action else t z action else z else t z while cond", "action if cond and cond and cond do action else z action while cond and cond then while cond do action action else t t z if cond and cond then action else z while cond and cond then if cond then if not cond then action action else t t z else z if cond while cond do while cond and cond then action else z else t t t z action action else z while cond and t z cond and not cond then while not cond then action action while not cond then action while not not cond and cond and cond and not cond and cond action if not cond then action action if cond and not cond do if cond and cond then if cond and cond do action if cond and not not cond then action else t z if not cond then if cond do if cond then if not not cond and", "if cond then if cond and cond and cond do if cond and cond and not cond then if not cond and cond then action else z else t z else t z while cond do if cond and cond then if cond and cond and not while cond and cond and not cond do if cond then if not cond and not cond and cond and cond and not cond do while cond and cond then if cond do action and cond then action else z else t action action else z else z if not cond do while cond and cond then if cond and cond do action action else t z else t t z if cond then while not cond and cond then if not cond and cond and cond then action action while cond then action while cond then while not not cond and cond and cond and cond then action else t t t z else t z action action if cond then if not cond then if not cond then action else t t t t z action", "if not cond and cond and not cond then while cond and if not not cond then while cond then if not cond and cond and cond and not cond then action else t t t t t t t z else t t t z else t t z else t t t t t t t t t z if not cond do if cond and not not not cond and cond then action while cond then action else t z else z if cond and not cond then while cond then action else t t t z else z if cond then action else t z action else z action while else action action if cond and cond and cond and cond and cond and cond and cond then if not not cond do action while cond then action if not cond and cond and cond and not not cond and cond and cond then while cond and cond and cond then if cond and not cond and cond do action else t t t t t t t z else t t z while cond do action if cond and not not cond and not", "if cond and cond action while cond then action else t t t t t z if cond then action while cond then cond then while not cond do action else t z while cond while cond do while cond then action else action else t t action action while cond and cond then if not cond do action while cond then if not cond and cond and cond then if cond and cond then if cond and cond do while cond do action else else t t z action while not cond and cond then action else t if not cond then if cond and not cond then action else t t t t t z else t z else t z if cond then action action else z else t t t t t z action action else z if cond do if not not cond do if cond then while cond and cond and cond then if cond and cond then action action e if not cond and cond and not cond and not cond then if cond and", "do while cond and action if not not cond then action else t t t t z if not not not cond then action else t z if cond and cond then action action else t z else z else z while not cond then if cond and cond and cond and cond and not cond then action action else t z else z action if cond and cond then action action action action else z action if cond and cond then action else z if not cond do if cond and cond then action action action else t t t z if not cond then if cond then if not not cond and cond and cond do if not cond and cond do action while not cond and cond and cond do action if and not cond and not not cond and cond then if cond then if cond then if cond then if not cond then action action if cond and cond and not not cond and cond and cond and cond then if cond", "if not not cond do if cond do action else z while cond then if cond then if cond and cond do while cond and cond and cond and not cond cond then action else t action else t z else t t t t t z else t t z else t t z action action if cond and not not not not cond and cond then action while cond and cond and cond and cond and cond and cond then if cond do action action if cond and cond and not cond and cond and cond and cond do if cond and not cond and not not not cond do action else t z else z cond do if cond then if cond and cond and cond and cond and not cond and cond then action else z else t t t t t t t t z action action while cond then if cond and cond and not cond do while cond and cond then while not not if cond then while cond and cond and cond and not cond then action while cond and cond do while cond do action else z else t t t t t z", "do while cond then while cond and cond and cond then action else t t t t t t t t and not cond do if cond and cond then if not cond and cond do if cond and not cond and cond do t z else t t t t z else t else t t t t t z action action action if cond else z action action while and cond then if cond and not cond then if not cond and cond then while cond and not cond do while not cond do while not cond do action else t t t z else t t z else t t t t z if cond and cond then action if not cond then while cond and cond and cond then action if cond and not cond and cond and cond then if cond and cond then while cond and cond and cond and cond and cond and cond and not cond and cond then while not cond and cond if cond do if not not not cond and not cond and cond do if cond and cond and cond and cond then action else t t t t cond then while cond", "action while cond and cond if cond and not not cond and cond then action else t z else t t z action", "if not cond not cond then action else t z if not not cond and cond then if not cond do while not then if cond then action else t t t z else t z action while cond and cond and cond then if cond do action else z action else and not cond then if cond then action else z else t t t t cond cond then action action else t t t t z if cond and cond then action z action else t z action action", "if cond do action else t t t t t t t t t t t z action", "action action do while not cond and not cond do if cond then if not cond then else t t t t t t t t if if cond and not not cond and cond and cond and cond then if cond and not cond and not not cond and cond then action else t z else t z else t t t t t z action while cond and cond do if cond and cond and cond and cond and cond and cond then if cond then action else z and cond and cond then action if cond then action action else z action if do if cond then if not cond then action action else t z while not cond and not cond then if not cond then while not not cond and not cond then action else t z if cond and cond and cond and cond do if cond and cond then if cond and cond then action else t t z else t z while not cond then do if cond do if not cond and cond do action else t z else t z else z if cond and cond", "else z while not not cond and not not cond and cond then while cond then if cond and cond and cond and cond then while cond and cond do action else z else z else z while cond do action action else t z if cond then if not cond then if cond and cond then if cond then action else z else t t t t t t t t z if cond then while not not cond and not cond and cond then while cond and not cond do if not not cond and cond and cond and not cond and cond and cond do action else z action else t t z else t z else t t t t t t t t t t z else t z else z if not not cond then if not cond and not not cond and not cond and cond and cond and not cond then action if cond and cond then action if cond then action action action if cond and not cond then action else t z action if not cond and cond do action if cond then action", "while cond then else t t t t z else t z if cond and not cond then if not cond then if not z else z while not not cond and cond then while cond then action else z else z if cond then action while cond and cond then action while not cond then action if cond then while cond and cond and cond and not cond then action else t z while cond then if cond and cond and not cond and cond then if not cond and cond then if cond and not cond then action else t t t t t t t t z else t if cond and cond and not cond then action else z if not not cond and cond do while not cond then action else t z else t t t t z else t t t t then if cond and cond then if cond then action if cond then if not cond then action else t z else t t t t t z if cond and not cond do if cond and cond and cond action else t z while not cond", "action else t not cond and cond then if cond then action else t z else z else t t t z if cond and else t t t t t z if cond and cond do if cond and cond and cond if cond action while cond then while cond and not not cond and cond then action while cond then while cond do action action if not if cond then if cond else t t do action action while cond do action if cond then if not cond and not cond and not cond and cond and cond then if cond do while cond and cond then action then if cond then action else z else t t z while not cond then action else t z if cond and not cond do if cond and cond then action else z action else t t if cond and cond then if not cond and not cond and not cond then action else t t t t t t z action if cond and cond then while cond", "while cond then if cond and cond while not not not not cond then action else t t t z while cond do action else z if not not cond then if not cond do if cond do action else t z if cond then action else t t t t t t t z action z action if cond and not not not cond then action else t t t t t t t z if cond and cond and cond do if cond then action action else z if cond and cond and cond do while cond do if not not cond do if cond and not cond do action do action else t z while not not cond then action else z if not cond and cond then action while not cond do action while cond do action if cond then if cond then action else t t z action action action action while cond then action if cond and cond and not not", "if cond and cond and cond and cond cond and cond and not not cond and cond then if not else t z if cond do if cond and cond then if cond do action else z else t t t z and not cond and not cond and cond do action if not cond then action else t t t t t t z while cond and cond and not not not cond and cond then while not not cond then if cond then if cond and cond and not not not cond and cond do action if cond and not cond and else t z if cond and cond do if not cond and cond and cond do while not cond and cond do action action action if cond then action else t t t t t t z while cond and if cond and not cond and not cond else t t t z while cond and cond do action while cond do action do action action action if cond then while not cond and not not cond do while not cond do else z while", "if while cond then while not cond do action else t z action else z if cond and cond do if cond then while else z else z if cond and cond and cond and cond and not cond and cond and cond and cond then if not cond and cond then if not cond and if cond and cond and not cond and not cond and cond and cond then if not cond and not cond then if cond then if not cond then if cond and not cond and cond and cond and cond and cond and cond and cond and not cond and not cond then if cond then action action else t t if cond and cond then while not not cond then action else t t t t t t t z else t t t z else z else t t z else t t t z while not cond and cond then while action not cond and cond and cond and cond do action action action if while cond and cond and not not else t z while not cond and cond and c action", "if cond then if cond and cond and cond then if not cond and not cond then while cond and cond then if not not cond then action not cond and cond do if not not not cond then if not cond and cond and not cond then if cond then action else t z else t t z else t z else t t z else t z else t z if not not cond then action else t t t z else t z action if cond and cond and not cond and cond do if cond do action", "while cond and not cond then action else t t while cond and cond and not not cond then while cond and cond and cond action else t z else z else t t t t z else z else t t t if cond and cond then action while if cond and cond and not cond and cond and cond and cond then if not cond then if if cond and cond then action else t t t t z if cond do while not cond do if cond do if cond then action else t z else t z cond and cond then while cond then action else z else t t t z action if cond and not not not cond and not not cond then if cond do action if cond then if not cond then if cond then action action else z else z action action action else t t t z if cond and not cond then if cond and cond and cond and cond then if cond and cond do if cond and cond and cond and not not cond then if cond do if cond do if cond then if", "action while cond then if cond and cond and cond and not not cond and cond and cond if cond and not cond do if cond and cond and cond and cond and cond then if cond and cond and cond and cond and not cond then action else t t z else t t t t t z z else t z action do action if cond and cond do action action action while not cond do if cond and cond and cond do action action action action action while cond then if not not cond then action if cond do while cond and not not cond cond do action else t t z t t t z action action while cond then action and cond do while action while cond and cond and not not cond then if not cond action action if cond then if cond and cond then action else z else t z if not cond then action", "if cond z action", "action action cond then if cond and cond and cond do while cond and cond and then action else t t t z if cond then if cond do if cond then action while cond then cond and cond and cond then action else z else t t t t z action action if cond and cond do while cond then action else action else then while cond and cond then if not cond then while cond and cond and not cond action else t t t z else z else then while cond then if cond then while cond then if cond do if not cond then while cond and not cond then action else t t t t t t t z else t z if cond and cond do while cond then if cond then action else action else t t t t t z while cond then if cond then if cond then while cond and cond do if not cond and cond do if cond then while cond then while cond and not cond do action t t t z else t t t z else t t t z else t z while cond and not cond and not cond do action", "if cond and not cond and not cond and cond and cond then action else z else t t t t t t z while cond then action if not not not not not cond and cond else t z if cond and not cond and not not cond then not not cond and cond do action if cond do action action action if cond do action else t t z action if cond then while not cond and cond then z else z else z while cond and cond and cond do if not cond do action else t t z if not not cond and cond and cond and cond and not cond then action action else t t t t t t t t t z action action", "while cond then action else t z if cond and not cond and not cond then if cond and not cond and cond and cond and cond and cond and not not cond then if cond then while cond and cond do action else t t t z action else t t z if cond then while cond and not cond then while cond then if cond and cond do while cond and not not not not not cond and not cond then while not cond and cond then action else t t t t z else t t z else t t t t t t t z else t t t z action if cond and cond and cond then while not cond and cond and cond and cond and not cond and cond and cond and cond then action if cond and cond and cond and cond and cond and cond and cond and not cond and cond do action action if not cond then while not not cond and cond and not cond and cond and cond do t z action action cond and cond do while cond then action action if not cond and cond and cond", "if cond and cond do action else t t t z action action if not cond then while cond and cond then if not cond and not cond then if cond then while not not cond and not cond then while cond do if cond and cond do action else t t z else t t t t t t t z while cond t t t t z else z if not cond and not while not cond and cond do action else t t t z else t t z if cond do while cond do action action else t t z if cond then if cond do action action action while cond and not cond and cond then if not cond and cond and cond and cond and cond do while cond then while cond and cond and not cond do if not cond then if cond and cond and cond cond do while cond and cond and cond then if cond then if cond and not cond do while cond then action else t z action else z else if cond then", "action while not cond then if not cond do while cond then action else not cond and not cond and cond and not cond then action else t t t z action else t z action action if not not while cond then if cond then action action else z else t z action else t z action if cond then if cond and cond do action action action while cond then action else z action if cond and cond and cond and cond and cond do if cond and cond and cond then if cond then if not cond then action else t z while not cond then if cond and not not cond do action action action z if cond then while cond do if cond and not not not cond then if not cond do while cond and cond and cond and cond and cond and not cond and cond and cond then if cond and not cond then if cond then if not not not not not cond then if cond then action else z else t t t t", "action if cond then if cond then if cond t t z else t t t z if not cond and cond do while cond then if cond do action else z else t t t z while not cond and not cond do if cond then while cond and cond do if cond then if cond and cond and cond then else t z else z not not cond and cond then if cond then if not cond and cond then action else t t t z else t z action else t z else while cond then action else t z else z action if cond and cond then if not not not not cond then action while not while not cond then action else t t if not cond t z z if cond then if cond then if not cond and cond and not not cond and cond then action action while not cond and cond and cond do action action else t t t t t z else t t t then action else t z else z if not not cond and not cond and cond then action", "if cond and cond and cond then action else z else t t t z if cond then if cond do while cond and cond and cond and not cond do while cond and cond and cond and cond do while cond and not cond if not cond and cond and cond and not cond and cond then if cond and cond then action else t t t z else t t t z else t t t z else t t z if not cond and cond then if cond then action t t t t t t z if cond and cond and not cond do action action while cond and not not cond then while cond and cond then action else t t t z if not cond then action action else t z action if cond do if cond and cond hen else t z else t t t z if not action action action", "do while not cond then action else else action action action while cond then while cond do action action if cond and cond and not cond then action while not cond do while not not cond and while cond then action if not not not not cond not cond and not cond and cond and cond then while cond and not not cond do while cond do if cond and cond and cond and cond then action else t z if not cond and not not cond then while cond and cond and cond do if cond do if cond then if not not cond do action else z else t t z else t t t t t t t t t z else z else t z if cond and cond and cond and cond and not cond and not cond and cond do action else t t t t t t t action if not cond and cond and cond then action if cond then if not cond then action action action", "action if cond then action else t t t t z if cond and cond z while cond and cond and cond and cond while cond and cond and not not cond do while cond then if cond and not cond then if not cond do action action else z if not cond then action else t z else t t z else t z if cond then if not cond then action while cond and not cond and cond then action else z else t t z while cond do if cond and cond and cond and cond do action if cond then action action if cond and cond and not cond and cond then action while not cond then action while cond do if cond and not cond do if cond and cond then action else t t t z if cond then action else t z else t t z else t z action else t z else t t z if while not not not cond and cond and cond do while cond and if cond then action if not cond and cond and cond then", "while not cond and not not cond and not not cond and cond and not cond and cond and not cond and not not not cond and cond and cond do action else z action if cond and not not not not cond do action while not not not cond and cond and cond do action action while not cond then action else t t t z action while not cond then if not cond and cond and not not not not cond and not cond do action if not cond if not not cond and cond do action if cond and not cond and not not cond do action action while cond and not cond and cond and cond then action else t t t z else t t z else t t z action while not cond then while cond then action cond and cond and cond and not not cond then if not cond and cond and not cond then action action action if cond and cond and not cond and cond then action else t t t t t z action if not cond and cond do action"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -36.526379592716694}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -17.010541558265686}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -17.647836305201054}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -12.542419716715813}, {"text": "if cond then action else t z", "log_prob": -7.337821960449219}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not not cond and cond then action else z", "log_prob": -11.424063824117184}, {"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -39.42627891153097}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.744969233870506}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -16.211733765900135}, {"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "if cond then action else t t z", "log_prob": -7.690112486481667}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -23.952352419495583}, {"text": "while cond and not cond do action", "log_prob": -10.19714069366455}, {"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "while cond do action", "log_prob": -7.189703017473221}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -12.444008730351925}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then action else t z", "log_prob": -7.337821960449219}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -36.46716493368149}, {"text": "while not cond and not not cond do action", "log_prob": -12.694839969277382}, {"text": "if not cond then action else z", "log_prob": -8.548616163432598}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -37.35400775820017}, {"text": "if not not not cond then action else t t t z", "log_prob": -12.358346469700336}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -17.196575731039047}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -17.17911757528782}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while cond do action", "log_prob": -7.189703017473221}, {"text": "if cond then action else z", "log_prob": -7.219812676310539}, {"text": "if cond then action else t z", "log_prob": -7.337821960449219}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -32.1799388602376}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while cond and cond do action", "log_prob": -8.826134979724884}, {"text": "if cond then action else t z", "log_prob": -7.337821960449219}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -12.715247131884098}, {"text": "while cond do action", "log_prob": -7.189703017473221}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not cond then action else z", "log_prob": -8.548616163432598}, {"text": "if cond and not cond then action else z", "log_prob": -9.807095803320408}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while cond and cond do action", "log_prob": -8.826134979724884}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -18.39462637156248}, {"text": "while cond do action", "log_prob": -7.189703017473221}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -20.38796754181385}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -21.92684505879879}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not cond and not cond then action else t z", "log_prob": -11.157645121216774}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while cond do while cond do action", "log_prob": -11.449888795614243}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -36.015632793307304}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -29.253165259957314}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -18.597376815974712}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.528596483170986}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -67.70708311349154}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -10.273330360651016}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.800913035869598}, {"text": "if cond then if cond then action else z else z", "log_prob": -10.800913035869598}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -18.817363813519478}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -24.227462023496628}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -50.61807443201542}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "if not cond then action else t t z", "log_prob": -9.013534866273403}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -39.958966478705406}, {"text": "if cond and not cond then action else t z", "log_prob": -10.391831941902637}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "while not cond and not cond and cond do action", "log_prob": -12.722270041704178}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}, {"text": "action", "log_prob": -3.164018467068672}]}, "epoch_50.pt": {"generated_sequences": ["action", "action", "if cond then if cond then action else z else t t z", "if cond then if cond and cond and not not cond and cond then if not not not cond then action else t z else z else z", "action", "if cond then action else t z", "if not cond then while cond do action else z", "while not cond do if cond then if cond and not not cond then if not cond and cond and not not cond and cond then if not cond then if cond and not cond and cond then if cond and cond and not cond then action else t t z else t z else t t t t z else z else t z", "action", "while not not cond do action", "if cond and cond and cond then action else t z", "action", "action", "action", "if cond then action else z", "action", "action", "while not not cond do action", "if not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond do if cond and not cond and cond then action else z else t z", "action", "while cond and cond do while not cond and not cond and cond and cond and cond and cond and cond and cond and not cond do if cond then if not cond then action else z else z else z", "while not cond and cond and not not cond and cond and cond do if cond and cond then if not not not cond then action else t z else t t t t z else z", "if cond and cond then if cond then action else t t t z else t z else z", "if cond and not not cond then if not cond then action else t z else t t t t t z", "while cond do if cond and not cond and cond then if cond then action else z else z", "action", "action", "if not not cond and cond then if cond and cond then action else t t t z else z", "if cond and cond then if cond then if cond then if cond and cond then if cond and not not cond then action else t t t t t t t z else t z else t z else z else z", "while not cond do while cond and not not cond and cond and not not cond and cond and cond do if cond then action else t z else z else t t z", "while cond do if not cond and cond and cond then while cond do action else t t t t z", "if cond and cond and cond and cond then action else z", "if cond then if cond then action else z else z", "action", "if not cond then action else t z", "while not cond do action", "if not cond and cond then while not cond and cond and cond and not not cond and cond and cond and cond and not cond and cond do action", "while cond and cond do action", "action", "while cond and not not cond and cond and cond do action", "if not not cond then if not cond and cond then if cond then action else z else t z else t z", "action", "action", "action", "action", "action", "if cond and not not not cond then action else t t z else t z", "while not not not cond and cond and cond and cond then action else z", "while cond and not cond and cond and cond do if not cond then action else z else z", "while cond do while cond do action"], "accuracy": 0.8, "train_overlap": 0.58, "res": [{"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -27.18239913485013}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -12.232049086131155}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.081041224300861}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -10.7855018384289}, {"text": "if cond then action else t z", "log_prob": -5.7366260720882565}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not not cond and cond then action else z", "log_prob": -8.829417034983635}, {"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -30.688601471018046}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -9.410347831668332}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.044767839368433}, {"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "if cond then action else t t z", "log_prob": -6.187127747340128}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -18.897511365357786}, {"text": "while cond and not cond do action", "log_prob": -8.102937404997647}, {"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "while cond do action", "log_prob": -4.562107343925163}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -9.676494624000043}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then action else t z", "log_prob": -5.7366260720882565}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -30.08562500786502}, {"text": "while not cond and not not cond do action", "log_prob": -10.459239600691944}, {"text": "if not cond then action else z", "log_prob": -6.6099431393668056}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -30.54206657537725}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.6112444200553}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.141643890179694}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.542468225234188}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while cond do action", "log_prob": -4.562107343925163}, {"text": "if cond then action else z", "log_prob": -5.320607569767162}, {"text": "if cond then action else t z", "log_prob": -5.7366260720882565}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -26.440882482100278}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while cond and cond do action", "log_prob": -6.360282629029825}, {"text": "if cond then action else t z", "log_prob": -5.7366260720882565}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -10.440332165919244}, {"text": "while cond do action", "log_prob": -4.562107343925163}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not cond then action else z", "log_prob": -6.6099431393668056}, {"text": "if cond and not cond then action else z", "log_prob": -8.203727824846283}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while cond and cond do action", "log_prob": -6.360282629029825}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -14.128190749324858}, {"text": "while cond do action", "log_prob": -4.562107343925163}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -13.650286621646956}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -14.646290597738698}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.612274544779211}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while cond do while cond do action", "log_prob": -6.69822451332584}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -30.93007434415631}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -23.950965018942952}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -14.630096226464957}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -11.446390845114365}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -57.52789345558267}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -8.973106511402875}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.222043277462944}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.222043277462944}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.054527651518583}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -20.253744310699403}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -41.350602743797936}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "if not cond then action else t t z", "log_prob": -7.459658785490319}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -32.59050115419086}, {"text": "if cond and not cond then action else t z", "log_prob": -8.626551990630105}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.549182765884325}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}, {"text": "action", "log_prob": -2.43117669923231}]}, "epoch_55.pt": {"generated_sequences": ["action", "action", "if cond then action else t t t t t t z", "while not not cond do if cond and not cond then while cond do action else t t z", "action", "if cond and cond then action else z", "while cond do if cond then action else t t t t t z else z", "action", "action", "if cond then action else z", "action", "if cond and cond then action else t t t t t t z", "action", "while not cond do if cond and cond then while cond and cond and cond and not cond and cond and cond and cond do action else z else z", "while cond then if not not cond then while cond and cond do while cond and cond do while not not cond and cond and cond do if not not cond then action else t t t t t z else t t t t t t t t z else z", "action", "if not not cond and cond then if cond and cond then if cond then if cond then action else z else t t t t z else z else t z", "action", "action", "if cond then action else z", "if not not not cond and cond then while not cond do while not not cond and not not not cond and not cond and cond do if cond and cond and not cond and cond then action else z else t t t z", "if cond then while cond do action else t t z", "action", "while not cond do action", "while not not not cond and not cond and cond and not not cond and cond and cond do while cond and not not cond and cond and cond do if cond then if not cond then if not cond then if cond then if cond then action else z else z else t t t t z else t t t z else t t z else z", "if not cond and cond then if not cond and cond and cond then while cond do action else z else t z else z", "if cond and cond then action else z", "action", "while not cond do if not not cond then if cond then if cond then action else t z else t t z else z", "if not not cond and cond then action else z", "if cond then if cond and not not not cond and cond then if cond then action else t t t t t t t z else t t t t z else t t z", "while not not cond and cond do if cond and cond then while cond do action else t z", "if not not not cond then action else t z", "action", "while not cond do if cond then if cond then if not cond and cond then if cond then if cond then if cond then action else z else t z else t z else t z else t t t z else z", "action", "action", "action", "action", "if cond then if not cond and not cond then action else t t t t z else t z", "while cond do if not cond then if cond and cond then if not not cond then action else z else z else z", "action", "action", "action", "action", "action", "action", "action", "action", "action"], "accuracy": 0.9, "train_overlap": 0.66, "res": [{"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -28.389566037454642}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -13.165347289992496}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.239283106522635}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -10.59436663147062}, {"text": "if cond then action else t z", "log_prob": -5.573607270605862}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not not cond and cond then action else z", "log_prob": -8.717430427321233}, {"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -31.575661349808797}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.027637655148283}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.64417504647281}, {"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "if cond then action else t t z", "log_prob": -6.133169358363375}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.44854805059731}, {"text": "while cond and not cond do action", "log_prob": -8.039864733000286}, {"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "while cond do action", "log_prob": -4.9643632338847965}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -9.373121759155765}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then action else t z", "log_prob": -5.573607270605862}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -29.917727994383313}, {"text": "while not cond and not not cond do action", "log_prob": -10.090231443522498}, {"text": "if not cond then action else z", "log_prob": -6.399663161719218}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -29.749106766772456}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.750925433821976}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.838347269687802}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.584653454716317}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while cond do action", "log_prob": -4.9643632338847965}, {"text": "if cond then action else z", "log_prob": -5.097410812042654}, {"text": "if cond then action else t z", "log_prob": -5.573607270605862}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.735286460840143}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while cond and cond do action", "log_prob": -6.706573811243288}, {"text": "if cond then action else t z", "log_prob": -5.573607270605862}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -10.571857571136206}, {"text": "while cond do action", "log_prob": -4.9643632338847965}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not cond then action else z", "log_prob": -6.399663161719218}, {"text": "if cond and not cond then action else z", "log_prob": -7.970491943880916}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while cond and cond do action", "log_prob": -6.706573811243288}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -14.14095309341792}, {"text": "while cond do action", "log_prob": -4.9643632338847965}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.139839926850982}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -15.53756950981915}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.33814156614244}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while cond do while cond do action", "log_prob": -7.526440648944117}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -29.69680177536793}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -24.646218861453235}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -15.713689708383754}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -11.796170559711754}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -58.663465952151455}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.480158265680075}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.8532605660147965}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.8532605660147965}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.195259867352434}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -21.815266475547105}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -40.408762472332455}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "if not cond then action else t t z", "log_prob": -7.389336062828079}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -33.47247175744269}, {"text": "if cond and not cond then action else t z", "log_prob": -8.433242063969374}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.517403617850505}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}, {"text": "action", "log_prob": -2.3351086261682212}]}, "epoch_60.pt": {"generated_sequences": ["if not cond and cond then if cond then if cond then action else t t t t t t t z else t z else z", "action", "if cond then while cond do action else t t z else t z", "if cond and not cond and not not cond and cond then action else z else z", "if not cond and not cond then action else t t t t t t z", "while cond do action", "while cond do action", "if cond then action else t t t t t t z", "if cond then if cond then action else z else t z else z", "if cond then if cond and cond then action else t t z else t t z", "action", "if cond then if not cond and not not cond and not cond and not cond and cond and not not cond and not cond and cond and cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then while not cond and not not cond do action else z", "action", "if not cond and cond and cond then action else t z", "if cond then while cond do if not not not cond and cond and cond and cond then action else z else t t t t t t t t t t t t t t z else t t t t z", "if not not cond then while not cond do action else z", "action", "if cond then if not not not cond then while not not cond do action else z else z", "action", "action", "action", "action", "action", "if not cond and cond and cond then if cond then action else t z else t z", "if cond then action else t z else t t z", "action", "if not cond then if not not cond then if cond then if cond then action else t t t z else t t t t t z else t t t z else t t z", "action", "action", "action", "if cond and cond and cond and not cond and not cond and cond and cond and not cond and not cond and cond and cond and cond and cond and not cond and cond then while cond do if not cond and cond and cond and cond then if cond and cond then action else t t z else z else z", "action", "action", "while cond and cond do if cond then action else t t z else t t t z else t z", "if cond then if not not cond and not not not cond and not cond and not cond then if not cond then if not not cond then if cond then action else t z else t t t z else t t t z else t t z else z", "if not cond then if cond then while cond do if cond and cond then while cond do if not not cond and not cond and cond then if cond then if cond then if cond then if cond then action else z else t t t t t z else t t t t t z else t t t t t z else t t z else t t t t t t t t t t t t z else z else z", "if not not not cond and not not cond and cond and cond and not not cond and not cond then if not cond then action else t t t z else t t t t t t t t t t t t t t t t t t t t t t t t t t t t t z", "while cond do action", "if not cond then if not not not not cond and cond and cond and not cond then if not cond then if cond then action else t z else t t t z else t z else t z", "if cond then while cond do if not cond and cond then if not not cond and not cond and not cond and cond and cond and cond and not not cond and not cond and cond and not cond and cond and cond and cond and cond and cond then action else t t t t t t z else z else z", "if cond and not cond and cond and not not cond and not cond and not cond and not not cond and cond and cond and cond and cond then action else t z", "if cond and cond and not cond and not cond and not not cond and cond and cond and cond and cond and cond then if cond then while not not cond and cond do if cond and not cond and cond then if not not cond and cond and not cond then if not not cond and cond and not not cond and not cond and cond and not cond and cond then action else z else t z else z else z", "if not cond then if cond then while cond do while cond do if not cond then while cond do if not cond then while cond and not not not cond then if cond and cond then if cond and cond then if not not cond and not not not cond and cond and cond and cond then if cond then action else t t z else z else t t z else t z else t t t t z else t t t z else t t t z else t t z else z", "action", "action", "action", "action", "while not not not not cond and cond and cond and cond do while cond do action", "if cond then if cond then if not cond then if cond then if cond then if cond then if cond then action else t t t t t t t z else z else t t t t t t t z else t t t t t z else t t t t z else t t t t t t t t t t t t t t t z", "if cond then action else t t t z"], "accuracy": 0.8, "train_overlap": 0.48, "res": [{"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -27.092270309804007}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -12.823768057627603}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -12.918751260498539}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -10.723264990141615}, {"text": "if cond then action else t z", "log_prob": -5.556134199025109}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not not cond and cond then action else z", "log_prob": -8.793606796767563}, {"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -32.25477369711734}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -8.511042956029996}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -12.089199192239903}, {"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "if cond then action else t t z", "log_prob": -5.933167123468593}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -17.97231681109406}, {"text": "while cond and not cond do action", "log_prob": -8.03731203544885}, {"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "while cond do action", "log_prob": -4.327449519187212}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -10.080865909694694}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then action else t z", "log_prob": -5.556134199025109}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -28.534817110630684}, {"text": "while not cond and not not cond do action", "log_prob": -10.159711260348558}, {"text": "if not cond then action else z", "log_prob": -6.453741151606664}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -29.60729377507232}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.065394633682445}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.378530866466463}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.034231651690789}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while cond do action", "log_prob": -4.327449519187212}, {"text": "if cond then action else z", "log_prob": -5.276330813067034}, {"text": "if cond then action else t z", "log_prob": -5.556134199025109}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -24.630297810654156}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while cond and cond do action", "log_prob": -6.698382509406656}, {"text": "if cond then action else t z", "log_prob": -5.556134199025109}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -10.351229907013476}, {"text": "while cond do action", "log_prob": -4.327449519187212}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not cond then action else z", "log_prob": -6.453741151606664}, {"text": "if cond and not cond then action else z", "log_prob": -8.367637944407761}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while cond and cond do action", "log_prob": -6.698382509406656}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -13.793098111636937}, {"text": "while cond do action", "log_prob": -4.327449519187212}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.522745346650481}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -14.784127318300307}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not cond and not cond then action else t z", "log_prob": -9.405108614591882}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while cond do while cond do action", "log_prob": -6.580386161338538}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -31.218349990202114}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -25.829404685646296}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -13.891071406542324}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -10.945472383871675}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -57.29959250241518}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -8.166173240402713}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.3550585268531}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.3550585268531}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.772722066380084}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -20.578766540857032}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -41.47142076049931}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "if not cond then action else t t z", "log_prob": -7.1084145025815815}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -31.33457353594713}, {"text": "if cond and not cond then action else t z", "log_prob": -8.66781212668866}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.720837437547743}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}, {"text": "action", "log_prob": -1.8587483740411699}]}, "epoch_65.pt": {"generated_sequences": ["action", "action", "action", "action", "if cond and cond and not cond then if cond and cond then while cond do action else z else z", "if not cond and not cond and cond and cond then if cond then action else t t z else z else z", "if not cond and cond and not cond and cond and cond and cond then action else t z", "action", "if cond and cond and cond and cond then if cond and cond then while cond and not not not cond and cond and not cond do if cond and cond then if cond then if not not cond then action else z else z else t t t t t t z else z else t t z", "action", "if cond and cond then if cond and cond and not cond and cond and cond and cond and cond then action else z else t", "while not cond and cond do if not cond then action else t z", "if cond and cond and not cond and not cond then action else z", "if not cond then action else z", "action", "action", "action", "if cond and cond and cond and cond and cond and cond then while cond do action else t z", "if cond then action else z", "if cond then action else z", "action", "action", "while cond do if cond and cond and not not cond then action else t t z else t t t t z", "action", "action", "if not not cond and not not cond then action else t t t t t t t z", "action", "if cond then if not cond and cond and cond and not not cond and not cond and not cond and not cond and not cond and cond then while cond and not cond do action else t t t z else t t t z", "if cond then if cond then if cond then if cond and cond and not not cond and cond then while cond and not not cond and not not cond and cond then action else z else z else t t z", "if cond then action else t z", "if cond and cond and cond then while not cond and cond do while not cond and cond and cond and cond while cond and not not do action else t t t t t z", "action", "action", "if cond and cond and cond then if cond then if cond then while cond and cond and not not cond and cond do while cond and cond do action else t t t z else z", "if cond then action else t t t t t t t t t t z", "action", "action", "while not not cond and cond and not cond then while cond and not cond and not cond do if not not not cond and cond and cond and not cond and cond and cond then action else t t t z else t t z", "if not cond and cond and not cond and cond then while cond do if cond then action else z else t t z", "if cond and cond then action else t t t t t z", "if cond then action else t z", "action", "while cond do if cond and not cond and cond and cond and not cond and not cond and cond and cond then if not cond then if not not cond and not cond and not cond then action else t t t z else t t z else t z", "action", "while cond and not cond and not cond and not cond do if cond then action else t t t z else t t z", "action", "while cond and cond do action", "action", "action", "action"], "accuracy": 0.84, "train_overlap": 0.6, "res": [{"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -27.70530541194603}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -11.654706004657783}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.079759574262425}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -9.771227990859188}, {"text": "if cond then action else t z", "log_prob": -5.1642383937723935}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not not cond and cond then action else z", "log_prob": -8.214893055846915}, {"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -30.888548125862144}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -9.616063716355711}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.144899878185242}, {"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "if cond then action else t t z", "log_prob": -5.708541792584583}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -17.9404949399177}, {"text": "while cond and not cond do action", "log_prob": -7.218137911870144}, {"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "while cond do action", "log_prob": -4.404747981578112}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -8.804753597010858}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then action else t z", "log_prob": -5.1642383937723935}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -29.213093718746677}, {"text": "while not cond and not not cond do action", "log_prob": -9.63957732822746}, {"text": "if not cond then action else z", "log_prob": -6.0466231582686305}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -29.32867028110195}, {"text": "if not not not cond then action else t t t z", "log_prob": -10.259955859510228}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.063323347480036}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.101808077539317}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while cond do action", "log_prob": -4.404747981578112}, {"text": "if cond then action else z", "log_prob": -4.754799157381058}, {"text": "if cond then action else t z", "log_prob": -5.1642383937723935}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.03237384930253}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while cond and cond do action", "log_prob": -5.840840825228952}, {"text": "if cond then action else t z", "log_prob": -5.1642383937723935}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -9.876435886137187}, {"text": "while cond do action", "log_prob": -4.404747981578112}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not cond then action else z", "log_prob": -6.0466231582686305}, {"text": "if cond and not cond then action else z", "log_prob": -7.304236417403445}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while cond and cond do action", "log_prob": -5.840840825228952}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -13.960521615343168}, {"text": "while cond do action", "log_prob": -4.404747981578112}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -13.629318167921156}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -14.891515199793503}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not cond and not cond then action else t z", "log_prob": -8.745343252434395}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while cond do while cond do action", "log_prob": -6.949136185809039}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -30.60946520557627}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -22.764152742456645}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -15.013369207503274}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -11.027196508366615}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -57.605043993273284}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.067384141031653}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.683831874397583}, {"text": "if cond then if cond then action else z else z", "log_prob": -7.683831874397583}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -14.342592096072622}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -20.25602628919296}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -39.681536174961366}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "if not cond then action else t t z", "log_prob": -6.993389118695632}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -32.20513851661235}, {"text": "if cond and not cond then action else t z", "log_prob": -7.701724254060537}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "while not cond and not cond and cond do action", "log_prob": -9.021508100675419}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}, {"text": "action", "log_prob": -1.8023906393209472}]}, "epoch_70.pt": {"generated_sequences": ["action", "while not not cond and not cond and cond and cond do action", "if not cond and cond and not cond then while cond do while cond do if cond then while cond do if cond and cond then action else t z else z else t z", "if cond and cond then if cond then action else z else t t t z", "if not cond and not not cond and cond then if cond and cond then if cond then action else t z else t z", "if cond and cond then if cond and cond and cond then if cond and cond then if not not not cond and not cond and cond and cond then if not cond and cond then while cond do while cond do action else t z else t t t t z else t t z else t t z", "if not not cond then action else t z else z", "while cond do if not not cond and cond and not cond then action else t t z", "if cond and cond then action else z", "action", "while cond do action", "action", "if cond then while not cond do if cond and cond then if cond and cond then action else z else z else z", "action", "while cond and not cond and cond do action", "if not not cond and not not cond then if cond and not not cond and not cond then if cond and cond and not cond and cond and cond and not cond and not not cond and cond and cond then if cond then if not not cond and cond and cond then if cond then if cond then if cond then if cond then while cond do action else t z else t t t z else t t t t t z else t t t z else t t z else t t z else z", "action", "if not cond then if cond and not cond and not not not cond then action else t z else t z", "action", "while not cond do while cond do while cond do action", "action", "if cond and not not cond and cond and cond then while cond do if cond then action else t t z else z", "while cond do action", "while cond do if cond and cond and cond and not cond then if cond then if cond then if cond then while cond do action else z else t t z else t z else t t z", "if not cond and cond and not not cond then if cond and cond and not not not not not not cond and cond and not cond and cond and cond and cond and not not cond and cond and cond and cond and cond and cond and cond and not cond then while cond do if cond and not cond and cond and not cond and not cond then action else t z else z else t t z", "action", "action", "if cond and cond and cond then if cond then action else t else t t z else t t t t z else t z", "if cond and cond then action else z else t t t t t z", "if cond then action else t t t t z", "action", "action", "if cond then action else t t t t t t t t t z", "action", "while cond do if cond then action else z", "while cond do action", "while cond do while not cond and not cond do while not cond and cond and cond and cond and cond do action", "if cond then if not not cond and cond and not cond and cond and not cond and not not not cond and not cond and cond then if cond and cond and cond and cond then action else z else t t t z", "if cond then while cond do if not cond then action else t t z else z", "action", "if not cond and not not cond and cond and not not cond and cond and not cond and cond and cond then if not cond then if cond then if not cond and cond then action else t t z else t z else t t t t t t z", "action", "action", "if cond and cond and cond and not cond then if not not not not cond and not cond and cond and cond then action else z else z", "if not not not not not not not cond and not cond and cond and cond and cond and cond then while not cond do action else z", "while cond and not cond and not not cond and not cond and not cond do action", "while not cond do if cond then if cond and cond then if cond then action else z else t z else t z", "while cond and not not cond and not cond do action", "action", "if not cond and cond then while cond do action else t t t z"], "accuracy": 0.84, "train_overlap": 0.46, "res": [{"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then while not cond do while not cond do if cond and cond then while cond do while cond do if not cond then action else z else t z else t z", "log_prob": -28.31419653876219}, {"text": "while cond and cond do while cond do if cond then action else t z", "log_prob": -12.701712029869668}, {"text": "while cond do if cond then if cond then action else t t t t t z else t z", "log_prob": -13.605855920235626}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond and not not cond and cond then action else t z", "log_prob": -11.651462016976438}, {"text": "if cond then action else t z", "log_prob": -6.2008591124322265}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not not cond and cond then action else z", "log_prob": -9.584259963477962}, {"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while not not cond do if cond then if cond then while cond and cond and cond and cond and cond do while cond do while cond do while cond and cond do action else z else t z", "log_prob": -30.786782488808967}, {"text": "if cond then action else t t t t t t t t t z", "log_prob": -10.026725766714662}, {"text": "if cond then if not cond then action else t t t t t t z else t t z", "log_prob": -13.866613403544761}, {"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "if cond then action else t t z", "log_prob": -6.661616912344471}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not cond then if cond then if not cond then if cond then action else t t t t z else z else z else z", "log_prob": -19.409665459534153}, {"text": "while cond and not cond do action", "log_prob": -8.554193667601794}, {"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "while cond do action", "log_prob": -5.154172764159739}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond and cond then if cond then action else z else z", "log_prob": -10.453621288528666}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then action else t z", "log_prob": -6.2008591124322265}, {"text": "if cond then if not not cond and not cond and not not not cond and cond and cond and cond and cond and cond then if cond then if cond then action else t t z else t t t z else z else t z", "log_prob": -30.51071218494326}, {"text": "while not cond and not not cond do action", "log_prob": -10.749540532880928}, {"text": "if not cond then action else z", "log_prob": -7.065596332249697}, {"text": "if not not not not cond and not cond and not not cond and cond and cond then if cond then while cond do while not cond and not cond and cond do action else t z else z", "log_prob": -30.3626691129175}, {"text": "if not not not cond then action else t t t z", "log_prob": -11.187914951238781}, {"text": "while cond do while cond and cond do while cond do action", "log_prob": -11.66056665754877}, {"text": "while cond do while not cond do if cond then action else t t z", "log_prob": -12.709942187007982}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while cond do action", "log_prob": -5.154172764159739}, {"text": "if cond then action else z", "log_prob": -5.782522176974453}, {"text": "if cond then action else t z", "log_prob": -6.2008591124322265}, {"text": "if cond then if not cond then if cond then if cond then if not cond then action else z else t t t t t t t t z else t t t t z else t t z else z", "log_prob": -27.637348844727967}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while cond and cond do action", "log_prob": -7.052086642477661}, {"text": "if cond then action else t z", "log_prob": -6.2008591124322265}, {"text": "if not cond and cond and cond and cond then action else t t z", "log_prob": -11.252412409696262}, {"text": "while cond do action", "log_prob": -5.154172764159739}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not cond then action else z", "log_prob": -7.065596332249697}, {"text": "if cond and not cond then action else z", "log_prob": -8.957134285476059}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while cond and cond do action", "log_prob": -7.052086642477661}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not not not not cond and cond and cond and cond and cond and cond then action else z", "log_prob": -14.618784196209162}, {"text": "while cond do action", "log_prob": -5.154172764159739}, {"text": "while cond do if cond then while cond do while cond and cond do action else z", "log_prob": -14.391223814105615}, {"text": "if not cond and cond then while cond do while cond do while cond do action else t z", "log_prob": -15.418993144994602}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not cond and not cond then action else t z", "log_prob": -10.32703903701622}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while cond do while cond do action", "log_prob": -7.489743761427235}, {"text": "while cond do while not cond and cond and not not cond and not cond and not cond and cond and not not cond and cond and cond and not cond and cond do if cond then action else z", "log_prob": -28.330263078038115}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while cond do while cond do while cond and cond and cond and not cond and cond and not cond and cond and not cond and not cond do action", "log_prob": -24.044418394798413}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then if cond then while cond do action else t t t z else t t t t t t z", "log_prob": -15.714116891147569}, {"text": "if cond and not cond then action else t t t t t t t z", "log_prob": -12.149469940981362}, {"text": "if cond then if cond then if cond and not cond and cond and not cond and cond and cond and cond and cond and not cond and cond then if not cond then if not cond and cond then while cond do while not cond and cond and not not cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond do action else z else z else t t t z else t t z else t t z", "log_prob": -58.30179279204458}, {"text": "if cond then action else t t t t t t t t z", "log_prob": -9.550340514979325}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.939964012475684}, {"text": "if cond then if cond then action else z else z", "log_prob": -8.939964012475684}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then while cond and cond do if not cond and cond then action else z else z", "log_prob": -15.643262180965394}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if cond then if not cond and cond and cond then if cond and cond and cond then action else t t t t t z else t t z else z", "log_prob": -21.39803550404031}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not not cond then if cond then while cond do if cond then if cond then if not cond then while cond do while not not not cond do if cond then action else t z else t z else t z else t z else t t z else t t t t t z", "log_prob": -42.16276784718502}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "if not cond then action else t t z", "log_prob": -7.914448305265978}, {"text": "if cond then if cond then if cond then if cond then if not not cond and cond then while cond do if not cond then action else t t z else t t z else t z else z else t t z else t t t z", "log_prob": -34.405155045562424}, {"text": "if cond and not cond then action else t z", "log_prob": -9.36452157702297}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "while not cond and not cond and cond do action", "log_prob": -10.114401570986956}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}, {"text": "action", "log_prob": -2.616069613257423}]}}, "CenterEmbedding": {"best.pt": {"generated_sequences": ["a a a c b b b", "a c b", "a a a a c b b b b", "c", "a c b", "a a a a a c b b b b b b", "a a a a a c b b b b", "a a a a a c b b b b b", "a b", "", "a a a a a a a a a a c b b b b b b b b b b b", "a a a a c b b b b b", "a a a a a c b b b b b", "a a c b b", "a a c b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a c b b b b", "c", "a c b", "c", "a a a c b b b", "a a a a c b b b b b", "a c b", "a a a c b b b b", "a a a c b b b", "c b", "c", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a c b b", "a a a c b b b b b", "a c b", "a a a a a a c b b b b b b", "a a a a a a c b b b b b b", "a a a c b b b", "a c b", "c", "c", "a c b", "a a a a a a a c b b b b b b b c b", "a a a a a a c b b b b b", "a a a a c b b b b b b", "a a a a a a a a a c b b b b b b b b b", "c", "c b", "a a a a c b b b b", "a c b", "a a a c b b b", "a a a a a a a c b b b b b b", "a c b", "c"], "accuracy": 0.66, "train_overlap": 0.66, "res": [{"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.501175598852569}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.217918857262703}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.167536443885183}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.501175598852569}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.167536443885183}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.364067924470874}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.959993858501548}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}]}, "epoch_0.pt": {"generated_sequences": ["c c b", "b b b c", "a b b b a a a", "b a a a a", "b b b c b", "b b b c b c", "b a c c b a", "c b a b b a b a", "a", "a a", "a b", "a", "c a a b b c", "b b", "b", "b b a b", "c b b a a b b a b a b b b c a", "a", "a b a a b a a c a a", "b b b c b", "b a a a c", "c b", "b b c a a c", "b a b a b b b b b", "", "a b a b b b a a", "a a", "b a b b b b b b b a b b", "c b a b", "a c b a", "b", "b a b b b c a", "b b c", "a b b b b b c a c a", "b a a a a", "b b a c", "a b b b b b a b", "b a b", "b b b a", "a b a", "a b", "a b b c b c a c b a", "b b a c b", "b b a a a b a a a a", "b b b a b b", "b b a a b b a", "c b b", "", "b a", "b c b b a"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a a c b b b b b b", "log_prob": -50.33028507232666}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -66.29997563362122}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -55.72014570236206}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -55.72014570236206}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -82.50547862052917}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a c b b b b b b", "log_prob": -50.33028507232666}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -115.12263035774231}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a c b b b b b", "log_prob": -44.791561126708984}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -77.25904273986816}, {"text": "a a a a a a c b b b b b b", "log_prob": -50.33028507232666}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -60.94876670837402}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -71.96289873123169}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -82.50547862052917}, {"text": "a a a a a a c b b b b b b", "log_prob": -50.33028507232666}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -77.25904273986816}, {"text": "a a a a a a c b b b b b b", "log_prob": -50.33028507232666}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -55.72014570236206}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -55.72014570236206}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -60.94876670837402}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -71.96289873123169}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a a a c b b b b b", "log_prob": -44.791561126708984}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -60.94876670837402}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -152.71378564834595}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -66.29997563362122}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a a a a a c b b b b b", "log_prob": -44.791561126708984}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -71.96289873123169}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -66.29997563362122}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a a a a c b b b b b", "log_prob": -44.791561126708984}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -66.29997563362122}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -109.61815023422241}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "c", "log_prob": -17.493195295333862}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -71.96289873123169}, {"text": "a a a a c b b b b", "log_prob": -39.45353174209595}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a a c b b b", "log_prob": -34.133378744125366}, {"text": "a a c b b", "log_prob": -28.752270460128784}, {"text": "a c b", "log_prob": -23.37593412399292}, {"text": "a a c b b", "log_prob": -28.752270460128784}]}, "epoch_10.pt": {"generated_sequences": ["c b a c b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b c b b b a c b c b a c a a a c b a c b b b a a a a c b b b b b a a a c c b b b b b a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a c a a a a a a c b b b b b b b a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b", "a a c b b b c c b a a c b a a a a a a a a c b b b b b b b b b a a c b a a a a a a a a a a a a a a c b b b b b b b b b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a c a c b b b b b b b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a c b b b b c a a a a a c b b b c b a a a a a a a a a b b b b b b b b a a a a a a a a a c b b b b b b b b b b b b b a c b b a a a c b b a a a a a a c b b c b b b b a a a a c a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b a a a a a c b b b b b b c b b a a a a a c b b b a a a a a a c b b b b b b b b b b a a c a c", "a c b b a a c b b", "c c a a a a a a a a c b b b b b b b", "a a a a a c b b b b b c b a a c b b c b a a a a a a a a a c b b b b b b b b b c b a a a c b b a a a a a a a c b b b b b b b b a a a a a a a a a a a a a a a c b b b b b b b b b b b a a a a c b b b b b b a a a a a a a a c b b b b b b b b b b b b a a a a a a a a c b b b b b b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a a c a a c", "a c a a a a a c b b b b b c a a a a a a a a a a a a a c b b b b b b b b b b b a a a a a c b b b b b b b a a a a a a a a a a a a c b b b b b b b b b b b b b", "b c a a a a a c b b b b", "a c b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b a a c b b b a a c b b c a a a a a a c b b b b b b b b a c a a a a a a a c b b b b b b a a a a c b b b a a a c b b b b a a a a c b b b b b b a c b c b a a a c b b b b a c a a a c a c b a c b b b a a c c b b a a a a a a a a a a a a a c b b b b b b b b b b b b b a a a a a a c b b b b b b a a a a a", "a a a c b b b c a a a a a a a c b b b b b b b b a a a a a a a c b b b b b a a a a c b b b b b b c c b c c b", "a a c b a a a a a a a a a a a a a a a a a c b b b b b b b b b b a c b b b b b b a a a a c b b b b b b a a a a a a a a a c b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b a a a c b b b b b a a c b b b a a c b b a c b b b b b b b c b b c b c a a a a a c a a a a a a a a a c b b b b b b b b a a a a a a c b b b b b c a c b b a a a a c b a a a c b b a a c b b b b b b b b b a a a", "c b a a a c b b b a a a c b b a a a a c b b b b b b b", "a a a a a a a c b b b b b a a a a a c b b b b b a a a a a c b b b b b b a a a a c b b b b b b b b a c b a a a a c b b a a a a a a a a c b b b b b b b b c b b b a c a a a a a a a a a a a a a c b b b b b b b b b b b b", "c b b b b c c a a a c b a a a a a a a c b b b b b b b b a a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a c b b b b b b", "a a a a a c b b b b a a c b c b b a a a a a a a a a a a c b b b b b b b b b b b b a a a c b b b b b b a a c b a a a a a a a c b b b b b b c a c b b a c", "a a a c b b a a a a a c b b b b b a a c b b b a a a a a a a c b b b b b b b a a a a a c b b b b b a a a a a a a a a a a a c b b b b b b b b b b b a a a a a a c b b b b b b a a c a a a a c b b b a a a a a a c b b b b b b a a a c b b b b b b b c b a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b a a a a a a a a a c b b b b b b b b b a a a a a a c b b b b b a a c b", "a a c b b a a a a a a c b b b b b b", "c b c c a a a a a a a a a a a c b b b b b b b b b b a a a a a a a a a c b b b b b b b b b c b a a a a a a a a a a c b b b b b b b b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a a a a a a c b b b b b b b b b a a a a a c b b a a a a a a a a a a c b b b b b b b b b a a a a a a c b b b b b b b b b a a a a a a a a a a a a a a a c b b b b b b b b b b b b a a a a a a a c b b b b b b b b b b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a a a a a a c b b b b", "a a a a a a a a a c b b b b b b b b a c b b b b c c b a a a c a a a a a a a a b b b b b b b a c b b a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b c b b b a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a a c b b b b b b a a a a a a a a c b b b b b a a a c b b b b b a a a a c b b b b b b b", "a a a c b b b a a c b b a a a a a a a b b b b b b b", "c c a a c b b c a a a a a a a a a a c b b b b b b b b b b c a a a a a a a c b b b b b b c a a a a a a a a c b b b b b b b", "a c b a a a a a a a c b b b b b b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a c a a a a a a c a a c b b a a a a a a a a a a a a a a a a a a a a a b b b b b b b b b b b b b b b b b b b b b b b b a a c a c c b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b a a a a c a c c a a c b a a a a a a a a a c b b b b b b b b b b a c b b", "a a c b b b c c a a a a a a a a c b b b b b b b b a a a a c b b b b a a a a a a a a c b b b b b b a a a a a c b b b b b b b a c b c a c b a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b c a a a a a a a a c b b a a c a a a c b b c b b b b b b b a a a a a a a a a c b b b b", "c b a a a a a c b b b b b a a a a a a a a a a a a c a a c b b b b b b b b b b b b", "a a a a a c b b b b", "a a a a c b b b b a a c b b b b b a a a a c b b c a a a a a a a b b b b b b a a a a a a a a a c b b b b b b b b b b b a a a a a a a c b b b b b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a a c b b b b b b b a a a a c b b", "c b a a a a c b b c a a a a a c b b b b b b a a a a a a a a a c b b b b b b a c b b b b a a c b b a c b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b a a a a a a a a a a c b b b b b b a a c b b b b b a a a c b b b b a a a a a a a c b b b b a a a a a a a a c b b b b b b b b b b b b a a a c b b b b b b a a a c c a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a", "a a a a a a a a a a a c b b b b b b b b b b c a a c c a a a a a a c b b b b b b b a c b a a a c b a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b a a a c b b b b b b b b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b c b b", "a a c b b a a a a c b b b b b b b a a a a a a a a a a a c b b b b b b b b b b b b", "a c b a a a c b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a c b a a a a c a c b b b", "a a c b b c b", "a a a a a a a a a a a a a a a a c b b b b b", "a c b b a a a c b b a c b b", "a a a c b b a a a a a a a a a c b b b b b b b b b b", "b a a c b b c a a a a a a c b b b b b b a a a a a a a a c b b b b b b b b b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b a a a c c a a a a c b b b b b b a a a a c b b b b b b b a a a a c b b b c c a a a a a a c a a c b a c b b b b b a c b b b a c a a a a a a a c b b b b b b b b b a a c b b", "a a a a a a c b b b b b b", "a c b b a a c b b a a a a c b b b b a a a a a a a a a c b b b b b b b b", "a a c b b b a a a a c b b b a a a a a a a a c b b b b b b b b b b b a a a a a a a c b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b", "a a a a a a a c b b b b b b a a a a a a a a c b b b b b b b b a a c b b a a a a a a c b b b b b b b a c b a a c b a a c b b b b a a a a a a a a a c b b b b b b b b a a c a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a c b", "a a a a a a a a c b b b b b b", "c a a b b b", "a a a a a a c b a c b b b b b b a a a a a a a c b b b b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b b b a a a a a a a c b b b b b b a c b b b c a a a a a a a a a c b b b b b b b b a a a a c b b b b b b b a a a a a a a a a a a a c b b b b b b b b a a a a a a a a c b b b b b b b b b b b a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a c b b b b b b b b a c b a a a a a a c b b b b b b a a a a a a c b b b b b b b b a a c b b b a a c b a a a c b b b a a a a a a c b b b b b b b b b a a a c a a a c b a a a a c b b b b b b b b b a a c a a a a a a a c b b b b b b b b b b a a a a a a c b b b b b b b b b a a a c a a c a a c b b b a a a a a a a a a a a c b b b b b b b b b b b b b b b a a a a a a a a a a a c b b", "a a a a a a c b b b b b a a a a c b b b b b c a a a a a c b a a a a c b b b b b b b c a a c b b", "a a a a c b b b b a c a a c b b b a a a a a a a c b b b b b b a a a a a a a a c b b b b b b b b a c b b a c b b a a a a c b b b c a a a c b b b b b", "a c b a c b c a a a a a a a a c b b b b b b b b b c a a a a a c b b b b c a a a a a a a a a a a c b b b b b b b b b b b b a a a a a a a a c b b b b b b b a a a a a a a a a c b b b b b b b b b b b a a a a a a c b b b b b b c b c a a c a a a a a a a a c b b b b b b b b a a c b b a a a c b b b b b a c b b c a a a a c b b b b a a a a a c b b b b b b b a c", "a a a a a a a a a a a a a a c b b b b a a a a c b b b b b b b b a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b"], "accuracy": 0.04, "train_overlap": 0.04, "res": [{"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.447715228423476}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.7572434935718775}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.951608208939433}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.951608208939433}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -9.028282200917602}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.447715228423476}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -11.279679594561458}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a c b b b b b", "log_prob": -6.322105368599296}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.480021551251411}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.447715228423476}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.339597133919597}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.208370719105005}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -9.028282200917602}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.447715228423476}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.480021551251411}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.447715228423476}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.951608208939433}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.951608208939433}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.339597133919597}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.208370719105005}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a a a c b b b b b", "log_prob": -6.322105368599296}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.339597133919597}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -14.00353711284697}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.7572434935718775}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a a a a a c b b b b b", "log_prob": -6.322105368599296}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.208370719105005}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.7572434935718775}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a a a a c b b b b b", "log_prob": -6.322105368599296}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.7572434935718775}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -10.768422251567245}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "c", "log_prob": -5.485992133617401}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.208370719105005}, {"text": "a a a a c b b b b", "log_prob": -5.764311449602246}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a a c b b b", "log_prob": -5.414532359689474}, {"text": "a a c b b", "log_prob": -5.1017963495105505}, {"text": "a c b", "log_prob": -5.022073816508055}, {"text": "a a c b b", "log_prob": -5.1017963495105505}]}, "epoch_100.pt": {"generated_sequences": ["c", "a a a a a c b b b b", "a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a c b b b b b b", "a a a a a a a a a c b b b b b b b b b b b", "a c b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a c b b b b", "a a a c b b b", "a a a a a c b b b b b b b b", "a a c b", "a a a a a a a c b b b b b b b b", "a a a a a a a a c b b b b b b b b", "a a c b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a a c b b", "c", "a a a a c b b b b", "a a a a a a a a c b b b b b b b b", "a a a a a a c b b b b b b b b b b b b b b b b", "a a c b b", "a a a a a a a a a a c b b b b b b b b", "a a a a a a a a a a c b b b b b b b b b b", "a a a c b b", "a a a c b b b", "a a a c b b b b", "a a c b b", "a c b", "a c b", "c", "a c b", "a a a a a c b b b b b", "a a a a a a a a a c b b b b b b b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b b b b b b b b b b b b", "a c b", "a a a a a a a a a a c b b b b b b b b b b b", "c", "a a a a a a a a a a a c b b b b b b b b b b", "a a a a a a c b b b b b b", "a a c b b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "a c b", "a a a a a a a a a a a a c b b b b b b b b b b b", "a c b", "a a a c b b", "c", "a a c b b b", "a a a a a a c b b b b b b", "a a a a c b b b", "a a c b b"], "accuracy": 0.56, "train_overlap": 0.56, "res": [{"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.5829740374174435}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.5318758374487516}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.892408314422937}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.892408314422937}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.290332423406653}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.5829740374174435}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.722809628641699}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a c b b b b b", "log_prob": -5.274077570444206}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.069603307085345}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.5829740374174435}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.115900575823616}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.690786774241133}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.290332423406653}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.5829740374174435}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.069603307085345}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.5829740374174435}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.892408314422937}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.892408314422937}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.115900575823616}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.690786774241133}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a a a c b b b b b", "log_prob": -5.274077570444206}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.115900575823616}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.592259198398096}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.5318758374487516}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a a a a a c b b b b b", "log_prob": -5.274077570444206}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.690786774241133}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.5318758374487516}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a a a a c b b b b b", "log_prob": -5.274077570444206}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.5318758374487516}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.488239780359436}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "c", "log_prob": -3.85645646660123}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.690786774241133}, {"text": "a a a a c b b b b", "log_prob": -4.8882261528633535}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a a c b b b", "log_prob": -4.604013586504152}, {"text": "a a c b b", "log_prob": -4.129120661673369}, {"text": "a c b", "log_prob": -3.859013221983332}, {"text": "a a c b b", "log_prob": -4.129120661673369}]}, "epoch_105.pt": {"generated_sequences": ["a a c b b", "a a c b b", "a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b", "a a c b b", "b", "a a a a a c b b b b b", "a c b", "a c b", "a a a a a a a a a a a a a a b b b b b b b b b b", "a c b", "c", "a a a c b b b", "a a a a c b b b b", "c", "a a a c b b b", "b", "a c b", "a a a a a a a c b b b b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a c b", "a c b", "c", "a a a a c b b b", "a a a a c b b b b", "a a c b b", "c", "a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b", "a a a c b b b", "c", "c", "a c b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a c b b", "a a c b b", "a a a a a c b b b b b", "a a c b b", "a a a a a c b b b b b", "a a a a a c b b b b", "a a a c b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a c b b b", "a a a a a a a a c b b b b b b b b b", "c", "c", "a a a a a a a a a c b b b b b b b b", "c", "a a a c b b b", "a a c b b"], "accuracy": 0.7, "train_overlap": 0.7, "res": [{"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.210212336038239}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.468175311223604}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -4.682401491241762}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -4.682401491241762}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.511802016204456}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.210212336038239}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.88055071249255}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a c b b b b b", "log_prob": -3.8398120044439565}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.231464200594928}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.210212336038239}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.0046421956212725}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.787464192515472}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.511802016204456}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.210212336038239}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.231464200594928}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.210212336038239}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -4.682401491241762}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -4.682401491241762}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.0046421956212725}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.787464192515472}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a a a c b b b b b", "log_prob": -3.8398120044439565}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.0046421956212725}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.69921615027124}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.468175311223604}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a a a a a c b b b b b", "log_prob": -3.8398120044439565}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.787464192515472}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.468175311223604}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a a a a c b b b b b", "log_prob": -3.8398120044439565}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.468175311223604}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.476780288066948}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "c", "log_prob": -2.80935444496572}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.787464192515472}, {"text": "a a a a c b b b b", "log_prob": -3.432124699727865}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a a c b b b", "log_prob": -3.1493236848327797}, {"text": "a a c b b", "log_prob": -2.814583374594804}, {"text": "a c b", "log_prob": -2.5208990574465133}, {"text": "a a c b b", "log_prob": -2.814583374594804}]}, "epoch_15.pt": {"generated_sequences": ["c a a a c b b b", "a a a a a c b b b b b b a a a a a c b b b b b a c b a a a a a a c b b b b b a a a a a a a c b b b b b b b b b", "a a c b b c a a c b b a a a a a a a a c b b b b b b b b b b a a a a a a a c b b b b a a a a c b b b b b b b b", "a a c b b b b c", "a a c b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b b a a a a a a a a c b b b b b b b b b b a a a c b a a a a a a a a a a c b b b b b b b b b b b a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a c b a a a a c b b b b b a a a c b b", "a a a a c b b b c b", "a a c b b a c b c b", "a a a a a a a c b b b b b b a a a b b b b b", "a a a a b b b b a a a a a a a a a a c b b b b b b b b b b a a a c b b b a a a c b b b b b a a a a a a c b b b b b b a c c a a a a a a a a a a c b b b b b b b b b", "b a a c b b", "a a c b b a a a a c b b b c c a c a a a a a a a a a c b b b b b b b b b b a a a a c b b b b b b a a a a a a a a c b b b b b b c b a a c b c", "a a a c b b b", "a c b c", "a a a c b b a a a a a a a a a a a a c b b b b c b b b b b b a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a c b a a a c b b b a a a c b b b a a a a c b b b c b a a a c b b a a a a c b b b b b b a a c b b a a a a a c b b b b b a a c a c b b b b b", "a a c b b", "a a a a a a a a a a a a c a a a a c b b b b b b b b b b b", "a a c b b a a c b b", "c a a a a a a c b b b b b b a c b a a a c b b b b a a a a c b b b b b", "c b", "a a c b b c a a c b b", "a a a a a c b b b b b a c b a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b", "a a a a a a c b b b b b b a a a a a a c b b b b b b a a a c b b b c b a a a a a a a a c b b b b b b b b c b", "a a c b b a a a a a a a a a c b b b b b b b b b b a a a a a a a a a a c b b b b b b b b b b c", "c a c b a a a c b b b a a a a a a a a a c b b b b b b b b b b", "c c a a c b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a c b a a c b b a a a a a c b b b b b a a c b b b a a a a a a a c b b b b b b", "c a a c b b a a c b b b", "a a a c b b b a c b c a a a c b b b a a a a a c b b b b b b", "a a a c b b b", "a c b b", "a a a a a c b b b b a a c b b", "a c b a a a c b b b a a c b b a c b a a a a a a a a a c b b b b b b b b a a a c b b b b b", "a a c b b a a a a a a c b b b b b b b c", "c c a a a a a c b b b b b a a c b b b a a a a a c b b b b a a a a a a a a c b b a a a a a a a a a c b b b b b b b a a a c b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b b b b b a a c a c b a a a a a a a c b b b b b b b b b", "a a a a a a c b b b b b a c b b b", "c a a a a a c b b b b b", "a a a a a c b b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b a a a c a c b a a a a a c b b a a a a a a c b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b b b c a c b a c b a c b", "a a a a a a a a a c b b b b b b a a a a a a a a a a a a c b b b b b b b b b b b b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b b b a a c b b b c b a a a a c b a a c b c c b b b a a a a a a a c b b b b b b b c a a a a c b b b b b a c b b a a a a c c a a a c b b b b b c b b a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b c b", "a c b a a a c b b b", "c b a a a a a c b b b b b b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a c b b a a c b b", "a c b b", "a a c b b a a c b b a a a c b b b a a c b b b", "a a a a a a a a a a a a a c b b b b b b b b b b a a a a a c b b b b b b b a c b a a a c b b b"], "accuracy": 0.06, "train_overlap": 0.06, "res": [{"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.35004414152354}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.569217433221638}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.789815877564251}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.789815877564251}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.589598455931991}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.35004414152354}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.575593166053295}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a c b b b b b", "log_prob": -5.072705212049186}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.377930035348982}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.35004414152354}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.267745766788721}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.856201946735382}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.589598455931991}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.35004414152354}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.377930035348982}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.35004414152354}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.789815877564251}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.789815877564251}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.267745766788721}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.856201946735382}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a a a c b b b b b", "log_prob": -5.072705212049186}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.267745766788721}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.761756092309952}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.569217433221638}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a a a a a c b b b b b", "log_prob": -5.072705212049186}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.856201946735382}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.569217433221638}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a a a a c b b b b b", "log_prob": -5.072705212049186}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.569217433221638}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.11687727412209}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "c", "log_prob": -3.1864227950572968}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.856201946735382}, {"text": "a a a a c b b b b", "log_prob": -4.639825977385044}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a a c b b b", "log_prob": -4.218965230509639}, {"text": "a a c b b", "log_prob": -3.7639616578817368}, {"text": "a c b", "log_prob": -3.341695388779044}, {"text": "a a c b b", "log_prob": -3.7639616578817368}]}, "epoch_20.pt": {"generated_sequences": ["a a a c c b b a a a a a c b b b b a a a a c b b b b b a a a c b b b a a a a a a a a a a c b b b b b b b b b b b", "a c b b b a a a a c b b b a a a a a a a a a a a a c b b b b b b b b b b b b b a c b", "a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b", "a a a c b b b", "c c", "a a a a a a a a a c b b b b b b b b b b b", "a a a c b b b c a a a a a a a a a a c b b b b b b b b b b a a a c b b", "a a a c b b b a a a a a a a c b b b b b b b a a a a a a c b b b b b b a c b b a a a a a a a c b b b b b b b a a a a a a a a a a a a c b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b", "a a c b b", "c a c b", "c b a c b", "a a a a a c b b b a a a a a c b b b b b b a a a a a a a a a c b b b b b b b b", "a a c b b a a a a a c b b b b b c a a c b a a a c b b b", "a a c b a a a a a a a a a a a a a a c b b b b b b b b b a a a a a a a a a c b b b b b b b b b b b b b a a a a a a a a a a a c b b b b b b b b b b b b a a a a a a a a a c b b b b b b b b b b a a a c b", "a a a a a a a c b b b b b b b a c c b", "a a c b b a a a a a a a a c b b b b b b b b c b", "a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "a a a c b b b a c a a c b b c b", "a a a a a c b b b b b a a c b b b", "a a a a a a a a a a a c b b b b b b b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b a a c a c b b b b a a a a a a a a c b b b b b b b a a a c b b b a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a c b b a a a a a a c b b b b b b c a a a a a a a a a a a a c b b b b b b b b b b b a a c b b", "a a c b b c b", "a a a a a a a a c b b b b b b a a a a a a a c b b b b b b b a a c b b b", "a a a a c b b b a a c b b b", "c b a a a a a c b b b b b", "a a a c b b b", "a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a a a c b b b a a a a a a a a c b b b b b b b b b b b b b b b", "c c", "a a c b b b b c b", "a a a a a c b b b b b", "a a a c b b b a c b", "a a a a a c b b b b a a a a a c b b b b b a c a a a c b b b b a a a a a a c b b b b b b", "c b c", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b", "a a a c b b c b", "a a a a c b b b a c b a a a a c b b b b b", "c c", "a a a a a a a a a c b b b b b b b b b b", "a c b b a a a c b b b a a a a a c b b b b b a a a a a a a a c b b b b b b", "a a a c b b b b b b a a c b a a a a a a a a a a c b b b b b b b b b b b", "a a a a c b b b b b a a c b b c b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a a c b b b b b b b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b", "c a c b", "a c b a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a c b b a a c b a c b b c b", "a a a a a a a a c b b b b b b b b b a c c a a a a a a a a c b b b b b b b", "a a a a a a c b b b b b b a a a a c b b b a a a a c b b b b a a c b b b a a a a a c b b b a c b b b b a a a a a a a a a a a c b b b b b b b b a c b b a a a c b b b a c b b a a a a a c b b b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a a a c b b a a a c b b b a a a a a c b b b b a a a a a a a a a c b b b b b b b b b b a a a a a a a a c b b b b b b", "a a a a a c b b b b a a a a a c b b b b"], "accuracy": 0.08, "train_overlap": 0.08, "res": [{"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.039060404058546}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.690927214222029}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.328017093241215}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.328017093241215}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.512110276147723}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.039060404058546}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.133852907922119}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a c b b b b b", "log_prob": -5.74531805049628}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.222712088841945}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.039060404058546}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.543425941839814}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.287766554392874}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.512110276147723}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.039060404058546}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.222712088841945}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.039060404058546}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.328017093241215}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.328017093241215}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.543425941839814}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.287766554392874}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a a a c b b b b b", "log_prob": -5.74531805049628}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.543425941839814}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.684441408142447}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.690927214222029}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a a a a a c b b b b b", "log_prob": -5.74531805049628}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.287766554392874}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.690927214222029}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a a a a c b b b b b", "log_prob": -5.74531805049628}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.690927214222029}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.824493338819593}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "c", "log_prob": -3.737011104822159}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.287766554392874}, {"text": "a a a a c b b b b", "log_prob": -5.151496691163629}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a a c b b b", "log_prob": -5.017178175039589}, {"text": "a a c b b", "log_prob": -4.705583792645484}, {"text": "a c b", "log_prob": -4.095144415274262}, {"text": "a a c b b", "log_prob": -4.705583792645484}]}, "epoch_25.pt": {"generated_sequences": ["a a a a a a a a a a a a c b b b b b b b b b b b", "a c b a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "a a a a c b b b", "a a a a a a a a c b b b b b b b b c c a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b a a a a a a a c b b b b b b b a a a a a a a a c b b b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b a a c b a a c b b b", "a a a a c b b b b a c a a a c b b b a a a c b b b a c a a a a a a a c b b b b b b b b", "a a a a c b b b b a a a a c b b b b a a a a a a a c b b b b b b a c b b", "c a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a c b b a a a c b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b a c b a a a a a a c b b b a a a a a a c b b b b b b b b b a a a a a c b b b b", "a a a a a a a c b b b b b b", "a a a a b b b b a a a a a a a a a a c b b b b b b b b b b a a c b a a a a a c b b b b b c b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a c b a a a a a a a a a a c b b b b b b b b b b b a a a a a a a c b b b b b b a a a c b b b a a a a a a a a a c b b b b b b b b", "a a a a c b b b", "c a a c b b", "a a a a a a a c b b b b b b b", "a a a a a a a a a a a c b b b b b b b a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a a a a a c b b", "a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b b", "a c b c b", "a a a a a a a a a a a a a a c a c b b b b b b b b b b b b c b b b b b b", "c a a a a a a a a a c b b b b b b b b b", "a a a a a c b b b b b", "a a a a c b b b b a a a a a a a a a a a c b b b b b b b b b b a a c b b b a c b a a a a a a a a c b b b b b b b b c", "a a a a a a a a a c b b b b b b b b", "c a a c b b", "c c", "a a a a a a c b b b b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b b a a a a a a a c b b b b b b b b a a a a c b b b a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a c b b a a c b b", "a a c b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b", "a a a c b b b", "c a a a a c b b b b", "c a a a c b b b", "a a a c b b b a c b", "a a a a c b b b", "a a a c b b b a a a a a a c b b b b b b", "a a a c b b b", "a a a a c b b b", "a c b a a a a a c b b b b b", "a a a a a c b b b b", "c a a a a a c b b b b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a c b b a a a a a a a a a a c b b b b b b b b b b", "a a c b b b a a a a a a c b b b b b a a a a a a a a c b b b b b b b b b", "a a a a b b b", "a a a c b b b a a a a a a a a c b b b b b b b b b", "a a a c b b b a a a a a a c b b b b b b b b b", "c a a a a a a c b b b b b b", "a a a a c b b b b a a a a c b b b b c", "a b a c b"], "accuracy": 0.1, "train_overlap": 0.1, "res": [{"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.57206848054193}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.462092597968876}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.011960945907049}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.011960945907049}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.329109033220448}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.57206848054193}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.062565543805249}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a c b b b b b", "log_prob": -5.432248181197792}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.797386662801728}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.57206848054193}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.25438181811478}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.638548918068409}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.329109033220448}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.57206848054193}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.797386662801728}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.57206848054193}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.011960945907049}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.011960945907049}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.25438181811478}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.638548918068409}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a a a c b b b b b", "log_prob": -5.432248181197792}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.25438181811478}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.922505748923868}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.462092597968876}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a a a a a c b b b b b", "log_prob": -5.432248181197792}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.638548918068409}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.462092597968876}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a a a a c b b b b b", "log_prob": -5.432248181197792}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.462092597968876}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.71834229817614}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "c", "log_prob": -4.805058628320694}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.638548918068409}, {"text": "a a a a c b b b b", "log_prob": -5.1026914393296465}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a a c b b b", "log_prob": -4.845674028387293}, {"text": "a a c b b", "log_prob": -4.624460745137185}, {"text": "a c b", "log_prob": -4.515805502887815}, {"text": "a a c b b", "log_prob": -4.624460745137185}]}, "epoch_30.pt": {"generated_sequences": ["a a a a a a a a a a a c b b b b b b b b b b b", "a c b", "a a a c b b", "a a a a a a a c b b b b b b", "c a a a a a a c b b b b b b", "a a c b b b", "a a c b b b b b", "c b a a a a a a a a c b b b b b b b a c b", "a a c b b", "a a c b b", "a a a c b b b", "a a a a a a c b b b b b a c b c", "a c b b b b b a a c b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a a a a a a c b b b b b b b", "c b a a a a a a c b b b b b b", "a a a a a a a a c b b b b b b b", "a a a a a a a a a a a a b b b b b b b b b", "a c b b b b b a a a a a a c b b b b b b", "a a a a a a a a a a c b b b b b b b a a a a a a c b b b b b b b", "a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b a a a a c b b b b b", "a a a a a a c b b b b", "a a a a c b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b c b", "a a a a a c b b b b b", "a a a a a c b b b b b b b b b", "a a a c b b", "a c b b b b a a a a a a a a a a a a a c b b b b b b b b b b b b", "a a a a c b b b", "a a a a a a a a c b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b", "a a a a a a c b b b b b c", "a a c b b b", "a a a a a a a a a c b b b b b b b b", "a a a c b b b", "a a a c b b", "c b b b b b b", "a a a a a a a a c b b b b b b b b b b", "a a a a a c b b b b", "a a a c b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b", "a a a a a a a a a a c a a a a a a a a a a c b b b b b b b b b b b b b b b b b a c b c", "a a a a c b b b b b", "a a c b b b b", "a a a a a c b b b", "c c", "c b a a a a c b b b b", "a a a a a a c b b b b b b", "a a a a a c b b b b", "c b b a a a a c b b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b"], "accuracy": 0.2, "train_overlap": 0.2, "res": [{"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.468999011558481}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.404785737977363}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.754956764052622}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.754956764052622}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.205759858945385}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.468999011558481}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.69726187584456}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a c b b b b b", "log_prob": -6.181335015047807}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.888548803748563}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.468999011558481}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.083428332640324}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.569390938908327}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.205759858945385}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.468999011558481}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.888548803748563}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.468999011558481}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.754956764052622}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.754956764052622}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.083428332640324}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.569390938908327}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a a a c b b b b b", "log_prob": -6.181335015047807}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.083428332640324}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.402233490545768}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.404785737977363}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a a a a a c b b b b b", "log_prob": -6.181335015047807}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.569390938908327}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.404785737977363}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a a a a c b b b b b", "log_prob": -6.181335015047807}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.404785737977363}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.334837290283758}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "c", "log_prob": -5.202010251581669}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.569390938908327}, {"text": "a a a a c b b b b", "log_prob": -5.841734337620437}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a a c b b b", "log_prob": -5.539311347762123}, {"text": "a a c b b", "log_prob": -5.25289689359488}, {"text": "a c b", "log_prob": -5.063983012456447}, {"text": "a a c b b", "log_prob": -5.25289689359488}]}, "epoch_35.pt": {"generated_sequences": ["a a a c b b", "c", "a a a a c b b b b", "c a c b", "a a a a a a c b b b b b", "a c b", "a a c b", "a a c b b", "a a a a c b b b b", "a a a a a a a a c b b b b b b b", "a a a a a c b b b b", "a a a a a a a a a a c b b b b b b b b b", "a c b", "c a c b", "a a c b b", "c a a a c b b b", "a a a c b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a c b b b b", "a c b", "a c b", "a c b", "a a a a a c b b b", "a a a c b b b", "c c", "c a a a a a a a a a c b b b b b b b b", "c b a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b a c b b b b", "a a a a a a a c b b b b b b", "a a a a a a a a c b b b b b b b b", "c b a a a a a a c b b b b b b b", "a a c b b", "a a a a a a a a a a c b b b b b b a a c b b b b", "a a a a a a a a a c b b b b b b b b", "a a a a a a a a a c b b b b b b b b", "a c b b", "a a a c b b b", "a a a a a a a a a a c b b b b b b b b b b b", "a c b", "a a a a a a c b b b b b", "a c b", "a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b b", "a a a a a c b b b b b", "a a a a c b b b", "a a a a a a a a c b b b b b b b", "c", "c", "a a c b b", "a c b"], "accuracy": 0.46, "train_overlap": 0.46, "res": [{"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.030801287270151}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.977317529963329}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.287009763880633}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.287009763880633}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.828359392064158}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.030801287270151}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.226491104753222}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a c b b b b b", "log_prob": -4.784252691548318}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.3922853756230325}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.030801287270151}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.637507450708654}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.14815890690079}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.828359392064158}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.030801287270151}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.3922853756230325}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.030801287270151}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.287009763880633}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.287009763880633}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.637507450708654}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.14815890690079}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a a a c b b b b b", "log_prob": -4.784252691548318}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.637507450708654}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.348765100352466}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.977317529963329}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a a a a a c b b b b b", "log_prob": -4.784252691548318}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.14815890690079}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.977317529963329}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a a a a c b b b b b", "log_prob": -4.784252691548318}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.977317529963329}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -7.983667564752977}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "c", "log_prob": -3.4859014824032784}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.14815890690079}, {"text": "a a a a c b b b b", "log_prob": -4.484775690245442}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a a c b b b", "log_prob": -4.117484510235954}, {"text": "a a c b b", "log_prob": -3.7321904544951394}, {"text": "a c b", "log_prob": -3.53558783326298}, {"text": "a a c b b", "log_prob": -3.7321904544951394}]}, "epoch_40.pt": {"generated_sequences": ["a a a a c b b b b", "a a a b b", "c", "a a a c b b b", "a a a a a a a a c b b b b b b b", "a a a a a a c b b b b", "c", "a a c b b", "a a c b", "a a a a c b b b b", "a a a c b b", "a a c b b", "c", "a a a a a c b b b b", "a a a a a a c b b b b", "a c b", "c", "c", "a a c b b", "a a a a a a a a a c b b b b b", "a a c b", "a a a a c b b b", "c", "a a a a a c b b b b", "a a c b", "a a a c b b", "a a c b b", "a a a a c b b b", "a a c b b", "a a a a a a a a a a c b b b b b b b", "a a a a a a a c b b b b b b", "a a a a a a c b b b b", "c", "a c b", "a c b", "a a a a a a a c b b b b b", "a a c b b", "a a a a a a a a a a a c b b b b b b b b", "c", "a a c b b", "a a a c b b", "c", "a a c b b", "a a c b b", "a a a a a c b b b b b", "a a a c b b", "a a c b b", "c", "a c b", "a a a a c b b b"], "accuracy": 0.56, "train_overlap": 0.56, "res": [{"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.90409016009653}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -8.891340180882253}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.67515092092799}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.67515092092799}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -10.366838816844393}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.90409016009653}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -13.45096199325053}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a c b b b b b", "log_prob": -6.1511673627537675}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -9.581810041388962}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.90409016009653}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.144947413122281}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.231068202236202}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -10.366838816844393}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.90409016009653}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -9.581810041388962}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.90409016009653}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.67515092092799}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.67515092092799}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.144947413122281}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.231068202236202}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a a a c b b b b b", "log_prob": -6.1511673627537675}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.144947413122281}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -17.298526753787883}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -8.891340180882253}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a a a a a c b b b b b", "log_prob": -6.1511673627537675}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.231068202236202}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -8.891340180882253}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a a a a c b b b b b", "log_prob": -6.1511673627537675}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -8.891340180882253}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -12.71947382192593}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "c", "log_prob": -3.12159008346498}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.231068202236202}, {"text": "a a a a c b b b b", "log_prob": -5.510402005282231}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a a c b b b", "log_prob": -4.810798293270636}, {"text": "a a c b b", "log_prob": -4.016405728354584}, {"text": "a c b", "log_prob": -3.5422883747378364}, {"text": "a a c b b", "log_prob": -4.016405728354584}]}, "epoch_45.pt": {"generated_sequences": ["a a a a a a c b b b b b", "c", "a a a a a a a c b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b b", "c", "a a c b b a a c b b", "a a a c b b b b a c b", "a a a a a c b b b b b", "c b a a a a a c b b b b b", "a c b", "a a c b b b", "a a a a a a a a a a a a c b b b b b b b b b b b a a a c b b b", "a a a a c b b b a a c b b", "a a a a a a a a a a c b b b b b b b b b", "a a a a a a c b b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b a a a a a a c b b b b b b", "a a a c b b b a a a c b b b", "c b c", "a a a a a c b b b b a a a a a a a a a a c b b b b b b b b b", "c", "a a c b b b a a a a a c b b b b b", "a a a c b b", "a a a a c b b b b", "a a a a a a a a a c b b b b b b b b", "a a c b b c", "a c b b", "a c b", "a a a c b b b b", "a a a a c b b b a c b b", "a a a a c b b b c", "c", "a a c b b b", "a a a a a a a a a c b b b b b b b b", "a c b b a a a a c b b b b b", "a a a c b b b a a c b b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b c", "a a c b b b a a c b b a a a a a a a a a a a c b b b b b b b b b b b b", "a a a c b b", "a c b b a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b a a c b b b b", "a c b", "a c b b", "c", "a c b", "a a a a c b b b b", "a c b", "a a a a c b b b b", "c", "a a a c b b", "c b a c b", "c"], "accuracy": 0.36, "train_overlap": 0.36, "res": [{"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.264017462381162}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.202637069654884}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.5616833131352905}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.5616833131352905}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.234510877751745}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.264017462381162}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.15720437001437}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a c b b b b b", "log_prob": -4.949692249239888}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.9325284047517926}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.264017462381162}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.874067343160277}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.439397178095533}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.234510877751745}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.264017462381162}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.9325284047517926}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.264017462381162}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.5616833131352905}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.5616833131352905}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.874067343160277}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.439397178095533}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a a a c b b b b b", "log_prob": -4.949692249239888}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.874067343160277}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.390289777191356}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.202637069654884}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a a a a a c b b b b b", "log_prob": -4.949692249239888}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.439397178095533}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.202637069654884}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a a a a c b b b b b", "log_prob": -4.949692249239888}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.202637069654884}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.722941324173007}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "c", "log_prob": -3.035731978714466}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.439397178095533}, {"text": "a a a a c b b b b", "log_prob": -4.615204481204273}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a a c b b b", "log_prob": -4.29127682960825}, {"text": "a a c b b", "log_prob": -3.9883976499841083}, {"text": "a c b", "log_prob": -3.7800846911850385}, {"text": "a a c b b", "log_prob": -3.9883976499841083}]}, "epoch_5.pt": {"generated_sequences": ["c a a c b b b c b c a a a a a a a a a c b b a a a a a c b b b b b c b b b b b b b b b b b a a a a a a a a a a c b b b b b a a c b b b b b b b b b b c b b b c b c c c a a a a a a a a a a a a a a c b b a a a a a a a a c b b b b b b b b b b b b b b b b c b a c b a a a c a a a a a a a a a a a c b b b b a a a c b b b b b b b", "a c b b b c c a a a a a c b a a a a a c b b c b b b b b b a a a a c b b b a c b a a a a c b a a a c b b b b b b b b b b b a a a a a a a c b b b a a a a a a a c b b c b b b b b b b b b b b b b b b b b b a c b b b a c a a c b b b a a a a a a a a c b b b b b b b b b b b b b b b b a a a a a a a a a a a c b b b b b a a a a a a a a a a a a a a a a c b", "a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b a c b b b b b b b b b b b b b b b c b b b c b a a a a a c a c b b a c b a c b c b b a a a a a a a a a a a c a a c b b b b b b b b b b b b b b b b a a a a a a c b a a a a a a a a a a a a c b b b a a a c b b b b b b b b b b a a a a a c b a a a a a a a a c a c b b b b c b b b b b b b a", "c a a a a c b b b b b b b b b b b a a a a a a a a a a a a a c b b b a a c b b b b b b b b b b b b b b b b b b c b a c b b b b b a a a a a a c b b b b b b b a a a c a a a a a a c b a a a a a a c b b b b b b b b a a a a c a a a a a a a c b b b b b a a a c b b b b b b c b b b b b b b b a c c b a a a c b a c b b a a", "c b a a a c a a a a a a a a c b b a c b b a a a c b b b b b c b b b b b b b b b b a a a a a a a a a a c b b b b b b b b b b b b b b a a a a a a a a a c b b a c b b b b b b b b b b b a a a a a a c b a a a a c b b b c b b b a a a c b a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b a c b b b b b", "a a a a a c b b b b b b a a a b b b b b b b b b b b b b b c a a a c a c b b b a c b b a a a a a a a a c a a a a a c b a a a a a a a c b b b b b b b a a a a c a a c b b b b b b a a a a a a a a a a a c a a a a a a c b b b b b b b b b b b b a a a a a a a a a b b b b b b b b b b a a a a a a a a c b b b b b b c a a a a a a a a a a a a c b b b b", "c b b b b a a a a a a c b b b b b b c b b b a c c b b b c b b a a c b a a a a a c b b c b b b a a a a a a a a a c b b a a a a a c b b b a a c b a a a c a a a a a c b b b b b b b b b b b b b b b b c a a c b b b b b b b b b c b b b c b a a a a c b a c b b b c b b b b b b b b b b b a a a c b b a a a a c c", "c b a c b b b b b b c a a a a a a a a a a a c b b b c b b b b b b b b b b a c b b a c b b b c b b b b a a a a a a a a c b b b b b b a a a a a a a c b b b b c b b b b b b a c b a c b b b b b a a a a a a a a a a c b b b b a a a a c b b b b b b b b a c b b b b b b b b b b b b b b a a a c b b b a a a c b b a a c b b b c b b b b b b b b b b b b", "a a a c b b b b b b b a a a a a a a a c b b b b b b b b b a a a a a c b b b b b b c b b a a a a a a a a a a a c b a a a c b b b b b b b b b b b b a a a a a a a a a a a a a a a a a a a c b b b b b b c b b b b b b b b b b b b b b a c a a a a c b b b b b b a c a a c b b b b b b c b c a b c c a a c b b b a c b b b b b b a c b b b b b b a a a", "a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b c c b b b a a a a c b b b b b b b a a a a c a a c a a a a a a c b b b b b b b a c a a a a c b b b b b b b a c b b b b b b a a a a a a a a a c b b b b b b b b b b c b b b a a a a a a c b b b b a a a a a a a a a c b b b b c b c b b b b b b a a a a a a a a c b b b b b b b c b b b b b a a a a a a a a", "a a a c b b b b b b a a a a a a a a c a a a a a c b b b b b b b b b b a c b b b b b b b b b c b a a a c a a a a a a a c a a a c b b a c b a a a a a a a a a a a a a c b b b b b b b a a b b b b b b b b b b a a a a a a a a c b b b b a c b a c a a a a a a c b b b b b b c b b b b b a a a a a a", "a a a a a a a c b b b b b b b b b b b b a c b b b a a a a a a a a a a c b c b b b b b b b b b b b b a a a a a b b b b b a a b b b b b b b b b b b b a a a a a a a c b b b b b b b b b b b c b c b b b b b b b b b c b b c a a c c b b b b b b a c c b a a a a a a a a c b a a a c b b b c b b a a a a c b b a a a a a a c b b a a a c b b", "a a a a a a a a c b b b b b b b b b a a a a a a a a a a a a a c b b b b b b b a a a a a c b b b b b b b b b b b b b b b b a c b a a a a c b b b b b b b b b b b b b c b a a a a a c b a a a c a a a a a c b b b b b c b b b b b b a a a c a a a a c b b b b b b a a a a a c a a a c b a a a c b b b c a a a a a a a a a c b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a c b a a a a a a c b b b b b b b b c b b b b b b b a a a a a c b a c b a a a a a c b b a c b c b b b b b b b a a a a a a c b b b a a a c b b b b b b b a b b b b c b b b b b a a a a a a a a a a a a c b b b a a c b b b b b b b b b a a a a a a a c b b b a a c b a a a a a a c b b b b b b b b b b b b a c b a a a a a a a a a a a c b b b b b b", "a a a c b b b b b b b a a a c a a a a c b b b b b a c a a a a a a a a a a c b b b a a c b b b b b b b a a a c b b b b b b b b a a b b b b b b a a a a a c b b b a a a a a a a a a a a a a a c b b b c b b b b b a a a a c b b a a a c b b a a a a c b b b b b b b b b b b b c b b a a a a c b b b b b b b b b b a a c c b b b a c", "a a a a c b b b b c a a a a a a a a a c b c b b a c b b b b a a a a c a a a a a a a a a a c b b b b b a a a a a a a b b b b b b b b b a a a a c b b b b a a a c a a a c b b b b b b b b b c b b c b b b b b b a a c b b a a a a a a c b b b b b a a a a a a c b b c b a a a c b b a c b b b b a a a c a a a a a a a a a a c", "a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b a a a a a a a a c b b b b b b b b b b b b b b b b b b c a c b a a a a a a a a a a c b a a a a a a a a a a a a a a a a c a a a a a a a a a c b b b b b b b b b c b b b b b b b b b b b b b b b b b b a a a a c b c a a c b b b a a a b b b b b b b b b b a a a a a c a a a a a a c b c a", "c b b b b c b a a a a a a b a a a a a a c b b b b a a a a a a a a a a c b b b b b c b b b c a a a a a a a a c b b b b b b b b b a a c a a a a a a a a a a c b b b a c b b b b b b b a a a a a a a a a a a a c b c b b b b b b a a a a c b b b b b b b b b b b b b b b c b b a a a a c b b b b b b b b b b b b b b b b b b b b b a a a a a a a a a c b b b b b c", "a c b b b a a c b b b b b b b b b b b b b b b b b b b b b a a a a a a a a c a a a c b b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b a a c b b b b b b b b b a c b b a a c b b b b b a a a c b a a a a a a a c b b b b b b b b b b a a a a c b c b b b b b b b b b b b a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b c b b b b b b b b b b b", "a a a a a c b b b b b b a a a a c c b b b b b b a a a a a a a b b b b b b b b b a a a c b b b a a c a a a c b b a a c b b b b b b b b b b c b b b b b b b b b a a c b a a a a c b b a a c a a a a a a a a a c c b b b b b b a a a a c b b b b a a a a a a c c b b a a a a a a a c b b b b b b b b a a a a c b b a a c b b b b b b b b b", "c b b b a c b a a a a a a c b b b c b a a b b b b a a a a c b b b b b b a a a a a a c b b b b b b b a a b b b b b b b b b a a a a a a a a c b a c b a a a c b a c b b b b b b b a a a a a a c b b b b a a a a a a a a a c b a a a a c b b b b b a a c b b b b b b b b b b b b b b b b b b b b a a a a a a a a a a a c a a c b", "a c b b c b a a c b b b a a a a c b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b c b a c b b b b b b b b b b b b b b a a a c b b c b b b b a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b a a a a a a a a a c b b b b b b c b b b a a c b a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b a a a a a a a c b b b b b b b b b b b", "a c b b c b b a a a a a a a a c b b b b b b b b b b b b b b b b b b a a a a a a a c b b b b c b c b b b a b b b b b a a a c b b b a a c b a a a a a a c b a a a c b b b a a a a a a a a a a a c b a a a a a a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a a a c b b b b c a a a a c b a a a a a a a a a a c b b b b b b c b a c b", "a c b b a a a a a a c b b b b b b b b b b b b b b b b b a a a a a a c b b b b b c b b b b a a a a c b b b a a a a a a a a c a a c b b b b b c b b a a a a a a a a a a c b b b c b b b b b b a a c b b b a a a a a a c b b b b b a a a a a a a a a a a c c b b b c b b b b b b b b b b b b b b b b b b b b b b b b a c c b b b b b b b b b b b a a a a a a a", "a a c b c b b b b b b b c a a c a a a a a c c b b b b b b b b b b a c a a a b b b b b b b b a c c b a a a a a a a a a a a a a a a a a a a a c a a a a a a a a a a a a a a a a a a a b b b b b a a c b b b b b b b b b b b b b b b b b b b b b b c b b b b b b b b b b a a a b c a a a a a a a a a c a a a a a a c b b b c a a a c", "c b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b a c b b b b b b b b b b b b c b c b b b b b b b c b b b b c a a a a a a b a c b a a a a a a a c a a a a c a a a a c b b b b b b b b b b b b b b b a a a c b b b b b c a a a a a a a a a a a a a a c b b b b b b b b a a a a c a a c b b b a a a a a a a a a a a a a a a a a a a a", "a a c b b b b b b b b c b b b b b b c b b a a a a a a a b b b b b b b a a a c c a a a c a a c a a a a c b b b b b b b b b b b b b b c b b b b b b b b b b b c b b b c a c b b b c a a a c a a c a a a a a a c b b b b a a a a a a a a a c b a a a a a c c a a a a a a a a b b b a a a a a c b b b b b b b b b b b b b b b b b b b a", "a a a a a a c b b b b b b b b b b b b b b c a a a a c a a a a a c b b b b b b a a a a a a c b b b c b b b b a a a c b b b a a a a a a a a a a c a a c b b c b b a a a c b b b b b b b b b c a a a c b b a c b b b a a a a a a c b b b b b b a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a c b a a a a c a a a a a a a c b b b b b b b b b b b c", "a a a a c b b b b b b b b b b b a c a a a a a c b b b b b b b a a a a a a a a c a a a a b c c b b b b b b a a c c a a a c b b b b b b b b b c a a a c b a a a a a a a a a a a a a a a c b b b b b a a a a a a a a a a a a c b b a c b b b b b b b b b b b b b a c b b b b b b b b b a c b b b b b b b b b a a a a a a c b b b b a a a a a c b b b b", "a a a c b b b b b b b b b a a a c a a c b b b b b b b b b b a c a a a a a a a c b c b b b b b b b b b b a c b b b b b b b b a a c b b a a a a a a a c c c b b a a c c a c a a a a a c b b b b b b b b b a a a a a a a a a a c b b a a a c b b b b b b b a a a a a c b b b b b b b b a a a a c b b b b b b b b b b b b b c b c b b b a", "c b b a c b a c b a a a a a a a a a c b b b b a a c b b b b b b b a a a a b b b b b b b b b b a a c a b b b a a a a a a a a a a a a a a a c b b b b b a a c a a a c b b a a a a a a a a a a a a c c b b b b b a a a a a a c b b b c b b b b b b b b b b b b b a a a a a a c b b b b b b b b a a a a c b a a a a a a a a a a a a a a b b b b b b", "a a a a c b b b b b b b b c a a a a a a c b b b c b b a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b c b b b a c a a a a c a a a a a a c b b b b b b b b b b b b b a a a a a a a a a a c a a a a a a c a a a a c b b b b b b b b b b b b b b b a c b b b b b b a a a a a a a a a a a a c b a c b b b b b b b b a a a a a a a c b a c b b b b b b b b c b b b b b b b b b b b b b b a a a a", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b a c b b b a a a a c b b b b a a c b b a a a a a a a a a c b b b b b b b b b b b b b b b b b c b b b c a a a a a a a a a a a a a a c b b b b b b b b b b b b b b a a a a a a a c b b b b a a a a a a c b b b b b b b a a a a c b b c b b a a c b b b b b b b b b b b b b b b b b b a a a a a a c", "a c b c a a a a a c b b a a a c b b b b c b a c b b b a a a a a a a a c b b b b b b b b c b b a a a a a a a a c c b b a a a c b a a c b b b b b b b b a a c b b b b a a a a a c b b a a a a a a a a a a a a c b b b b b b b b b a c b b b b b b b a c b b b b b b b a a c a a a a c b b b b b b b b b b b b a a c b b b b b b", "a a a a a a a a a c b b b b b b b c b b b a a a a a a a a a a a a a a a a a a a c b b b b b b b b b a c b b b a a a a c b b b b b a a c b b b b b b b b b b b b b b b b b b b b b b a a a a a a a a c b a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b a a a a a a c b b b b b b b b b b a a a a a a a a a a a a a a c b b b b b b b a a a a c b b b a a a a a", "c a a a a c b b b b b b b b a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b a a a a a a a a a a a a b b b b b b c b b b b b b b b b b b b b a c c b b b b b b b b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b c b b b b a a a a a a a c b b a a a a c b b b b b b a a a a a a c b b a a a a c b b b", "c b c a c b b b b b b b b c b b a a a a a a a a a a c b b a a a a a a c b b b b b b b b b b b b b b b b b a a a a c b b b b b b b b b b a a a a c a c b b a c b b a c b b b b b b b b b b b b b b b b a a a a c a a c a a c b a a a a a a a a a a a a a a a c b b b b a a c b b b b b b b b b b b b a a a a a c c a a a a c b b b b c b b a a a a a", "a a a c b b b b b b a a a c b b b a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b a a a a a a a c b b b b b a a a a a c b b b b a a a a a a a c b b b b b b a a a a a a a a c a a a a a a c b b b b b b b b b a a a c b a a c b b b b b b a a a a c b b b b b a a c b b b b a c b b b b b a a a a a c b b b a c b b a a a a a a a a a", "c b b b b b b b b b b b b b b b a a a a a a a a a a a a a a c b b a a a a a a a c a a a a a c b b b b b b b b b b b b b a c b b b b a a c b b b b b c a a c b b b b b b b b b b b b b b b b c b b b b b b b a a a a c a a a a a a a a a c a c c b b b b b a a c a a a a a a a c b c b b b b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b a c", "b b b b b b b b b a c b b b b b a a a a a a a c b b b b b b c b b b b b b b a a a b b a a a a a a a a a a a a a c b b b b b b c b b b b b b b b b b b b b b b b b c a a a a a a a a a c b b b b b b a c c a c b a a a a c a a a a a a a a a c b b b b b b b a a a a a a a a a a b b b b c b b b b b b b b b a a c b b b b c b b b b a a c b c b", "a a a a a a a a a a a a a c b b b b b b b a a c b b b b b b b b b b b c a a c b b b b b c b a a a a c b b b b c b a a a c a c a a a a a a a c b c b b b b b b a c b a a a a a a c a a a a a c a c b b b b c a a c a a a a a a a a a a a a a a a c b b c b b b b b b b b b b b b b b b a a c b b c b b b b b b a a c b a a a c", "c b b b b a a a c b b b b b b c a a a a a a a a a a a a a a a a c b b b b b b b b b b b a a c b b b a a a c b b b b b b b b b b b b b b a a c b a a a a a a c b b b b b b b b b b b b b b b b a a a a a a a a a a a a a a a a a a a c b b a a c b b b b b b b b b a a c b b b a a a c b b b b b b a a a a c b b b b b b b a a c c a a a a a a a a a a a a a c b a a a a a a a", "a c b b b b c b b a a a a a a a a a a c b b b a b b b c c b b b a a a a c b b a a a a c b b b b b a a a c b b b b a a a c b a c b b b b b b b b b a a a a a a a a c a a a a a a c b a a a a a a a a a a a a a a a a c b b b b b b b a a a a a b b b b b b b b b b b b b b b a a a a a c b b b b b b b b b b b b b b b a a a a a a a a a a a a a b b b b b b c b b b b b", "c b b b b b a a a a a a a c b b b b b a a a a a a a c b b b b b b b b b c b b b b b a c b a c b b b b b a c b b b b b b b c a a a c a c a a a a a c b a a a a a a a a c b b b a a a a a a a a a a a a c b b b b b b b b b c b b b b b b b b c b a a c c b b a a a a c b b b b b a a a a a a a c b b b a a a a c b b", "a a a c b b b b b b b b a a c b a a a c b b b b b b b b b a c b b b b a a a c c b a a a a a c b a a a a a a c b b b b b b a a a a a a a a c b b b b b b b b b b b c b b b b b b b b b c b b b b a a a a c a a c a c b b b b b b a a a a a a a a c b c b a a a a a a a a a c b b b b b b b b b b b b c a a a a a a c a a a a c b", "a a a c b b b b b b c c b b a a c b b b b a a c b c b b c b a a a a a c b b b b b a a a a c a a a a a a a a b b b b b b b b b b b b b c b b b b b b b b b b b b a a c b b b b b b a a a a a a c b c b c b b b a a a a a a a a a a a a a c b b b b b b b b b b b b a a c c b b b b b b b b b c b b b b a a a a c b a a a a a a a a a a a a", "a a c b b a a c b b b b a a a c b b a a a a a a a a a a a a a a c b b b b b b b b b a c b b b b b b b b b b a c b b b b c a a a a a a a a c b c b a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b c b b b b b b b a a c a a a a a a a a a a a a a a a a a a a a c b a a a a a c b b b b b b a a c b a c b b b b b b b b a a a a a c b b", "a a a a c a a a a a a b b b b b c b b b b b b c b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b a a a a a a a a a c b b b b b b b b b b b a a a c b b a a c b b b b b b b a a a a a a c c b c b b a a c b b b b a c b b b b b b b a a a a a a c b b b b b a a a a a c a a c b b b b b c b a c c b b a a a a a a a a a a a c b b b b b", "c b b b b a a a a a a c b b b c b b b b a a a a a c a a c b b b b b b a a a c b b b b b a a a a a a a a a a a c b b b b b b b b b b b a c b b b b b b b b b b b b c b b b b b a a a a a a c b b b b b b b b b b b b b b b a c a c a a a a a a c b b b b b b b b b c b b b c a a a c b b c a a a a a c b b c b a a a c a a a a a a a a a a a a a a a a a a a a a c a a a a", "a a c b b b b b c b b b b b b c a a a a a a a c a a a a a a b b b b b b b a a a b b b a c b b b b b b b b b b b b b b b b b b a a a a a a a a c b b b b b a a a a c b a a a c b b b b c b b a a a c b b b b b b a a a a a a c b b b b b a a a a a a c b b b b b b b c b b b b b a a a a c b b b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b a a c b b b"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a a c b b b b b b", "log_prob": -8.17278952524066}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -9.353704802691936}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -8.568503092974424}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -8.568503092974424}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -10.320621326565742}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a c b b b b b b", "log_prob": -8.17278952524066}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -12.451256070286036}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a c b b b b b", "log_prob": -7.713999949395657}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -10.288682103157043}, {"text": "a a a a a a c b b b b b b", "log_prob": -8.17278952524066}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.947361961007118}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.750087011605501}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -10.320621326565742}, {"text": "a a a a a a c b b b b b b", "log_prob": -8.17278952524066}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -10.288682103157043}, {"text": "a a a a a a c b b b b b b", "log_prob": -8.17278952524066}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -8.568503092974424}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -8.568503092974424}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.947361961007118}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.750087011605501}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a a a c b b b b b", "log_prob": -7.713999949395657}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -8.947361961007118}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -14.869260430335999}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -9.353704802691936}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a a a a a c b b b b b", "log_prob": -7.713999949395657}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.750087011605501}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -9.353704802691936}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a a a a c b b b b b", "log_prob": -7.713999949395657}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -9.353704802691936}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -12.194856386631727}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "c", "log_prob": -5.419632732868195}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -9.750087011605501}, {"text": "a a a a c b b b b", "log_prob": -7.445555254817009}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a a c b b b", "log_prob": -7.150223433971405}, {"text": "a a c b b", "log_prob": -6.710377112030983}, {"text": "a c b", "log_prob": -6.154917925596237}, {"text": "a a c b b", "log_prob": -6.710377112030983}]}, "epoch_50.pt": {"generated_sequences": ["a c b b b", "a a a c b b b b", "a a a a c b b b b b", "a c b", "a a a a a a a c b b b b b b b b b", "c", "a a a a c b b b b b", "a a a a a a c b b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b", "a a c b b b", "c b", "c", "a a c b b", "c", "a c b", "c b", "a a a a a a a c b b b b b b b", "a c b", "a a c b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a c b b b b b b", "a a a a c b b b b b", "a a a a a c b b b b", "a c b b b", "c", "c b", "a a a a c b b b b", "a a a a a a a a a a c b b b b b b b b b b", "c", "a a c b b", "c b", "c", "a a a a a a a a a a a c b b b b b b b b", "c", "a c b", "a a a a c b b b b b", "c", "a a a c b b b b", "c", "a a a a a c b b b b b", "a a a c b b b", "c b", "a a a a a c b b b b b b", "a a a a a c b b b b b b", "a c b", "a a c b b", "a a a a c b b b b b b", "a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b", "c"], "accuracy": 0.54, "train_overlap": 0.54, "res": [{"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.304061612288933}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.161506130214548}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.569603816285962}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.569603816285962}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.211215387040284}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.304061612288933}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -10.14797321765218}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a c b b b b b", "log_prob": -5.982954653998604}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.7970776737784036}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.304061612288933}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.812578815792222}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.5254445042519365}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.211215387040284}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.304061612288933}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.7970776737784036}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.304061612288933}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.569603816285962}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.569603816285962}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.812578815792222}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.5254445042519365}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a a a c b b b b b", "log_prob": -5.982954653998604}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.812578815792222}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -12.592946939199464}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.161506130214548}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a a a a a c b b b b b", "log_prob": -5.982954653998604}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.5254445042519365}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.161506130214548}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a a a a c b b b b b", "log_prob": -5.982954653998604}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.161506130214548}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.66433285473613}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "c", "log_prob": -4.154295903164893}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.5254445042519365}, {"text": "a a a a c b b b b", "log_prob": -5.535462649597321}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a a c b b b", "log_prob": -5.176835864433087}, {"text": "a a c b b", "log_prob": -4.828250062884763}, {"text": "a c b", "log_prob": -4.522776206838898}, {"text": "a a c b b", "log_prob": -4.828250062884763}]}, "epoch_55.pt": {"generated_sequences": ["a a a a a a a c b b b b b b b", "a c b", "a a a c b b b b", "a c b", "c", "c", "a a a c b b b", "a c b b", "c", "a a c b b", "c", "a a a a a c b b b b", "c", "a a a a a a a c b b b b b b b", "c", "a a a a a a a a a a a a a c b b b b b b b b b b b b", "c", "c", "a a c b", "c", "c", "a c b", "a a a a a a a c b b b b b b b", "a c b", "a a a a c b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b", "a a a a a c b b b b", "a c b", "c", "a a a a a a c b b b b b b", "c", "c", "a a a a a a a c b b b b b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a a a c b b b b b", "c", "c", "c", "a a c b b b", "c", "c", "a c b", "a a a a a a a a c b b b b b b b", "c", "a a a a a c b b b b b", "a a a a c b b b b b", "a c b", "a a a c b b", "a a a a c b b b b b", "a a a a a a a c b b b b b b b b b b"], "accuracy": 0.68, "train_overlap": 0.68, "res": [{"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.9249973031983245}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.64282531462959}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.208249293180415}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.208249293180415}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.465979693603003}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.9249973031983245}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.14980241766898}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a c b b b b b", "log_prob": -4.656595079781255}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.222798705712194}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.9249973031983245}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.362166246573906}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.936035481252475}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.465979693603003}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.9249973031983245}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.222798705712194}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.9249973031983245}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.208249293180415}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.208249293180415}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.362166246573906}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.936035481252475}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a a a c b b b b b", "log_prob": -4.656595079781255}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.362166246573906}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -9.949398659577128}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.64282531462959}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a a a a a c b b b b b", "log_prob": -4.656595079781255}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.936035481252475}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.64282531462959}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a a a a c b b b b b", "log_prob": -4.656595079781255}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.64282531462959}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -7.610198078298708}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "c", "log_prob": -2.888015817850828}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.936035481252475}, {"text": "a a a a c b b b b", "log_prob": -4.332774054084439}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a a c b b b", "log_prob": -4.063984977721702}, {"text": "a a c b b", "log_prob": -3.7822139031486586}, {"text": "a c b", "log_prob": -3.5169948786497116}, {"text": "a a c b b", "log_prob": -3.7822139031486586}]}, "epoch_60.pt": {"generated_sequences": ["c b", "a a a a a a a a c b b b b b b b b", "b a a a c b b b b", "b", "b b", "a a a a a c b b b b b b", "a a a a a a c b b b b b b", "a a a a a a a a c b b b b b b b b b", "c b b", "a a a a a a a c b b b b b b b b", "a c b b b b b", "a a a c b b b b b", "b b b b b", "b", "a a a c b b b", "c", "a a a a a c b b b b b", "b b b b b b b", "a c b b", "b", "b b b b", "a a a a a c b b b b b", "b a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b b", "b b b b", "b", "a c b", "b", "a a c b b", "a a a a a a c b b b b b b b b", "b b b b b b b b b b b b b b b", "b b a a a a a c b b b b b", "c", "b", "b", "b a a a a a a c b b b b b b b", "b b b b b b", "b b a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "c", "c", "b a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a b b b b b b b b b b b b b b b b b b b b b b b b b a a a c b b b b b a a a a a a a a c b b b b b b b b", "b b", "b b b a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b b b b b", "b b b", "b", "a a a a c b b b", "b b b a c b b", "b a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b"], "accuracy": 0.22, "train_overlap": 0.22, "res": [{"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a a c b b b b b b", "log_prob": -7.038457309361547}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.719129954755772}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.33687109258608}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.33687109258608}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.455760330951307}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a c b b b b b b", "log_prob": -7.038457309361547}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.676101170305628}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a c b b b b b", "log_prob": -6.737947307381546}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.28558042109944}, {"text": "a a a a a a c b b b b b b", "log_prob": -7.038457309361547}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.537415923376102}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.913939402700635}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.455760330951307}, {"text": "a a a a a a c b b b b b b", "log_prob": -7.038457309361547}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.28558042109944}, {"text": "a a a a a a c b b b b b b", "log_prob": -7.038457309361547}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.33687109258608}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -7.33687109258608}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.537415923376102}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.913939402700635}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a a a c b b b b b", "log_prob": -6.737947307381546}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.537415923376102}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.095177468436304}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.719129954755772}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a a a a a c b b b b b", "log_prob": -6.737947307381546}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.913939402700635}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.719129954755772}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a a a a c b b b b b", "log_prob": -6.737947307381546}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.719129954755772}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.314643892867025}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "c", "log_prob": -3.69592547416687}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.913939402700635}, {"text": "a a a a c b b b b", "log_prob": -6.427250804175856}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a a c b b b", "log_prob": -6.128487598034553}, {"text": "a a c b b", "log_prob": -5.8138671767083}, {"text": "a c b", "log_prob": -5.513352063950151}, {"text": "a a c b b", "log_prob": -5.8138671767083}]}, "epoch_65.pt": {"generated_sequences": ["a c b", "a a a a a a a c b b b b b b b a a a a c b b b b", "a a a a c b b b b b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a c b b", "a c b", "a a c b b", "a c b", "a a c b b", "a a a a a a a a c b b b b b b b", "c", "c", "a a a a a a a c b b b b b b b a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b c b", "a c b", "", "a a a a a a a c b b b b b a a c b b", "a a a c b b b a a a a a a a c b b b b b b b", "a c b", "a a c b b", "c", "a a a a a a a a a a c b b b b b b b b b b", "a a c b b", "a a a c b b b", "a a c b b", "c", "a c b", "a c b", "a c b", "a a a a a a a a a a a c b b b b b b b b b b a c b", "c", "a a a c b b", "a a a a a a a a a a c b b b b b b b b b b a a a c b b b a a a a a a a c b b b b b b b", "a a a a c b b b b", "a a a a c b b b", "b a a a a a a a a a a a a a c b b b b b b b b b b b b", "a a c b b", "c", "a a a c b b", "a a a a a a a c b b b b b b b a c b", "c", "c b b b b", "c", "a a c b b b", "a a a a c b b b", "a a a a c b b b b", "a a c b b", "a a a a a a a c b b b b b a a a a a a a a a a a c b b b b b b b b b b b b", "a c b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b", "a a a a a c b b b b"], "accuracy": 0.58, "train_overlap": 0.58, "res": [{"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.8869661385251675}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.561608831339981}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.007758883642964}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.007758883642964}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.544582412898308}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.8869661385251675}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.322042491548928}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a c b b b b b", "log_prob": -4.510216529015452}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.251686642965069}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.8869661385251675}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.254383722087368}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.8044111875933595}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -6.544582412898308}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.8869661385251675}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -6.251686642965069}, {"text": "a a a a a a c b b b b b b", "log_prob": -4.8869661385251675}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.007758883642964}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.007758883642964}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.254383722087368}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.8044111875933595}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a a a c b b b b b", "log_prob": -4.510216529015452}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -5.254383722087368}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.892572801705683}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.561608831339981}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a a a a a c b b b b b", "log_prob": -4.510216529015452}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.8044111875933595}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.561608831339981}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a a a a c b b b b b", "log_prob": -4.510216529015452}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -5.561608831339981}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -7.937231595744379}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "c", "log_prob": -2.459425694309175}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -5.8044111875933595}, {"text": "a a a a c b b b b", "log_prob": -4.124038712529}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a a c b b b", "log_prob": -3.838870136823971}, {"text": "a a c b b", "log_prob": -3.4192308895871975}, {"text": "a c b", "log_prob": -3.1728332802886143}, {"text": "a a c b b", "log_prob": -3.4192308895871975}]}, "epoch_70.pt": {"generated_sequences": ["c", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a c b b b b b b b b", "a a c b b", "a a a a c b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b", "a c b", "c", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a c b b b", "a a a a a a a a c b b b b b b b b", "c", "a a a a a c b b b b b", "a a a a a a a c b b b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a c b b", "a a c b b", "a a a a c b b b", "a a a a c b b", "a a a a a a a a a c b b b b b b b b", "a a a a a a a a c b b b b b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a a c b b b b", "a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a c b b b b b b b", "a a a a a a a c b b b b b", "c", "a a a a a a a c b b b b b b b", "a a a a a c b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "c", "a c b", "a a a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a c b b", "a c b", "a c b", "c", "c", "a a a a a a c b b b b b b", "a c b", "c"], "accuracy": 0.48, "train_overlap": 0.48, "res": [{"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.958662853954593}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.780560171609977}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.27481140155578}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.27481140155578}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.70513083669357}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.958662853954593}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.288504403375555}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a c b b b b b", "log_prob": -5.7381568915443495}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.409907208755612}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.958662853954593}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.454314666829305}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.109230472065974}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.70513083669357}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.958662853954593}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.409907208755612}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.958662853954593}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.27481140155578}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.27481140155578}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.454314666829305}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.109230472065974}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a a a c b b b b b", "log_prob": -5.7381568915443495}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.454314666829305}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -12.096470017684624}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.780560171609977}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a a a a a c b b b b b", "log_prob": -5.7381568915443495}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.109230472065974}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.780560171609977}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a a a a c b b b b b", "log_prob": -5.7381568915443495}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.780560171609977}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.986767681199126}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "c", "log_prob": -3.5747497216798365}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.109230472065974}, {"text": "a a a a c b b b b", "log_prob": -5.37750779450289}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a a c b b b", "log_prob": -4.858912699914072}, {"text": "a a c b b", "log_prob": -4.254476836853428}, {"text": "a c b", "log_prob": -3.952265514526516}, {"text": "a a c b b", "log_prob": -4.254476836853428}]}, "epoch_75.pt": {"generated_sequences": ["c", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a a c b b b b", "a a a c b b b", "c", "a a a c b b b", "c b", "c", "c", "a a a a a a a c b b b b b b b", "a c b", "a a a a a a a a a a c b b b b b b b b b b b", "a a a a c b b b b", "c", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a a a a a a a a c b b b b b b b b b b", "c", "a c b", "a c b", "a a a a a c b b b b b", "c", "a a a a a a a a a a a c b b b b b b b b b b b", "a a a a c b b b b", "c", "a a a a a a a a a a a a c b b b b b b b b b b b b b", "c b b", "a a a a a a a a a a c b b b b b b b b b b b", "a c b", "a c b", "a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "c", "a a c b b b", "c b", "a c b", "c", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "c", "a c b", "a c b", "a a a c b b b b", "a c b", "a a a c b b b", "a c b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a c b", "a a a a a a a a a c b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b b b", "a a c b b"], "accuracy": 0.72, "train_overlap": 0.72, "res": [{"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.657524286478292}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.645441237225896}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.07694764281041}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.07694764281041}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.317512290232116}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.657524286478292}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -8.345735970709939}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a c b b b b b", "log_prob": -5.310611095599597}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.014964148722356}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.657524286478292}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.410630103229778}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.735326735099079}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.317512290232116}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.657524286478292}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.014964148722356}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.657524286478292}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.07694764281041}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.07694764281041}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.410630103229778}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.735326735099079}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a a a c b b b b b", "log_prob": -5.310611095599597}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.410630103229778}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -10.103675148362527}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.645441237225896}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a a a a a c b b b b b", "log_prob": -5.310611095599597}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.735326735099079}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.645441237225896}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a a a a c b b b b b", "log_prob": -5.310611095599597}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.645441237225896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.292445527622476}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "c", "log_prob": -3.6866834787651896}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.735326735099079}, {"text": "a a a a c b b b b", "log_prob": -4.915085747023113}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a a c b b b", "log_prob": -4.557930746697821}, {"text": "a a c b b", "log_prob": -4.207858402864076}, {"text": "a c b", "log_prob": -3.9058386318502016}, {"text": "a a c b b", "log_prob": -4.207858402864076}]}, "epoch_80.pt": {"generated_sequences": ["a a a a a c b b b b b b", "a c b", "c", "c", "c", "a a a a a c b b b b b", "c b", "a a c b b", "a a a a c b b b b b", "a a c b b", "a a a a a a a a a a c b b b b b b b b b b b", "a a c b b b b", "a c b", "a a a a a c b b b b b b", "a a a a c b b b b b", "c b b b", "a c b b", "a a a a a c b b b b b b", "a a a c b b b b b b", "a a a a a c b b b b b b b b", "a c b", "a a a c b b b", "a a a a c b b b b b b", "c", "a a a a a a a a a a a c b b b b b b b b b b b b b b", "a a a a a c b b b b b b b", "a a a a a c b b b b b", "a a a a a a a a c b b b b b b b b b b b", "a a a a a c b b b b b b", "c", "a a c b b b b", "a a c b b b", "c", "a a a c b b b b", "c c b b", "c", "a a a a a a a a a a c b b b b b b b b b b b b", "a a a a b b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b", "a a c b b b b", "a a c b b b", "a a a c b b b", "a c b", "a c b", "a a a c b b b", "a a a c b b b b b", "c b", "c b", "a a a a a a a c b b b b b b b b b", "a a a c b b b b b"], "accuracy": 0.38, "train_overlap": 0.38, "res": [{"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.607686475123046}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.777252951578703}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.978261061711237}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.978261061711237}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.832766019157134}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.607686475123046}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -10.163352807459887}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a c b b b b b", "log_prob": -6.093761411437299}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.436178247764474}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.607686475123046}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.335209090990247}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.120170342066558}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.832766019157134}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.607686475123046}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -8.436178247764474}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.607686475123046}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.978261061711237}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.978261061711237}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.335209090990247}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.120170342066558}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a a a c b b b b b", "log_prob": -6.093761411437299}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.335209090990247}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.486653943517013}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.777252951578703}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a a a a a c b b b b b", "log_prob": -6.093761411437299}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.120170342066558}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.777252951578703}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a a a a c b b b b b", "log_prob": -6.093761411437299}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.777252951578703}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -10.059658849029802}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "c", "log_prob": -3.151656205067411}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -8.120170342066558}, {"text": "a a a a c b b b b", "log_prob": -5.640366698906291}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a a c b b b", "log_prob": -5.0228938239160925}, {"text": "a a c b b", "log_prob": -4.476380055886693}, {"text": "a c b", "log_prob": -3.855861051590182}, {"text": "a a c b b", "log_prob": -4.476380055886693}]}, "epoch_85.pt": {"generated_sequences": ["a c b", "a a a c b b", "a a a a a a a a a a a a a a c b b b b b b b b b b b b b", "a c b", "a a a a a a a a a a a c b b b b b b b b b b b", "c", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a c b b", "c", "a a c c b", "a a a a a c b b b b", "a a a a c b b b", "a a a a a a a a a a c b b b b b b b b", "a a c b b", "a c b", "a c b", "a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "a a a a a a a a a a c b b b b b b b b b", "a a a a a a a a a c b b b b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a a c b b", "a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a c b b b b b b", "a a a a a a c b b b b b", "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a a a a a a c b b b b b", "a a a a c b b b a a a a a a c b b b b b", "a c b", "c", "a a a a c b b b", "a a a a a a a a a c b b b b b b b b", "a a a a a a a a a a a c b b b b b b b b b b", "a a a c b b b", "a c b", "a a c b b", "a a a a c b b b", "a a a a a a a a a a a c b b b b b b b b b b", "c", "a a c b b", "a a a a a a a a c b b b b b b", "a a a a a a c b b b b b", "a c b", "a a a a a a c b b b b b", "a a a a a a a a a c b b b b b b b b b", "a a a c b b", "a a c b b", "a a a a a a c b b b b b b", "a a a a a a a a a a a a a a a c b b b b b b b b b b b b", "a c b", "a a c b b"], "accuracy": 0.48, "train_overlap": 0.48, "res": [{"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.757024432561593}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.987982294318499}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.336028104124125}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.336028104124125}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.711990279931342}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.757024432561593}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.614893761638086}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a c b b b b b", "log_prob": -5.606342808925547}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.478497120901011}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.757024432561593}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.677692752506118}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.15949012018973}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.711990279931342}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.757024432561593}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.478497120901011}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.757024432561593}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.336028104124125}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.336028104124125}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.677692752506118}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.15949012018973}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a a a c b b b b b", "log_prob": -5.606342808925547}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.677692752506118}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -12.302036984328879}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.987982294318499}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a a a a a c b b b b b", "log_prob": -5.606342808925547}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.15949012018973}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.987982294318499}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a a a a c b b b b b", "log_prob": -5.606342808925547}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.987982294318499}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.354368766536936}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "c", "log_prob": -3.8810781580395997}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.15949012018973}, {"text": "a a a a c b b b b", "log_prob": -5.1770398461667355}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a a c b b b", "log_prob": -5.036747346166521}, {"text": "a a c b b", "log_prob": -4.039671867853031}, {"text": "a c b", "log_prob": -3.6572506179800257}, {"text": "a a c b b", "log_prob": -4.039671867853031}]}, "epoch_90.pt": {"generated_sequences": ["a a a a a a a c b b b b b b b b b", "a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b b b b", "a c b", "a a a a a c b b b b b", "c c b", "c", "a c b b", "a a a a a a a a a a c b b b b b b", "c", "a a a a c b b b b", "a a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b", "a a c b b", "a c b b b", "c b", "a a a a c b b b b", "a a a a a a a a a a a a c b b b b b b b b b b", "a a a a c b b b b b", "a a a a a a a a a a a c b b b b b b b b b", "a a a a c b b b b b", "a a a a a a a a a c b b b b b b b b b", "a a a a a a c b b b b b b b", "a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a c b b b b b b b b b b b b", "c", "a a c b b", "a a a a a a c b b b b b b b b b", "a a c b b b", "c", "a a a a c b b b b b", "a c b b", "a a a c b b b b", "a a c b", "a c b", "a a a c b b b", "a a c b b", "a c b b", "c", "a a a a a a c b b b b b b b", "a a a c b b b", "a a a a a c b b b b b b b b b b b", "c", "a a a c b b b", "a a a a c b b b b b", "a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a c b b", "a a a c b b b", "a a a a a c b b b b b b b", "a a a a c b b b b b b"], "accuracy": 0.4, "train_overlap": 0.4, "res": [{"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.403138488240074}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.393621267459821}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.764811890985584}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.764811890985584}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.291735384002095}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.403138488240074}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -10.079277434299001}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a c b b b b b", "log_prob": -6.147744459391106}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.977458485896932}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.403138488240074}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.011973599641351}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.673019625246525}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -8.291735384002095}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.403138488240074}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.977458485896932}, {"text": "a a a a a a c b b b b b b", "log_prob": -6.403138488240074}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.764811890985584}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -6.764811890985584}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.011973599641351}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.673019625246525}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a a a c b b b b b", "log_prob": -6.147744459391106}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -7.011973599641351}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -12.282006770838052}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.393621267459821}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a a a a a c b b b b b", "log_prob": -6.147744459391106}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.673019625246525}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.393621267459821}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a a a a c b b b b b", "log_prob": -6.147744459391106}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -7.393621267459821}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -9.836281926720403}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "c", "log_prob": -4.765464428812265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -7.673019625246525}, {"text": "a a a a c b b b b", "log_prob": -5.797100431052968}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a a c b b b", "log_prob": -5.450167395232711}, {"text": "a a c b b", "log_prob": -5.1285200656275265}, {"text": "a c b", "log_prob": -5.0785631004255265}, {"text": "a a c b b", "log_prob": -5.1285200656275265}]}, "epoch_95.pt": {"generated_sequences": ["a c b b", "a a c b b b", "a c b", "a c b", "a a a c b b b b", "a a a a a a a a a a a a c b b b b b b b b b b b b", "a a a c b b b", "a a c b b", "a a a a a a c b b b b b b b", "a c b", "c", "a a a c b b b", "a a a c b b", "a a a a c b b b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b", "a a a c b b b b", "a a c b b b b", "a a c b b", "a a a c b b b", "a a a a a a a a a a c b b b b b b b b", "a a a a a a c b b b b b b", "a a a a a a a c b b b b b", "a a a a a a a c b b b b b b", "a a c b b", "a a a a c b b b", "a a a c b b b b", "a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b", "a a c b b", "a a a c b b", "a a c b b", "a a a a a a a a a c b b b b b b b b", "a a a a a a a a a a a a c b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b", "a a a a c b b b b", "c", "c", "a c b b", "c b b", "c", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b", "a a a a a a a a a c b b b b b b b b b", "a a c b b", "c", "a a a a a a c b b b b b b b", "a a a a a a a a c b b b b b b b b", "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "a a a a c b b b b b", "a a c b b", "a a a a a c b b b b b", "a c b"], "accuracy": 0.52, "train_overlap": 0.52, "res": [{"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.501175598852569}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b", "log_prob": -9.217918857262703}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.167536443885183}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a a a a a a a a a a a a c b b b b b b b b b b b b", "log_prob": -7.501175598852569}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a c b b b b b b b b b b b", "log_prob": -7.167536443885183}, {"text": "a a a a a a c b b b b b b", "log_prob": -5.414766990288626}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a c b b b b b b b", "log_prob": -5.702089213242289}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a a a a c b b b b b b b b", "log_prob": -6.08571092505008}, {"text": "a a a a a a a a a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b b b b b b b b b", "log_prob": -11.364067924470874}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a a a c b b b b b", "log_prob": -5.0168464023736306}, {"text": "a a a a a a a a a c b b b b b b b b b", "log_prob": -6.4484321885393}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a a a a a a a a a a a a a a a a a c b b b b b b b b b b b b b b b b b", "log_prob": -8.959993858501548}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "c", "log_prob": -3.391164457425475}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a a a a a a a a a c b b b b b b b b b b", "log_prob": -6.8266910062520765}, {"text": "a a a a c b b b b", "log_prob": -4.579149732773658}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a a c b b b", "log_prob": -4.226632117090048}, {"text": "a a c b b", "log_prob": -3.8242228158924263}, {"text": "a c b", "log_prob": -3.532536858750973}, {"text": "a a c b b", "log_prob": -3.8242228158924263}]}}, "MutualRecursion": {"best.pt": {"generated_sequences": ["a b a b a b a b", "a b a b", "a b a b a b a b a", "a b", "a b a b a b a b a b", "a b a b a b a", "a b a b a", "a", "a b a b", "a b", "a b a b", "a b", "a b a b a", "a b", "a b", "a b a b a b a b", "a b", "a b", "a b", "a b a b a b a b", "a b", "a b a b a", "a b a b", "a b a b a b a b a b a b a b a", "a b a b a b a b", "a b a b a b", "a", "a b", "a b", "a b a b", "a", "a b a b a b a b", "a b a b a b a b", "a b a b a", "a", "a b a b", "a b a b a b a b a b a b", "a b a b a b a b a b a b a", "a b a b a b a b a b a", "a b", "a b a b a b", "a b", "a b a b a b a", "a b a b", "a b", "a b a b a b", "a b a b a b a b a b a b a", "a b", "a b", "a"], "accuracy": 1.0, "train_overlap": 1.0, "res": [{"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b", "log_prob": -4.582708701491356}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b", "log_prob": -3.5325495041906834}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.813933320343494}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b", "log_prob": -3.5325495041906834}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -8.48116159439087}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.813933320343494}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -6.237002125009894}, {"text": "a b a", "log_prob": -2.9469476090744138}]}, "epoch_0.pt": {"generated_sequences": ["b a b b a a b", "a a a", "a a a a a a a b b", "a a a b a a b a a a", "a a a b b a", "b b a a", "a a a", "a a a a a", "a a a a a b", "a a a b b a b", "b b b", "a a b a b a", "a b b a a", "a a a a b a", "b b a a", "b b a b a a a a a a a", "a a a a a a", "a a a b", "a a", "a a a", "b a", "b b b b b a a a a a", "a a a a b", "a a a", "b a", "b b a a b", "b a b a", "b a a b a b a a", "a a b a", "b a", "", "a a a", "a b b b b", "b a b a b b a a", "a b a a a b a a a", "a a b", "a b a", "a a b a a a", "b a b a a", "a b a a b a a", "a a a b b a a a a b", "a a a a", "b b a a", "a b a a a a a a", "a b a b a b", "b a a a b", "a a a a a a", "", "a a a b a", "a b b b"], "accuracy": 0.04, "train_overlap": 0.04, "res": [{"text": "a", "log_prob": -16.59801721572876}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b a b a b a b a b a", "log_prob": -49.016467332839966}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b a b", "log_prob": -45.40042448043823}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b a b a b a b", "log_prob": -52.16925597190857}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b", "log_prob": -38.80599570274353}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -61.76175403594971}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b a", "log_prob": -42.27853322029114}, {"text": "a b a b a b a", "log_prob": -35.96596431732178}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -61.76175403594971}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a b a", "log_prob": -35.96596431732178}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -64.92872142791748}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b a b a b a", "log_prob": -35.96596431732178}, {"text": "a b a b a b a b", "log_prob": -38.80599570274353}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a b a b a b a b", "log_prob": -45.40042448043823}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b a b a b a b a", "log_prob": -42.27853322029114}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b a b a b a b", "log_prob": -58.56700921058655}, {"text": "a b a b a b a", "log_prob": -35.96596431732178}, {"text": "a b a b a b a b a b a", "log_prob": -49.016467332839966}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a b a b a b", "log_prob": -45.40042448043823}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b a b a b a b a b", "log_prob": -58.56700921058655}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a b a b a b", "log_prob": -45.40042448043823}, {"text": "a b a b a b a b a", "log_prob": -42.27853322029114}, {"text": "a b a b a b a b a b a b a b", "log_prob": -58.56700921058655}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -97.27160167694092}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -64.92872142791748}, {"text": "a b a b a b a", "log_prob": -35.96596431732178}, {"text": "a b a b a b a b a b a", "log_prob": -49.016467332839966}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b a b a b a b a b", "log_prob": -58.56700921058655}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a b", "log_prob": -25.984498023986816}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a", "log_prob": -29.284497261047363}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a", "log_prob": -16.59801721572876}, {"text": "a b", "log_prob": -19.745975971221924}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -61.76175403594971}, {"text": "a b a", "log_prob": -23.12480902671814}, {"text": "a b a b a b", "log_prob": -32.39934849739075}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -71.31200242042542}, {"text": "a b a", "log_prob": -23.12480902671814}]}, "epoch_10.pt": {"generated_sequences": ["a b a b a b a a b a b a b a a a b a b a a b a b a b a b a b a b a b a b a b a b a a", "a a b a b a b a b a b", "a b a a b a b a b a a b a b", "a a b a a a a", "a b a b a a b a b a a b a b a b a a b a a b a b a b a b a b a a b a b a b a b a b a b a b a a b a b a a a b a a b a a a a b a a b a b a a b a b a b a b a a b a b a b a a b a b a b a b a b a b a a b a a b a b a b a a a b a b a b a b a b a b a b a b a b a b a a", "a b a a", "a b a b a b a a b a b a b a b a a b a b a", "a a b a b a b a b a b a b a b a a b a a a b a b a b a b a b a b a b a b a b a a b a b a b a b a b", "a b a b a b a b a b a b a b a a b a a a b a a b a b a a a b a b a b a a a a b a b a b a b a b a b a b a a a a b a b a b a b a b a a b a b a b a a a b a b a b a a b a b a b a a b a b a b a b a b a b a a a b a b a b a b a b a b a b a b a a b a b a a b a a a b a b a", "a b a b a a b a a b a b a b a b a a b a b a b a a b a b a b a b a b a b a a b a b a b a b a a b a b a b a b a b a b a a b a b a a b a b a b a a b a b a b a b a b a a a b a b a a b a b a a b a a b a b a b a b a b a", "a a a b a b a b a b a b a b a b a b a b a b a a b a b a b a a b a a b a b a b a b a b a b a b a b a a a b a b a b a a a b a a a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a a a b a b a a b a b a", "a a a b a b a a b a b a b a b a b a b a b a b a b a a b a b a a b a b a a b a b a b a b a b a b a b a a b a a b a a b a a a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a a b a a a b a b a a b a a b a b a b a b a b a b a b a b a a a b a b a b a", "a b", "a b a b a b a a b a b a b a b b a b a b a a b a b a b a a b a b a b a b a b a a b a b a a a b a b a b a a b a a a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a a a a b a a b a a a b a b a a b a b a a b a b a b a b a a b a b a b a b a b a b a b a b a b a a b a b a a b a b a b b a b a a", "a a b a", "a b a b a b a b a a b a b a b a b a b a b a b a a b a b a a b a b a b a a b a b a b a b a b a a a b a b a b a b a b a b a b a b a b a b a a b a a a a b b a b a b a a b a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a b a a b a b", "a b a b a a b a b a b a a a a b a a b a b a b a b a b a a b a b a b a b a a b a b a a a a a b a b a b a a b a b a b a b a b a a b b a b a a b a b a b a b a a b a b a a a b a", "a b a a b a b a", "a a b a b a a b a b a b a b a b a b a b a b a b a a a b a a b a a b", "a a a b a b a b a b a b a b a a b a b a a a b a a a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a a b a b a b a a b a b a b a a a b a a a b a b a b a a b a a b a b a b a b a b a b a a b a b a b a a b a b a b a b a a a b a b a b a b a b a a b a b a b a", "a b a b a b a b a a a a a b a b a a a b a a b a b a b a b a b a a b a a a b a a b a a b a b a a a b a a b a b a a a b a a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a a b a b a b a b a a a b a a b a a a b a b a b a b a b a b b a b a b a a b a a a", "a a a b a a b a a b a a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a a a b a b a a b a b a a b a b a b a b a b a b a a b a b a b a a a b a b a b a b a b a b a a b a b a a b a a a a b a a a b a b a b a a b a b a b a b a b a b a b a b a b a b a a b a b a b a b", "a a b a a a a a b a b a b a b a a b a b a a b a b a b a b a a a a a a a b a b a", "a a a b a b a a b a a a a b a b a b a b a a b a a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a a b a a b a b a b a b b a b a b a b a a b a b a b a b a a b a b a b a b a b", "a a b a a", "a", "a a b a a b a b a a", "a a b a b a b a a b a b a a b a b a b a b a b a a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a a b a b a b a b a", "a a a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a a a b a b a a", "a a b a b a b a b a a b a a a b a b a b a b a a b a b a b a b a b a a b a b a b a b a a b a b a b a b a b a a a b a a b a b a b a b a a a b a b a a a b a a b a b a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a a a a b a b a b a", "a b a", "a a b a b a b a a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a a", "a a a b a a a b", "a a a a b a b a b a b a b", "a b a b a b a b a b a b a b a b a", "a b a b a b a", "a a b a b a b a a b a b a b a a b a b a b a b a a a a b a b a b a b a b a a a b a b a b a a b a b a a a b a a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a", "a a b a b a a b a a b a b a a b a b a b a b a b a a a a b a a b a b a a b a b a b a b a b a b a a b a a b a b a b a b a a b a a b a b a b a b a a b a b a b a b a b a a b a a b a b a a b a a b a b a b a a b a a b a b a b a a a b a b a b a a b a b a b", "a b a a b a a b a b a a b a b b a a b a b a b a a", "a b a b a a b a b a a", "a a b a b a a b a a", "a a b a b a a a b a b a b a a a b a b a b a b a b a b a b a b a b a a a a b a a b a b a b a b a b a b a b a a b a b a b a a a a b a b a b a b a b a b a b a b a b a a b a b a a b a a a b a a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a a a b a a b a", "a a b a b a b a b", "a b a b a a a b a b a a b a b a b a", "a b a a b", "a a b a b a b a a b a b a b a b a a b", "a b a b a a a a", "a b a b a b a b a b a b a b a b a", "a a a a", "a b a b a a a a a a a b a b a a a a b a a a b a a b a b a a b a b a a b a b a a b a b a b a b a b a a b a b a b a a b a b a b a b a a b a b a a a b a b a b a b a b a b a a a b a b a b a b a a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a a a"], "accuracy": 0.12, "train_overlap": 0.12, "res": [{"text": "a", "log_prob": -4.763417094945908}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b a b a b a b a b a", "log_prob": -9.478459388017654}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b a b", "log_prob": -9.538093745708466}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b a b a b a b", "log_prob": -10.357124850153923}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b", "log_prob": -8.836520045995712}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.028465755283833}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b a", "log_prob": -8.578345984220505}, {"text": "a b a b a b a", "log_prob": -7.769599959254265}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.028465755283833}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a b a", "log_prob": -7.769599959254265}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.905293121933937}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b a b a b a", "log_prob": -7.769599959254265}, {"text": "a b a b a b a b", "log_prob": -8.836520045995712}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a b a b a b a b", "log_prob": -9.538093745708466}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b a b a b a b a", "log_prob": -8.578345984220505}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.120073944330215}, {"text": "a b a b a b a", "log_prob": -7.769599959254265}, {"text": "a b a b a b a b a b a", "log_prob": -9.478459388017654}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a b a b a b", "log_prob": -9.538093745708466}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.120073944330215}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a b a b a b", "log_prob": -9.538093745708466}, {"text": "a b a b a b a b a", "log_prob": -8.578345984220505}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.120073944330215}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -15.29601290076971}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.905293121933937}, {"text": "a b a b a b a", "log_prob": -7.769599959254265}, {"text": "a b a b a b a b a b a", "log_prob": -9.478459388017654}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.120073944330215}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a b", "log_prob": -7.050274655222893}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a", "log_prob": -7.0161556005477905}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a", "log_prob": -4.763417094945908}, {"text": "a b", "log_prob": -6.095402397215366}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.028465755283833}, {"text": "a b a", "log_prob": -5.988561697304249}, {"text": "a b a b a b", "log_prob": -7.964229434728622}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -12.550417929887772}, {"text": "a b a", "log_prob": -5.988561697304249}]}, "epoch_15.pt": {"generated_sequences": ["a a b a a b a b a b a a b a b a b a a b a b a b a b a b a b a b a a a b a b a b a a b a b a b a a b a b a b a b a b a a a b a a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a a b a a b a b a a a b a b a b a a b a b a b a b a b a", "a a b a b a b a b a a b a b a b a b a b a b a a b a b a", "a b a b a b a b a b a b a b a b a b a a b a b a b a b a b b a b a b a", "a b a a b a b a b a b a b a b a b a a b a b a", "a a b a b a b a", "a a b a b a b a b a b a b a a b a", "a a b a b a b a b a a b a a b a b", "a b a a b a b a b a b a a b a b a b a b a", "a b a a b a b a b a a b", "a b a a b a a b a b a b a b a b a a a b a b a b a a b a b a b b a b a a b a b a a b a a b a b a a a a a b a a a a a a b a b a b a a b a b a b a a b a b a a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b a a a", "a a a b a b a a b a a a a b a b a a", "a a a a a b a b a a b a b a b a b a b a a b", "a a b a a a b a b a b a a b a b a b a b a a b a b a b a a b a b", "a b a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a b a a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a a a a b a b a b a b a a b", "a a b a b a b a b a b a a b a b a a a b a b a b a b a b", "a a a", "a b a b a a a b a b a b a a b a b a b a b a b a a b a b a b a b a b", "a b a b a a a a", "a b a a b a a b a b a b a b a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b", "a b a a", "a b a b a b a b a b a a a b a b a b a b a b a b a a b", "a b a b a b a b a b a b a b a b a b", "a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b b a a b a b a b a b a b a a a a b a a b a a b a b a b b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a a b a a b a b a b a b a b a b a b a b a a", "a b a b a a a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a a a b a b a a b a b a a b a b a a a a a a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a a b a b a b a", "a b a b a b a b a a b a b a", "a b a b a b a a b a a b a b a b a b a b a a", "a a b a b a b a b a b a b a b a b a b b a a b a", "a a b a b a a b a a b a b", "a a a b a b a a b a b a b a b a b a b a b a b a a b a b a b b a b a b a a b a a b a b a b a b a b a b a b a b a a b a a b a b a a b a b a a a b a a a b a a b a a b a b a b a b a b a a b a b a a b a b a b a a a a b a b a b a b a b a b a b a b a b a b a b a b a b", "a a b a b a a b a b a b a b a", "a a b a b a b a b a b a b a b a a a b a a", "a b b a b a", "a b a b a b a b a b a b a a b a b a b a b a b a b a a b", "a a b a b a b", "a a", "a b a a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b", "a a b a b a b a b a b a b a b a b a b a a a b a b a b a b a b a b", "a a b a b a b a b a a", "a b a a", "a b a b a b a a b a a b a b a a b a b a b a a b a b a b", "a a b a", "a b a b a b a b a b a b a b a b a b a a b", "a a b a b a a b a b a b a b a b a b a a b a b", "a a b a b a b a b a b a b a b a b a b a b a b a b a b a a a b a b a b a b a b a b a a b a b a b a b a b a b a a b a b a b a b a b a b a a b a a b a b a b a b a b a b a a b a a a b a a b a b a b a b a b a a b a a a b a b a b a b a b a", "a a b a b a b a b a b a a a b a b a b a b a b a a b a b a b a b a b", "a a b a b a a b a a b a a a a b a a b a b", "a b a b a b a a b a b a b a b a b b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a a b a a b", "a a a b a"], "accuracy": 0.02, "train_overlap": 0.02, "res": [{"text": "a", "log_prob": -5.653970912098885}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b a b a b a b a b a", "log_prob": -9.8609060049057}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b a b", "log_prob": -9.684840634465218}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b a b a b a b", "log_prob": -10.257555462419987}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b", "log_prob": -9.157662265002728}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -10.985900443047285}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b a", "log_prob": -9.197116512805223}, {"text": "a b a b a b a", "log_prob": -8.479864276945591}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -10.985900443047285}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a b a", "log_prob": -8.479864276945591}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.268812291324139}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b a b a b a", "log_prob": -8.479864276945591}, {"text": "a b a b a b a b", "log_prob": -9.157662265002728}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a b a b a b a b", "log_prob": -9.684840634465218}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b a b a b a b a", "log_prob": -9.197116512805223}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b a b a b a b", "log_prob": -10.724853377789259}, {"text": "a b a b a b a", "log_prob": -8.479864276945591}, {"text": "a b a b a b a b a b a", "log_prob": -9.8609060049057}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a b a b a b", "log_prob": -9.684840634465218}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b a b a b a b a b", "log_prob": -10.724853377789259}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a b a b a b", "log_prob": -9.684840634465218}, {"text": "a b a b a b a b a", "log_prob": -9.197116512805223}, {"text": "a b a b a b a b a b a b a b", "log_prob": -10.724853377789259}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -13.616017375141382}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.268812291324139}, {"text": "a b a b a b a", "log_prob": -8.479864276945591}, {"text": "a b a b a b a b a b a", "log_prob": -9.8609060049057}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b a b a b a b a b", "log_prob": -10.724853377789259}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a b", "log_prob": -7.878366783261299}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a", "log_prob": -7.937235958874226}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a", "log_prob": -5.653970912098885}, {"text": "a b", "log_prob": -7.1527606546878815}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -10.985900443047285}, {"text": "a b a", "log_prob": -7.090138576924801}, {"text": "a b a b a b", "log_prob": -8.453729562461376}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -11.826013524085283}, {"text": "a b a", "log_prob": -7.090138576924801}]}, "epoch_20.pt": {"generated_sequences": ["a b a a", "a a b a b a b a b a b a", "a b a a", "a a b a", "a b a a a b a b a b a b a b a b a b a", "a b a b a a", "a b a b a a", "a b a b a b", "a a b a b a b a b a b a b a b", "a b a b a b a b a b a b a b a", "a b a a", "a b a b a a b a", "a b a b a b a b a b a b a b a b a b a b a b", "a b a b", "a a", "a a b a b a b a b a b a b a b a b a b", "a b a b a a b a a b", "a b a b a b a b a b a", "a a", "a b a b a b a b a b a b a", "a b a b b a b a", "a b a b a b a b a a b a b a b a b a", "a b a b", "a b a b a", "a b a b a b a", "a a b a", "a b a b a b a b a", "a b a a b a b a b a b a b a b a b", "a a b a b a b a b a b", "a b a b a a b a b a", "a b a b a b a b", "a b a b a b a", "a b a a b a b a b a", "a a", "a b a b a b a a b a b", "a a b a b a b a b a b", "a b a a", "a b a a b a", "a b a a b a a b", "a b a", "a b a b a b a b", "a", "a a", "a b a b a b a b a b a b a b a b a a", "a a", "a b a b a b a b a a b a", "a a b a b b a a b a b a b a b a b a b a b a b a b a b a b", "a a b b a", "a b a b b a b a b a b", "a a b a"], "accuracy": 0.3, "train_overlap": 0.3, "res": [{"text": "a", "log_prob": -5.234087243676186}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b a b a b a b a b a", "log_prob": -8.006363023072481}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b a b", "log_prob": -8.117478301748633}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b a b a b a b", "log_prob": -8.678023060783744}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b", "log_prob": -7.644391238689423}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.917555533349514}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b a", "log_prob": -7.467748103663325}, {"text": "a b a b a b a", "log_prob": -6.9585223607718945}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.917555533349514}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a b a", "log_prob": -6.9585223607718945}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -9.624852132052183}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b a b a b a", "log_prob": -6.9585223607718945}, {"text": "a b a b a b a b", "log_prob": -7.644391238689423}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a b a b a b a b", "log_prob": -8.117478301748633}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b a b a b a b a", "log_prob": -7.467748103663325}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b a b a b a b", "log_prob": -9.100024744868279}, {"text": "a b a b a b a", "log_prob": -6.9585223607718945}, {"text": "a b a b a b a b a b a", "log_prob": -8.006363023072481}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a b a b a b", "log_prob": -8.117478301748633}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b a b a b a b a b", "log_prob": -9.100024744868279}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a b a b a b", "log_prob": -8.117478301748633}, {"text": "a b a b a b a b a", "log_prob": -7.467748103663325}, {"text": "a b a b a b a b a b a b a b", "log_prob": -9.100024744868279}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -11.740821212530136}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -9.624852132052183}, {"text": "a b a b a b a", "log_prob": -6.9585223607718945}, {"text": "a b a b a b a b a b a", "log_prob": -8.006363023072481}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b a b a b a b a b", "log_prob": -9.100024744868279}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a b", "log_prob": -6.670717839151621}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a", "log_prob": -6.54411381855607}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a", "log_prob": -5.234087243676186}, {"text": "a b", "log_prob": -6.2553602159023285}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.917555533349514}, {"text": "a b a", "log_prob": -5.9065230414271355}, {"text": "a b a b a b", "log_prob": -7.254698907956481}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -10.069435577839613}, {"text": "a b a", "log_prob": -5.9065230414271355}]}, "epoch_25.pt": {"generated_sequences": ["a b b a b a b a a b a b a", "a b a b a b a b", "a b a b a b a b a b a b", "a b a b a b a b", "a a", "a b a b a b a b", "a b a b b a", "a b a b a b a b a b a b a b a b a b a b a b a b", "a b b a b a b a b", "a b a b a b a b a b a b a b a b a b a b a b a", "a b a a b a b a b a b a b a b a b", "a b a b a b a b a b a b a b", "a b a b a b a b", "a b a b a b a b", "a b a b a b a b a", "b a b a b a b a", "a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a", "a a b a b a b a b a b", "a b a b a b a b", "a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a b a", "a b a b a b", "a b a b a b a b", "a b a b a b a b a", "a b a b a b a b a b a b a", "a b a b a b a b a b a", "a b a", "a b a b a b a a b a b a b", "a b a b a b a b a b a b a b a b a b", "a b a", "a b a b a b", "a b a b a b a b a b a b a", "a b a b a b a b", "a b a b a b a b a b", "a b a b a b a b a b a b a b", "a b a b a b a b a b a b a b a", "a a b a b a", "b a b a b a b a b a b a b a b a b a b a b a b a b a b a", "a b a b a", "a b a b a a b", "a b a b a b", "a b a b a b a b a b a b", "a b a b a b a b a", "a a b a b a b a b a b a b a b", "a b a b a b a b a b", "a b a b b a b a b a b a b a b a a b a b a b", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a"], "accuracy": 0.74, "train_overlap": 0.7, "res": [{"text": "a", "log_prob": -6.666491895914078}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b a b a b a b a b a", "log_prob": -7.962628975510597}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b a b", "log_prob": -7.5249232947826385}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b a b a b a b", "log_prob": -7.871131926774979}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b", "log_prob": -7.167071405798197}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.461969327181578}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b a", "log_prob": -7.569735709577799}, {"text": "a b a b a b a", "log_prob": -7.3302822932600975}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.461969327181578}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a b a", "log_prob": -7.3302822932600975}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.489283613860607}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b a b a b a", "log_prob": -7.3302822932600975}, {"text": "a b a b a b a b", "log_prob": -7.167071405798197}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a b a b a b a b", "log_prob": -7.5249232947826385}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b a b a b a b a", "log_prob": -7.569735709577799}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.153210002928972}, {"text": "a b a b a b a", "log_prob": -7.3302822932600975}, {"text": "a b a b a b a b a b a", "log_prob": -7.962628975510597}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a b a b a b", "log_prob": -7.5249232947826385}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.153210002928972}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a b a b a b", "log_prob": -7.5249232947826385}, {"text": "a b a b a b a b a", "log_prob": -7.569735709577799}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.153210002928972}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -9.856074191629887}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.489283613860607}, {"text": "a b a b a b a", "log_prob": -7.3302822932600975}, {"text": "a b a b a b a b a b a", "log_prob": -7.962628975510597}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.153210002928972}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a b", "log_prob": -6.5392535626888275}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a", "log_prob": -7.100860357284546}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a", "log_prob": -6.666491895914078}, {"text": "a b", "log_prob": -6.161467723548412}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -8.461969327181578}, {"text": "a b a", "log_prob": -6.846307598054409}, {"text": "a b a b a b", "log_prob": -6.839431278407574}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -8.814697593450546}, {"text": "a b a", "log_prob": -6.846307598054409}]}, "epoch_30.pt": {"generated_sequences": ["a b a a a b a b a b a b", "a b a b a b a b a", "a b a b a", "a b", "a a", "a b a b a b a b a b", "a a b a", "a b a", "a a b a b a b a b a b a b a b a", "a b a b a b a b", "a a b a", "a b a b a b a b a", "a a b a b a b a b a", "a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a a b a", "a b a b a a b", "a b a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b", "a b a b a a b a b a b a b a b a b a b a b a b", "a b a b a b a", "a b a b a b a", "a b a b a b a", "a b a b a b a b a b a b a b a b", "a b a b a b a a", "a b a b a b a b a b a b a b a b a b a b a", "a b a b a b a a b a b a b a b a b", "a a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a b a b a b a b a", "a b a b a a b a b", "a a", "a b a b a b a b a b", "a b a b a", "a b a b a b a", "a b a b a b a", "a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a", "a", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a", "a b a b a b a", "a a b a b", "a b a b a b a b a b a b a", "a", "a b a b a b a", "a b a", "a a", "a b a b a b a b a", "a b a b a b a b a b a b a b a b a b"], "accuracy": 0.68, "train_overlap": 0.66, "res": [{"text": "a", "log_prob": -4.678451828658581}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b a b a b a b a b a", "log_prob": -6.331861408427358}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b a b", "log_prob": -6.395488806068897}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b a b a b a b", "log_prob": -6.835836913436651}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b", "log_prob": -6.077599368989468}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.235536731779575}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b a", "log_prob": -5.905547935515642}, {"text": "a b a b a b a", "log_prob": -5.6688559129834175}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.235536731779575}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a b a", "log_prob": -5.6688559129834175}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -7.580573163926601}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b a b a b a", "log_prob": -5.6688559129834175}, {"text": "a b a b a b a b", "log_prob": -6.077599368989468}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a b a b a b a b", "log_prob": -6.395488806068897}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b a b a b a b a", "log_prob": -5.905547935515642}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.170616025105119}, {"text": "a b a b a b a", "log_prob": -5.6688559129834175}, {"text": "a b a b a b a b a b a", "log_prob": -6.331861408427358}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a b a b a b", "log_prob": -6.395488806068897}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.170616025105119}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a b a b a b", "log_prob": -6.395488806068897}, {"text": "a b a b a b a b a", "log_prob": -5.905547935515642}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.170616025105119}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -9.309343156404793}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -7.580573163926601}, {"text": "a b a b a b a", "log_prob": -5.6688559129834175}, {"text": "a b a b a b a b a b a", "log_prob": -6.331861408427358}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.170616025105119}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a b", "log_prob": -5.442846350371838}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a", "log_prob": -5.274978339672089}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a", "log_prob": -4.678451828658581}, {"text": "a b", "log_prob": -5.0944759324193}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.235536731779575}, {"text": "a b a", "log_prob": -4.932176113128662}, {"text": "a b a b a b", "log_prob": -5.5748914778232574}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -7.981655620038509}, {"text": "a b a", "log_prob": -4.932176113128662}]}, "epoch_35.pt": {"generated_sequences": ["a b a b a b", "a", "a b b a b a a b a b a b a b", "a b a a b a b a b a", "a b a b a", "a b a b a b a", "a b a a", "a b a b a b a b a b a", "a b a b a b a", "a b a b a b a b a b a", "a b a b a b a", "a b a b a b a b a b a b a b a b a b a b", "a b a", "a b a b a", "a b a b a b a b a", "a b a b a", "a b a b a b a b", "a b a b a b a b a b", "a b a b a b a b a b a b", "a b a b a b a", "a b a b a b a b a b a b a b a b", "a b a b", "a b a b a b a", "a b a b", "a b a b a b a", "a b a b", "a b a b a b a b a b a b a b a b a b a", "a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b", "a b a b a b a b", "a b a b a b a", "a b a b a b", "a b a b a b a b a b a b a", "a a b a b a b a", "a a b a b a b a b a b a", "a b a", "a a b", "a b a", "a b", "a b a b a b a b a b a b a", "a b a b a b a b a b a b a b", "a b a b a b a b a b", "a b a b a b a b a b a b a b a b a b a b", "a b a b", "a b a b a b a b a", "a b a b a b a", "a b b a b a b a b", "a b a b", "a a", "a b a b a b a b"], "accuracy": 0.82, "train_overlap": 0.78, "res": [{"text": "a", "log_prob": -4.289855748414993}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b a b a b a b a b a", "log_prob": -5.8913554064929485}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b a b", "log_prob": -5.664978811517358}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b a b a b a b", "log_prob": -6.069796804338694}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b", "log_prob": -5.326511979103088}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.613034493289888}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b a", "log_prob": -5.464553592726588}, {"text": "a b a b a b a", "log_prob": -5.129371251910925}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.613034493289888}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a b a", "log_prob": -5.129371251910925}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.857202851213515}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b a b a b a", "log_prob": -5.129371251910925}, {"text": "a b a b a b a b", "log_prob": -5.326511979103088}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a b a b a b a b", "log_prob": -5.664978811517358}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b a b a b a b a", "log_prob": -5.464553592726588}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.4491124246269464}, {"text": "a b a b a b a", "log_prob": -5.129371251910925}, {"text": "a b a b a b a b a b a", "log_prob": -5.8913554064929485}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a b a b a b", "log_prob": -5.664978811517358}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.4491124246269464}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a b a b a b", "log_prob": -5.664978811517358}, {"text": "a b a b a b a b a", "log_prob": -5.464553592726588}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.4491124246269464}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -8.657609979622066}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.857202851213515}, {"text": "a b a b a b a", "log_prob": -5.129371251910925}, {"text": "a b a b a b a b a b a", "log_prob": -5.8913554064929485}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.4491124246269464}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a b", "log_prob": -4.657019209116697}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a", "log_prob": -4.818653985857964}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a", "log_prob": -4.289855748414993}, {"text": "a b", "log_prob": -4.2506334483623505}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.613034493289888}, {"text": "a b a", "log_prob": -4.528497561812401}, {"text": "a b a b a b", "log_prob": -4.903713434934616}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -7.2448567831888795}, {"text": "a b a", "log_prob": -4.528497561812401}]}, "epoch_40.pt": {"generated_sequences": ["a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b", "a b a b a b a b a b a b a", "a b", "a b a b a b a", "a b a b a b a a b a", "a b a b a b a b a b", "a b a", "a b a b a b a b a", "a b a b a b a b a b a b a", "a b a b a b a", "a b a b a b a", "a a b a b", "a b a b a b", "a b a b a b a b a", "a b a b", "a b a b a b", "a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a", "a", "a b a", "a b a b a b a b a", "a b a b a b a b a b a", "a b a b a b a", "a b", "a b a b a b a b a b a b a", "a b a b a b a b", "a b", "a a", "a b a b a", "a b a b a b a", "a b a b a b a b a b a b a b a b a b a b a b a b a", "a a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a b", "a b a", "a b a b a b a b a", "a b a b a", "a b a b a b a", "a b a b a b a b", "a b a b a", "a b a a b a b a b a b", "a b a b", "a b a b a b a b a b a b a b a b a b a", "a b a b a b a", "a b a b a b a b a b a b a", "a b a b a b a", "a b a b a b a", "a b a b a b a b a b", "a b a b a b a b a b a b a b a a b a b a b a", "a b a b"], "accuracy": 0.88, "train_overlap": 0.82, "res": [{"text": "a", "log_prob": -5.148136742413044}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b a b a b a b a b a", "log_prob": -6.7234753193333745}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b a b", "log_prob": -6.717578180599958}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b a b a b a b", "log_prob": -7.062006704509258}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b", "log_prob": -6.309470255393535}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.614289835561067}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b a", "log_prob": -6.305444051511586}, {"text": "a b a b a b a", "log_prob": -5.930988999083638}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.614289835561067}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a b a", "log_prob": -5.930988999083638}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.069685299880803}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b a b a b a", "log_prob": -5.930988999083638}, {"text": "a b a b a b a b", "log_prob": -6.309470255393535}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a b a b a b a b", "log_prob": -6.717578180599958}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b a b a b a b a", "log_prob": -6.305444051511586}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.571687859483063}, {"text": "a b a b a b a", "log_prob": -5.930988999083638}, {"text": "a b a b a b a b a b a", "log_prob": -6.7234753193333745}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a b a b a b", "log_prob": -6.717578180599958}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.571687859483063}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a b a b a b", "log_prob": -6.717578180599958}, {"text": "a b a b a b a b a", "log_prob": -6.305444051511586}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.571687859483063}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -10.198638216592371}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.069685299880803}, {"text": "a b a b a b a", "log_prob": -5.930988999083638}, {"text": "a b a b a b a b a b a", "log_prob": -6.7234753193333745}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.571687859483063}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a b", "log_prob": -5.714148141443729}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a", "log_prob": -5.588082140311599}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a", "log_prob": -5.148136742413044}, {"text": "a b", "log_prob": -5.444870810955763}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.614289835561067}, {"text": "a b a", "log_prob": -5.263199627399445}, {"text": "a b a b a b", "log_prob": -5.913373066112399}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -8.508077698759735}, {"text": "a b a", "log_prob": -5.263199627399445}]}, "epoch_45.pt": {"generated_sequences": ["", "a b a b a b", "a b a", "a b", "a b a b", "a b", "a b a b a b", "a b a b a", "a b a", "a b a b a b a", "a b a", "a b a b a", "a b a", "", "a b", "a a b a b a", "a b", "a b", "a b a b", "a b a", "a b a b a b a b", "a b a b a b a", "", "a", "a b", "a b a b a b a b a", "a b", "a b a b a", "a b a", "a b", "a b a b a", "a b a b a", "", "a b a b", "a b a", "a a b a b a", "a b", "a", "a b a b a b", "a b", "a b", "a b a b a b a b a b a b a b", "a b a b a b", "a b a b a b a b a b", "a b a b a b a b a b a b a b a b", "a b a b", "a b a b", "a b a b a", "a b a b", "a b a b a b a b a b a"], "accuracy": 0.88, "train_overlap": 0.88, "res": [{"text": "a", "log_prob": -3.084098242223263}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b a b a b a b a b a", "log_prob": -6.204828783869743}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b a b", "log_prob": -5.222798176575452}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b a b a b a b", "log_prob": -5.81872566184029}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b", "log_prob": -4.545596712268889}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.513775080442429}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b a", "log_prob": -5.490805033128709}, {"text": "a b a b a b a", "log_prob": -4.870432823896408}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.513775080442429}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a b a", "log_prob": -4.870432823896408}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -7.2529897801578045}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b a b a b a", "log_prob": -4.870432823896408}, {"text": "a b a b a b a b", "log_prob": -4.545596712268889}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a b a b a b a b", "log_prob": -5.222798176575452}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b a b a b a b a", "log_prob": -5.490805033128709}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.562433780869469}, {"text": "a b a b a b a", "log_prob": -4.870432823896408}, {"text": "a b a b a b a b a b a", "log_prob": -6.204828783869743}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a b a b a b", "log_prob": -5.222798176575452}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.562433780869469}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a b a b a b", "log_prob": -5.222798176575452}, {"text": "a b a b a b a b a", "log_prob": -5.490805033128709}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.562433780869469}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -10.894525374751538}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -7.2529897801578045}, {"text": "a b a b a b a", "log_prob": -4.870432823896408}, {"text": "a b a b a b a b a b a", "log_prob": -6.204828783869743}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b a b a b a b a b", "log_prob": -6.562433780869469}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a b", "log_prob": -3.1982578532770276}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a", "log_prob": -4.18446802534163}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a", "log_prob": -3.084098242223263}, {"text": "a b", "log_prob": -2.581599785014987}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.513775080442429}, {"text": "a b a", "log_prob": -3.608876571059227}, {"text": "a b a b a b", "log_prob": -3.7321505760774016}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -8.017138633178547}, {"text": "a b a", "log_prob": -3.608876571059227}]}, "epoch_5.pt": {"generated_sequences": ["a b a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a a a a b a b a b a b a b a b a b a b a b a a b a b a b a a a b a a b a a a b a a b a b a b a a b a a a b a b a b a b a a b a b a b a a b a b a b a b a b a b a a a a b a b a a b a a b a", "a b a a a b a b b a b a b a a b b a b a b a a b a a b a b a a b a a b a b a b a b a b a b a b a b a a a b a b b a b a a b a a a b a b a b a b a b a b a b a a b a a b a b a b a a b a b a b a a b a b a b a b a b a b a b a b a a b a b a b a a b a b a b a a a b a a b a b a b a b a b a b a a b a a b", "b a a b a a a a a b a b a a a a a b a b a a b a a a b a a b a a b a b a a b a b a b a b a a b b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a a b a b a a b a b a b a a b a b a b a b a b a b a b a a b a b a a b a a b a b a a b a b a a b a b a b a a b a a", "a a a a b b a a b a b a a b b a b a b a b a a b a a b a b a b a b a a b a b a b a b a b a b a b a a a b a b a b a a b a b a b a b a b a a a b a b a a b a b a b a b a b a b a a a b a b a b a b a b a a b a a b a b a a a b a b a a a b a b a b a b a b a b a a a b a a b a b b a b a b a b a b a b a b a a b a a b a b a a", "a a b a a b a b a a b a b a b a a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a a a a a b a b a a b a b a b b a b a b a a b a a b a b a a a b a b a b a b a b b a b a a b a b a b a a b a a b a b a a a b a a a a b a a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b b a b", "a b a b b a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a a a b a b a a b a b a b a a b a a a b a b a b a a b a a b a a a a b a a a b a b a b a b a b a b a b a b a a b a a b a b a b a a a b a b a a a b a b a a b a b a b a a b a a a b a b a b a b a a a b a a b a a a b", "a b a b a b a a a a b a b a b a b a a b a a b a b a b a b a a a b a b a a b a b a a a a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a a b a a a b a b a a a a a b a b a a b a b a a b a b a b a b a b a b a b a b a b a a b a a b a a b a a b a a b a b b a a b a a b a a b a b a b a b a b a b a b a b a b a", "a a b a a a a b a a b a a b a b a a b a b a a a b a b a b a a b a b a b a b a a b a b a b a a a b a b a a b a a b a b a b a a b a b a b a b a b a b a b a b a b a b a a b a b a b a a a a b a a b a b a a b a b a a b a b a b a b a b a b a a b a b a a b a a b a b a b a b a", "a b a b a b a b a b a a a b a b a b a a b a a a b a a b a b a b a a b a b a a a b a b a b a b b a b a b a b a b a b a a a a b a b a b a b a b a b a a b a b a a a b a a a b a b a b a b a a a b a a a b a b a a a a b a b a a b b a a b a b a b a a b a b a b a b a a", "a b a a b a b a b a b a a b a b a a b a a b a b a b a b a a b a b a b a b a a b a b a a b a b a b a b a b a b a b a b a b a a a b a b a b a a a b a b a b a b a b a a b a a b a a b a b a b a b a b a b a a b a a b a a b a a a b a b a a b a b a b a b a a b a b a b a a a a b a a b a b a", "a b a b a a b a b a b a a a b a a b a b a b a b a a b a b a b a b a b a a b a b a b a b b a b a a a b a b a a b a b a b a b a b a a b b a b a a b a a a b a b a b a b a b a b a b a b a b a b a b a b b a b a b a b a b a b a b a a b a b a b a a b a b a b a a b a b a b a b a b a a b a a b a b a a b a b a a b a b a b a a a b a b", "a b a b a b a b a b a b a a b a b a a b a b a b a a b a b a b a a b a a b a b a b a b a b a b a a b a a a b a b a b a b a a b a b a b a b a b a b a b a a b a b b a b a a b a b a b a b a b a a a b a a b a b a b a a b a b a a b a b a b a b a b a b a b a b a a b a b a a b a b a b a b a b a a b a b a", "a a a a b a b a b a b a a b a a b a b a b a b a b a b a b a a b a b a a a b a b b a a b a a b a b a b a b a b a a b a b a a b a a a b a a b a b a b a a a b a a a b a b a b a b b a b a a a b a b a b a b a b a b a b a b a b a a b a a b a b a b a a b a a b a b a b a b a b a b a a b a b", "a b a a b a b a b a b a b a b a a b a b a b a b a b a a b a a b a b a b a a a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a a b a b a b a a b a b a a b a b a b a b a a b a a b a b a b a b b a b a b b a a a b a a a b a b a b a b a b a b a a b a b a b a b a b a b a a b", "a b a b a a b a b a b a b a b a b a b a a a a b a b a a b a b a b a b a b a b a a b a b a b a b a b a a b a b a b a b a a b a b a b a a a b a b a b a b a a b a b a b a b a a b a b a a b a b a b a a b a b a b a b a a b a b a b a b a b a a b a b a b a a a b a b a b a b a b a b a b a b a b a a a b a b a b a a a a b a", "a a a b a b a b a a a b a b a b a b a b a b a a b a b a b a a a b a b a a b a a a a b a b a b a a b a b a a b a a b a b a a b a b a b a b a a a b a b a b a b b a b a b a b a b a a b a b a b a a a b a a b a b a b a b a b a b a b a b a b a b a b a a b b a b a a b a a b a b a b a a b a b a b a b a b a b a b a a b a b a a a b a b a b a", "a b a b a a b a a b a b b a b a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a b a b a a b b a b a b b a b b a b a b a a a b a b a b a a b a b a a a b a a b a b a b a b a b a a b a b a a b a b a b a a b a b a b", "a b a b", "a b a b a b a a b a b a a b a b a a a a b a b a a b a b a b a a b a a a a a b a a b a b a b a a a b a a b a b a b a b a a a b a b a b a a b a b a b a b a b a b a b a b a a b a b a b a b a b a a b a b a b a b a b a a b a a b a a a b a b a b a b a a b a b a b a a a a b a b a a b", "a a b a a b a b a b a b a a b a a b a b a b a b a b a a b a b a b a b a b a a b a b a b a b a a a b a a b a a a b a a a b a b a b a b a b a b a b a b a a b a b a b a a a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a a b a b a a b a b a b a b a b a b a a a b a b a b a b a b a", "a a b a a a a a b a a b a a b a b a b a b a a b a b a b a a b a b a a b a b a b a b b a a b a a b a b a b a b a b a b a b a a a a b a a a a b a b a b a b a b a a b a b a b a b a a a b a a b a b a b a a a b a b b b a b a a b a b a b a a a b a b a b a b a b a b a b a b a b a a b a b", "a b a b a b a b b a a b a b a b a b a b a b a b a b a b a a a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a a b a b a b a a b a a a b a b a b a b a b a a a b a a b a a b a b a b a b a a b a a b b a b a b a a b a b a b a b a b a b a b a a a a a b", "a b a b a a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a a a b a a b a b a a b a a b a a b a b a b a b b a b a b a b a b a a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a a a a b a a a b a b a b a a b a b a b a a a b a a a b a a a b a b a b a b a b a b a a a b a b a b a b a b a b a b", "a a b a b a b a b a b a b a b a b a b a a a b a a a b a b a b a a a b a b a b a b a b a b a b a b a a b a b a b a b a a a b a a b a b a a b a a b a b a b a b a b a b a a b a b a a a b a b a b a b a b a b a b a a b a a a b a b a a a b a a b a b a b a a a b a b a b a a a a b a b a b a b a b a a a b a a", "a b a b a a b a b b a b a b a a b a b a b a b a b a a a b a b a b a b a b a b a b a b a b a b a b a b a b a b b a b a b a b a b a b a b a b a a b a b a a b a b a b b a b a b a a b a a a b a a b a b a b a a a b a b a a b a b a b a b a a b a b b a b a b a b a b a b a a b a b a b a a a a b a b a b a b a b a b a b a a b a b a a b a b a b a a a b a a b a b a b a a", "a a b a a a b a b a b a b a b a b a b a a a a b a b a b a b a b a a a b a b a a a b a b a a b a b a b a b a b a b a a b a b a a a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b b a a a b a b a b a b a a a a b a b a b a a b a b a b a b a b a b a", "a b a a b a a b a b a b a b a b a b a a b a b a a b a b a b a b a b a b a b a b a a b a b a a b a b a a b a b a a b a a b a b a b a b a b a b a b a b a a a a a b a a b a a a b a b a a a b a b a b a b a b a b a b a a b a a b a a b a a b a b a b a a b a", "a a a a a a b a b a a a a b a b a a a b a b b a b a a a a b a b a b a b a b a b a a b b a b a b a b a b a a a a b a b a b a a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a a b a b a b a a b a b a b a b a a b a b a b a b a a b a a b a b a b a b a b a b a b a b a a b a", "a b a a b a b a b a b a a b a b b a b a a b a b a b a a b a a b a b a b a b b a a b a a b a b a b a b b a b a b a b a b a b a a b a a b a b a b a b a a b a a b a a b a b a b a a b a b a b a b a b a b a a b a b a a a b a b a a b a b b a b a b a b a b a a b a b a a b a a b b a b a", "b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a a a a b a a a b a a b a a b a b a a b a b a b a a b a b a a b a b a b a b a b a b a a b a a a a b a b b a b a b a b a b a b a b a b a b a b a a a a a b a b a b a a b a b a b a b a b a b a a b a b a a b a b a b a b a a b b a b", "b", "a a a b a a a b a a b a b a a a b a b a b a b a b a b a b a a b a b b a a b a b a b a b a b a b a b a a b a b a a a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a a b a b a b a b b a b a b a a b a b a b a b a b a b a b a b b a b a b a b a a b a b a b a a b a b a b a a", "a a b a a a b a b a b a a b a", "a a b a b a b a a b a b a b a a b a b a b a b a a b a b a b a a b a a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a a b a b a b a b a a a a a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a a b a b a a b a b a b a", "a b a a b a", "a b b a b a b a b a b a a b a b b a a a b a b a b a b a a b a a a b b a a b a a b a b a b a a b a b a b a a a a b a b a b a b a a b a b a b a b a b a b a b a b a a a b a a b a a b a b a b a b a b a b a b a a b b a b a b a a b a a b a b a b a b a b a b a b a", "a a b a a b a b a a a b a b a b a b a b a b a b a a a b a b b a b a b a b a b a a b a a b a b a b a b a a b a b a b a a b a b b a b a b a b b a b a a b a a a a a b a a b a b a b a a b a b a a b a a b a a a a b a b a a a b a a b a b a b a b a b a a b a b a b a b a b a b a b a a b a b a b a b", "a b a a b a b a b a b a a b a a a a a b a a a a b a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a a a a b a b a b a a a a a b a a b a b a b a b a b a b a b a a a b a b a b a b a b a b a b a b a b a a b a a a b a a b a b a a b a a a b a a b a b a b a b a b a", "a b a b a b a b a b a a a b a b a b a b a b a b a a a b a a b a a b a a b a b a b a a b a b a b a a b a b b a b a b a a b a b a b a b b a b a b b a b a a a b a b a a b a b a b a b a b a a b a b a a b a b a a b a b b a b a b a b a a a a b a b a b a b a b a b a b a a a a b a b a b a b a b a a b", "a b a b a b a b a a b a b a a b a b a b a b a a b a b a b a a b a b a b a b a b a b a b a b a a b a b a b a b a a b a a b a b a b a b a a a a b a b a b a b a b a a b a b a b a b a a b a b a b a b a b a b a a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b b a a b a", "a a a b a b a a b a a a b a b a b a a b a a b a b a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a a b a a a b a a b a b a b a b a b a b a a a b a b a b b a b a b a a b b a b a b a b b a b a b a b a b a a b a b a b a a b a b a b a b a a b a b a b a b a a", "a b a b a a b a a b a a b a b a a b a b a b b a a a b a a b a b a b a a b a b a b a a b a b a b a b a b a a b a b a b a a a b a b a b a b a b a b a b a b a a b a a a b a a b a b a b a b a b a b a a b a b a b a b a b a a a b a b a b a b a b a a b a a b a b a b a b a a b a a b a b a a a b a b a b a b a b a a a b a a", "a a b a b a b a a a b a b a b a b a a a b a b a b a a b a a b a b a b a b a a a a b a b a b a b a a b a a a b a b a b a a b a a b a b a b a a a b a a b a a a a b a b a b a b a b a b b a a a b a b a a b a b a b a b a b a b a a b a a b a a a a b a a b a b a b a b a b a b a b a b a a b a b a b a b", "a a a a b a a b a b a b b a b b b a a a b a b a b a b a b a b a b b a a b a b a b a b a a b a a b a b a b a a b a b a b a b a a b a b a b a a a a b a b a b a b a b a b a b a a b a b a a b a a", "b a a b a b a a a b a b a b a b a b a b a b a b a a a b a b a b a b a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a a b a b a a a b a a b a b a a b a b a b a b a a b a a b a a b a b a b a b a b a b a a b a b a b a b a a b a b a b a b a b a b a b", "a a b a b a b a b a a b a b a b a b a b a a b a a b a b a a b a a b a a b a b b a a b a a b a b a b a a b a a b a b a b a a b a b a a b a b a b a a a b a b a b a b a b a b a a a a b a b a a b a a a b a b a a b b a a b a a b a a b a b a a b a b a b a b a b b a b a b a a b a b a b", "a b a a a b a b a b a b a a b b a b a b a b a b a b a a b a b a b a a b a b a b a b a a b b a b a b a b a b a a a a b a b a b a a a b a b a b a b a a b a b a b a b a b a a b a b a b a a b a a a a b a b a b a b a b a b a b a b b a a b a b a a b a a b a b a b a b a b a b a b a a b a b a b a b a b a b a a a b a a b a b b a b a b a b a a b a a b a b a b", "a a b a b a a b a b a b a b a b a a a a b a b a a a b a b a b a b a a b a a b a a b a b a b a b a a b a a a b a b a b a a b a b a a b a a b b a a b a b a b a a a a b a b a a a b b a b a b a b a b a b a a a a b a b a b a b a b a b a b a b a b a a a b a b a a b a b b a b a b a a b a b a b", "a a a a b a b a b a a b a a b a b a a a b a b a a b a b a b a b a b a b a b a b a b a a b a b a b a b a b a b a b a a b a a b a b a b a a b a b a a b a a a a b a b a a a b a b a b a b a b a b a b a b a b a b a b a b a a b a a b a b a b a b a b a b a b a a b a b a b a b a b a a b a b a b", "a a b a b a b a b a b a a b a b a b a b a b a b a b a b a b b a b a b a a b a a a a b a b a b a a b a b a a a a a b a a b a b a b a b a b a a b a b b a b a b a b a b a b a b a b a a b a b a a b a b b a b a b a b a a b a b a a b a a b a a b a a b a a b a b a b a b a b a b a a b a b a b a a b a b a b a b a b a b a a b a"], "accuracy": 0.02, "train_overlap": 0.02, "res": [{"text": "a", "log_prob": -5.597009718418121}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b a b a b a b a b a", "log_prob": -10.135701894760132}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b a b", "log_prob": -9.686072915792465}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b a b a b a b", "log_prob": -10.527945071458817}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b", "log_prob": -8.783597767353058}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.599218100309372}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b a", "log_prob": -9.08598205447197}, {"text": "a b a b a b a", "log_prob": -8.349544763565063}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.599218100309372}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a b a", "log_prob": -8.349544763565063}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.88302132487297}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b a b a b a", "log_prob": -8.349544763565063}, {"text": "a b a b a b a b", "log_prob": -8.783597767353058}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a b a b a b a b", "log_prob": -9.686072915792465}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b a b a b a b a", "log_prob": -9.08598205447197}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.015042424201965}, {"text": "a b a b a b a", "log_prob": -8.349544763565063}, {"text": "a b a b a b a b a b a", "log_prob": -10.135701894760132}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a b a b a b", "log_prob": -9.686072915792465}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.015042424201965}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a b a b a b", "log_prob": -9.686072915792465}, {"text": "a b a b a b a b a", "log_prob": -9.08598205447197}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.015042424201965}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -15.270224511623383}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -11.88302132487297}, {"text": "a b a b a b a", "log_prob": -8.349544763565063}, {"text": "a b a b a b a b a b a", "log_prob": -10.135701894760132}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b a b a b a b a b", "log_prob": -11.015042424201965}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a b", "log_prob": -7.2779147028923035}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a", "log_prob": -7.590608507394791}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a", "log_prob": -5.597009718418121}, {"text": "a b", "log_prob": -6.532350301742554}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -11.599218100309372}, {"text": "a b a", "log_prob": -6.679659575223923}, {"text": "a b a b a b", "log_prob": -8.228863567113876}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -12.5812349319458}, {"text": "a b a", "log_prob": -6.679659575223923}]}, "epoch_50.pt": {"generated_sequences": ["a b", "a b a b a b a b a b a b", "a b a b a b a b a b a b a b", "a a b a b", "a b a", "a b a b a b a b a b a b a", "a b a b", "a b a b a b a b a b a b a b a b a b a b", "a b", "a b b a b a b", "a b a b a b a b a b a b a", "a b a", "a b a", "a b a b a b a b", "a b a b a b a", "a b", "a b", "a a b a b", "a b a b a b a b a b a b a b", "a", "a b a b a b", "a b a b a b a b", "a b", "a", "a", "a b a b a", "a b a b a b", "a b a b a b a b a b a b a b", "a b a b a b a b", "a b a b a b a b a b", "a b a b a b a b a b a", "a b a b a b a b a b a", "a b", "a b a b", "a b", "a b a", "a b a b a b a b", "a b a b a b a b a b a b", "a b a b a b", "a", "a b a", "a b a b a b a b a b", "a b a b a b a b a b", "a b a b", "a b a b a b a b a b a b a b a b", "a b a", "a b a b a b a b", "a b a b a", "a b a b", "a b"], "accuracy": 0.94, "train_overlap": 0.92, "res": [{"text": "a", "log_prob": -3.470369853079319}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b a b a b a b a b a", "log_prob": -5.75096501223743}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b a b", "log_prob": -4.57098631747067}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b a b a b a b", "log_prob": -5.091932887677103}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b", "log_prob": -4.108567984774709}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.8508081724867225}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b a", "log_prob": -5.157398050650954}, {"text": "a b a b a b a", "log_prob": -4.698286080732942}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.8508081724867225}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a b a", "log_prob": -4.698286080732942}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.270020766183734}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b a b a b a", "log_prob": -4.698286080732942}, {"text": "a b a b a b a b", "log_prob": -4.108567984774709}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a b a b a b a b", "log_prob": -4.57098631747067}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b a b a b a b a", "log_prob": -5.157398050650954}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.710905453655869}, {"text": "a b a b a b a", "log_prob": -4.698286080732942}, {"text": "a b a b a b a b a b a", "log_prob": -5.75096501223743}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a b a b a b", "log_prob": -4.57098631747067}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.710905453655869}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a b a b a b", "log_prob": -4.57098631747067}, {"text": "a b a b a b a b a", "log_prob": -5.157398050650954}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.710905453655869}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -9.18839195696637}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.270020766183734}, {"text": "a b a b a b a", "log_prob": -4.698286080732942}, {"text": "a b a b a b a b a b a", "log_prob": -5.75096501223743}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.710905453655869}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a b", "log_prob": -3.2999254539608955}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a", "log_prob": -4.20419458579272}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a", "log_prob": -3.470369853079319}, {"text": "a b", "log_prob": -3.03399807959795}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.8508081724867225}, {"text": "a b a", "log_prob": -3.836265105754137}, {"text": "a b a b a b", "log_prob": -3.5916406624019146}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -6.85297720041126}, {"text": "a b a", "log_prob": -3.836265105754137}]}, "epoch_55.pt": {"generated_sequences": ["a b a b a", "a b a b a b", "a b a", "a b a b", "a b a b a b a", "a b a b a b a b a b", "a b a b a b a b a b a b a b a", "a b a b a", "a b a b", "a b a a", "a a b a b a b a b", "a b a b a", "a b a b a", "a b a b a", "a a b a b a b a b", "a b a b", "a b a b a b a b", "a a b a b", "a b a b", "a a b a b a b a b a b a", "a b a b", "a b a b a b", "a a b", "a b a b a b", "a b a b a b a b", "a b", "a b a b a b a", "a a", "a b a b", "a b a b a", "a b a b a b a b", "a b a", "a b b a b a b a b a b", "a b a", "a a b a b a", "a b a b", "a b a a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a b a b a b a b a b a b a b a", "a b a b", "a b a b a b a b a b a", "a b a", "a b a b", "a a", "a b a a", "a b a b a", "a b a b a", "b", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b a", "a b a b a", "a b a b"], "accuracy": 0.74, "train_overlap": 0.72, "res": [{"text": "a", "log_prob": -6.720130022615194}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b a b a b a b a b a", "log_prob": -8.327830989845097}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b a b", "log_prob": -7.973740936256945}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b a b a b a b", "log_prob": -8.382561778649688}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b", "log_prob": -7.621148613048717}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -9.117593301460147}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b a", "log_prob": -7.896720290184021}, {"text": "a b a b a b a", "log_prob": -7.540135201299563}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -9.117593301460147}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a b a", "log_prob": -7.540135201299563}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -9.23436893709004}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b a b a b a", "log_prob": -7.540135201299563}, {"text": "a b a b a b a b", "log_prob": -7.621148613048717}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a b a b a b a b", "log_prob": -7.973740936256945}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b a b a b a b a", "log_prob": -7.896720290184021}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.76574506261386}, {"text": "a b a b a b a", "log_prob": -7.540135201299563}, {"text": "a b a b a b a b a b a", "log_prob": -8.327830989845097}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a b a b a b", "log_prob": -7.973740936256945}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.76574506261386}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a b a b a b", "log_prob": -7.973740936256945}, {"text": "a b a b a b a b a", "log_prob": -7.896720290184021}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.76574506261386}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -11.300270143896341}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -9.23436893709004}, {"text": "a b a b a b a", "log_prob": -7.540135201299563}, {"text": "a b a b a b a b a b a", "log_prob": -8.327830989845097}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b a b a b a b a b", "log_prob": -8.76574506261386}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a b", "log_prob": -6.834894726984203}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a", "log_prob": -7.150069383904338}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a", "log_prob": -6.720130022615194}, {"text": "a b", "log_prob": -6.517207633703947}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -9.117593301460147}, {"text": "a b a", "log_prob": -6.882040951400995}, {"text": "a b a b a b", "log_prob": -7.134456153027713}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -9.589256980107166}, {"text": "a b a", "log_prob": -6.882040951400995}]}, "epoch_60.pt": {"generated_sequences": ["a b", "a b a b", "a b", "a b a b a", "a", "a b a b a", "a b", "a b", "a b a b a b a b a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b", "a", "a b a b a b", "a b a", "a b", "a b a b", "a b a b a", "a b a b a b a b a b a b a b a b a b a", "a", "a b a b", "a b a", "a b a b a b", "a", "a b", "a b a b", "a b a b a", "a b a", "a b a b a b a b a", "a b a b a b", "a b a b a b a b a b", "a b a b", "a b", "a b a b a b a", "a b", "a", "a", "a b a", "a", "a b", "a b a", "a b a", "a", "a b a b a b", "a b a b a b a", "a b a", "a b a b a b a b", "a b a b a b a b a b a", "a b a b a b a b", "a b a b a", "a b", "a"], "accuracy": 1.0, "train_overlap": 1.0, "res": [{"text": "a", "log_prob": -2.391455503180623}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b a b a b a b a b a", "log_prob": -4.8790460070595145}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b a b", "log_prob": -4.82327320612967}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b a b a b a b", "log_prob": -5.309570932760835}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b", "log_prob": -4.345644559711218}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -5.975087773054838}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b a", "log_prob": -4.341138723306358}, {"text": "a b a b a b a", "log_prob": -3.8939094319939613}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -5.975087773054838}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a b a", "log_prob": -3.8939094319939613}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.461313446983695}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b a b a b a", "log_prob": -3.8939094319939613}, {"text": "a b a b a b a b", "log_prob": -4.345644559711218}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a b a b a b a b", "log_prob": -4.82327320612967}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b a b a b a b a", "log_prob": -4.341138723306358}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.851931813172996}, {"text": "a b a b a b a", "log_prob": -3.8939094319939613}, {"text": "a b a b a b a b a b a", "log_prob": -4.8790460070595145}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a b a b a b", "log_prob": -4.82327320612967}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.851931813172996}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a b a b a b", "log_prob": -4.82327320612967}, {"text": "a b a b a b a b a", "log_prob": -4.341138723306358}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.851931813172996}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -9.063588796183467}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.461313446983695}, {"text": "a b a b a b a", "log_prob": -3.8939094319939613}, {"text": "a b a b a b a b a b a", "log_prob": -4.8790460070595145}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.851931813172996}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a b", "log_prob": -3.2960178665816784}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a", "log_prob": -3.3579695392400026}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a", "log_prob": -2.391455503180623}, {"text": "a b", "log_prob": -2.811493542045355}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -5.975087773054838}, {"text": "a b a", "log_prob": -2.9041074961423874}, {"text": "a b a b a b", "log_prob": -3.7320424988865852}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -6.946853255853057}, {"text": "a b a", "log_prob": -2.9041074961423874}]}, "epoch_65.pt": {"generated_sequences": ["a b a", "a b a b a b a b a b", "a b", "a b", "a", "a b a", "a b a", "a b", "a b a b a b a", "a b a b a b a b a", "a b a b a", "a b a b a b a b a b a b a b a b a b a b a b a b a", "a", "a b a b", "a b a b a", "a b a b a b a", "a b a", "a b a b a b", "a", "a b a b a b a b a b a b a b a b a", "a b a b", "a b a b a b a b a b a b a b a b a b a b a b", "a b a b a", "a b a", "a b a b a b a b a b a b", "a b a b a b a", "a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b", "a b", "a b a b a b", "a b a b a b a b a b a b a b a b", "a b a b", "a b a", "a", "a b a", "a b a b a b a b a", "a b a b a b a b", "a b a b a b a b a b a b", "a b", "a b a b a b a b a", "a b a b a b a b a b a b", "a b a b a b", "a b a b a b a b a b a b a b a b a", "a b a", "a b", "a b a b a b a b a b a b a b", "a b a b a b a b a b a b", "a b a b a", "a b", "a b a b a b"], "accuracy": 1.0, "train_overlap": 0.96, "res": [{"text": "a", "log_prob": -3.299947926774621}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b a b a b a b a b a", "log_prob": -5.397978034801781}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b a b", "log_prob": -5.025009028613567}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b a b a b a b", "log_prob": -5.458444330841303}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b", "log_prob": -4.613949678838253}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.395751913078129}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b a", "log_prob": -4.912916919682175}, {"text": "a b a b a b a", "log_prob": -4.506055692676455}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.395751913078129}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a b a", "log_prob": -4.506055692676455}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.4852912509813905}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b a b a b a", "log_prob": -4.506055692676455}, {"text": "a b a b a b a b", "log_prob": -4.613949678838253}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a b a b a b a b", "log_prob": -5.025009028613567}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b a b a b a b a", "log_prob": -4.912916919682175}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.913460291456431}, {"text": "a b a b a b a", "log_prob": -4.506055692676455}, {"text": "a b a b a b a b a b a", "log_prob": -5.397978034801781}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a b a b a b", "log_prob": -5.025009028613567}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.913460291456431}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a b a b a b", "log_prob": -5.025009028613567}, {"text": "a b a b a b a b a", "log_prob": -4.912916919682175}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.913460291456431}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -8.902525660581887}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -6.4852912509813905}, {"text": "a b a b a b a", "log_prob": -4.506055692676455}, {"text": "a b a b a b a b a b a", "log_prob": -5.397978034801781}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.913460291456431}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a b", "log_prob": -3.7592593114823103}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a", "log_prob": -4.05089457007125}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a", "log_prob": -3.299947926774621}, {"text": "a b", "log_prob": -3.440501233562827}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.395751913078129}, {"text": "a b a", "log_prob": -3.6522788582369685}, {"text": "a b a b a b", "log_prob": -4.102574926801026}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -6.938547295285389}, {"text": "a b a", "log_prob": -3.6522788582369685}]}, "epoch_70.pt": {"generated_sequences": ["a b", "a b a b", "a", "a b a b a b a b", "a b a b", "a b", "a b a b a b a", "a b a b a b a b", "a b", "a b", "a b a", "a b a b", "a b a b a b", "a b a b a b a", "a b", "a b a b", "a", "a b a b a b", "a", "a b", "a", "a b a b", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b", "a b", "a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b a b", "a b a b", "a", "a", "a b a b a", "a b a", "a b a b", "a b a b a b a b a b a b a b", "a b a", "a b", "a b", "a b", "a b", "a b a b a b a b a b", "a b a b a b a b", "a", "a b", "a b a b", "a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b", "a b a b", "a b a b a b a b", "a b a b", "a b"], "accuracy": 1.0, "train_overlap": 0.98, "res": [{"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b", "log_prob": -4.582708701491356}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b", "log_prob": -3.5325495041906834}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.813933320343494}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b", "log_prob": -3.5325495041906834}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a b a b a b", "log_prob": -4.011768792755902}, {"text": "a b a b a b a b a", "log_prob": -4.535377569496632}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -8.48116159439087}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.813933320343494}, {"text": "a b a b a b a", "log_prob": -4.0369179509580135}, {"text": "a b a b a b a b a b a", "log_prob": -5.066536996513605}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b a b a b a b a b", "log_prob": -5.106535574421287}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b", "log_prob": -2.4756950326263905}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a", "log_prob": -3.487884908914566}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a", "log_prob": -2.4656159430742264}, {"text": "a b", "log_prob": -1.9816751293838024}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -6.491655930876732}, {"text": "a b a", "log_prob": -2.9469476090744138}, {"text": "a b a b a b", "log_prob": -2.975607793778181}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -6.237002125009894}, {"text": "a b a", "log_prob": -2.9469476090744138}]}, "epoch_75.pt": {"generated_sequences": ["a", "a b a", "a b a", "a b a b a b a b a b a b a b a", "a b a b a", "a b a", "a b a b a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a b", "a b a b", "a b a", "a b", "a b a", "a b", "a b a b a b a b a b a", "a b a b", "a b a b", "a b a b a b a", "a b a b", "a", "a b a b", "a b a b", "a b a b a b a b a", "a", "a b a b a b a b a", "a b a b a b a b a", "a", "a b a", "a b a b a", "a b a b a b a b a", "a b a b", "a b a b a b", "a b a b a b a b a b a", "a b a b a b a b a b a b a b a b a", "a", "a b", "a b a", "a b a b a b a b a b a b a b a", "a b", "a", "a b a b a b a b a b a b", "a b", "a a b a b a b a b a b", "a", "a b a b a b", "a b a b a b a b a", "a", "a b", "a b a b a b a b a b a", "a b", "a"], "accuracy": 0.98, "train_overlap": 0.98, "res": [{"text": "a", "log_prob": -5.230825427919626}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b a b a b a b a b a", "log_prob": -7.155709665734321}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b a b", "log_prob": -6.917811817256734}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b a b a b a b", "log_prob": -7.290657216217369}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b", "log_prob": -6.6464610141702}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.936357477796264}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b a", "log_prob": -6.788410804467276}, {"text": "a b a b a b a", "log_prob": -6.430645831860602}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.936357477796264}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a b a", "log_prob": -6.430645831860602}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.029786573490128}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b a b a b a", "log_prob": -6.430645831860602}, {"text": "a b a b a b a b", "log_prob": -6.6464610141702}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a b a b a b a b", "log_prob": -6.917811817256734}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b a b a b a b a", "log_prob": -6.788410804467276}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.584692346863449}, {"text": "a b a b a b a", "log_prob": -6.430645831860602}, {"text": "a b a b a b a b a b a", "log_prob": -7.155709665734321}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a b a b a b", "log_prob": -6.917811817256734}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.584692346863449}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a b a b a b", "log_prob": -6.917811817256734}, {"text": "a b a b a b a b a", "log_prob": -6.788410804467276}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.584692346863449}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -9.906727715395391}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -8.029786573490128}, {"text": "a b a b a b a", "log_prob": -6.430645831860602}, {"text": "a b a b a b a b a b a", "log_prob": -7.155709665734321}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b a b a b a b a b", "log_prob": -7.584692346863449}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a b", "log_prob": -5.98870545742102}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a", "log_prob": -6.078914972487837}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a", "log_prob": -5.230825427919626}, {"text": "a b", "log_prob": -5.847876346670091}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.936357477796264}, {"text": "a b a", "log_prob": -5.701882288791239}, {"text": "a b a b a b", "log_prob": -6.2926157638430595}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -8.38013452035375}, {"text": "a b a", "log_prob": -5.701882288791239}]}, "epoch_80.pt": {"generated_sequences": ["a b", "a b a b", "a b a b", "a b", "a b", "a b a b a b a b a b", "a b a b a", "a b", "a b a b a b", "a b a b", "a b a b a b a b a a b", "a b a b a b a", "a b", "a b a b a b", "a b", "a b a b a a b a b a b a b a", "a", "a b a b a b a b", "a b a", "a b a b a b a b a b a", "a b a b a b a b a b a b a b a b", "a b", "a a b a b a b a b a b", "b a", "a b a b a b a b", "a b", "a b", "a b a b", "a b a b a b a b a b a", "a b a b a b a b", "a", "a b a b a b a b a b a b a b a b a", "a b a b a b", "a b a b a b a b", "a b a", "a b a b a b a b a b a a b a b a b a", "a b a b", "a a b a a b a b a b a b a b a b", "b a b a b", "a", "a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b", "a b a b a b a b a b a", "a b a b a b a b", "a b a b a b a b a b a b", "a b a b a", "a b a b", "a b", "a b", "a", "a b"], "accuracy": 0.86, "train_overlap": 0.86, "res": [{"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b a b a b a b a b a", "log_prob": -4.727627150714397}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b a b", "log_prob": -3.9913322925567627}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b a b a b a b", "log_prob": -4.436622802168131}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b", "log_prob": -3.652115121483803}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.457585424184799}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b a", "log_prob": -4.341098748147488}, {"text": "a b a b a b a", "log_prob": -3.896052837371826}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.457585424184799}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a b a", "log_prob": -3.896052837371826}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.401418887078762}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b a b a b a", "log_prob": -3.896052837371826}, {"text": "a b a b a b a b", "log_prob": -3.652115121483803}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a b a b a b a b", "log_prob": -3.9913322925567627}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b a b a b a b a", "log_prob": -4.341098748147488}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b a b a b a b", "log_prob": -4.875539213418961}, {"text": "a b a b a b a", "log_prob": -3.896052837371826}, {"text": "a b a b a b a b a b a", "log_prob": -4.727627150714397}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a b a b a b", "log_prob": -3.9913322925567627}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b a b a b a b a b", "log_prob": -4.875539213418961}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a b a b a b", "log_prob": -3.9913322925567627}, {"text": "a b a b a b a b a", "log_prob": -4.341098748147488}, {"text": "a b a b a b a b a b a b a b", "log_prob": -4.875539213418961}, {"text": "a b a b a b a b a b a b a b a b a b a b a b a b a b", "log_prob": -8.212700575590134}, {"text": "a b a b a b a b a b a b a b a b", "log_prob": -5.401418887078762}, {"text": "a b a b a b a", "log_prob": -3.896052837371826}, {"text": "a b a b a b a b a b a", "log_prob": -4.727627150714397}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b a b a b a b a b", "log_prob": -4.875539213418961}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a b", "log_prob": -2.802355160936713}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a", "log_prob": -3.411477815359831}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a", "log_prob": -2.6595631390810013}, {"text": "a b", "log_prob": -2.5239785704761744}, {"text": "a b a b a b a b a b a b a b a", "log_prob": -7.457585424184799}, {"text": "a b a", "log_prob": -2.9953153245151043}, {"text": "a b a b a b", "log_prob": -3.222463473677635}, {"text": "a b a b a b a b a b a b a b a b a b", "log_prob": -5.800547349266708}, {"text": "a b a", "log_prob": -2.9953153245151043}]}}, "NestedStructures": {"best.pt": {"generated_sequences": ["* x x *", "* y \" ( [ ( b b b ) ] [ ( a ) ] ) y * * y \" * y \" ( b b b ) y ( a ) \" ( a ) * * x x * x \" * x x * y * x x * \" ( b b b ) y ( a ) \" * * ( a ) y * y \" * y \" y \" ( a ) y * * * * ( a ) y * ( b b b ) * ( [ ( a ) ] )", "( b b [ ( b [ * y \" ( a ) y \" y \" * * x x * y ( a ) \" * x x * x \" y \" * x ( a ) y ( b [ * * y \" * x ( a ) x \" y \" ( a ) y * ( [ ( a ) ] [ ( a ) ] b ) x \" ( b b [ * ( b [ * y \" ( [ ( a ) ] [ * x *", "( [ * * y \" y \" ( a ) y * x x * \" * ( a ) y * ( a ) y * ( b b b ) y \" * x y \" y \" ( a ) x \" * ( b b b ) * * x * x * x x * y * ( a ) y * * ( a ) y * x y \" * x ( a ) y ( [ * x ( b b b ) y ( a ) \" (", "( [ * x y \" ( b [ ( a ) ] b b ) y \" * x x * y ( b [ ( b b b ) ] [ ( b [ ( b b b b ) ] [ * x x * ] [ * ( a ) y * y \" ( b [ ( a ) ] b ) y ( [ * x ( a ) ( a ) y * * * y \" ( b b [ ( b [ ( a ) ] b ) ] [ ( a ) ] [ * x", "* x x *", "( [ ( a ) ] [ * y \" ( a ) y * x ( a ) y * x x * \" * * x y \" y \" * ( [ ( a ) ] b b ) y * x y \" y \" * * y \" * y \" ( a ) y * x x * \" * y \" ( b [ ( b [ * x y \" * x ( b [ * y \" y \" * * * x y \" * x x * y ( a ) \" ( [ ( [ *", "( a )", "* ( [ ( a ) ]", "( a )", "( a )", "( a )", "( b b [ ( [ ( a ) ] b b )", "* * * ( a ) x \" ( a ) y * ( a ) y * x y \" y \" ( a ) x \" ( b b b ) x \" * x x * y (", "* ( [ ( b [ * ) y ( a ) \" ( b b b ) y ( a ) \" y \" * x x * y ( [ ( a ) ] [ * x ( a ) y * ( a ) x \" y \" * x ( b b b ) ( a ) y * x x * \" ( a ) ( a ) y * * * y \" * x y \" y \" * * x x * y * x x * \" ( [ (", "* x y \" y \" * * ( [ * ( [ * * y \" ( [ ( ] [ * x ( [ ( a ) ] [ * y \" * ( a ) y \" y \" ( a ) y ( a ) \" * ( a ) x \" * ( a ) y ( [ * x x * ] [ * ( a ) y ( [ * ( b [ ( [ * y \" ( a ) x * x ( [ * x ( [ * x y \" y \" y \" * x x *", "( [ * * ( b b b ) y ( b [ ( [ ( [ * y \" ( b b [ * x y \" * * y \" * x x * y \" * x y \" ( b [ ( a ) ] b [ * x * x x * ( a ) x \" * * ( [ * x y \" ( a ) y ( b [ * * ( a ) y * y \" * y \" * y \" * (", "* x ( a ) y ( [ ( a ) ] [ ( a ) ] [ ( a ) ] ) \" * y \" y * x x * y * ( [ * * x y \" * x * ( b [ ( a ) ] [ * x * * y \" y \" ( b [ ( a ) ] [ * x y \" ( a ) y ( a ) y * x * y \" ( a ) x \" y x * * ( [ * y \" * y \" * x", "* x x *", "( a )", "* y \" y \" * x * * ( [ * ( a ) x \" y \" y x * * y \" y \" * ( b b b ) y ( b [ ( [ * y \" ( [ ( b [ * y \" ( [ ( a ) ] [ ( a ) ] b ) ( a ) y \" y \" ( a ) y * * ( a ) ( a ) y * x * * y \" y \" y x *", "( [ ( a ) ] b )", "( a )", "* x x *", "( a )", "* x * x ( [ * x ( a ) y * y \" ( b [ * ( b [ * y \" y \" y y \" y ( a ) x * y \" * ( a ) y * x * x y \" ( a ) * * x x * ( b b b ) x \" ( a ) y ( a ) \" * y \" ( a ) y ( [ * ( [ * * * y \" * * ( [ ( a ) ] [ * *", "( a )", "( a )", "( a )", "* * ( b b b b ) y * * x * ( b [ * x x * ] b b ) y * * x ( a ) ( a ) x \" ( [ * * x x * y ( a ) \" * x y \" * y \" y \" y \" y x * x \" * ( a ) y * x ( b [ ( b b [ ( a ) ] ) y * ( a ) y * ( a ) x \" y \" * y \" y \" y", "( [ ( b b [ * y \" ( a ) y * y \" ( a ) y \" ( a ) x \" ( b [ ( a ) ] b ) ( a ) x \" ( b b b ) y ( a ) \" y \" ( a ) y ( a ) \" ( a ) x y \" y x * \" ( a ) y ( [ * ( b [ ( a ) ] [ ( a ) ] [ * * x x * * x ( a )", "* y \" y \" ( a ) x \" ( a ) * ( a ) y ( b b [ * x * ( a ) * x * y \" y \" ( a ) y ( a ) x * ( b [ * x ( b b b ) ( a ) y ( b [ ( a ) ] b [ * ( a ) y * ( [ * x x * ] [ * x * x y \" y \" y * ] ) \" y \" * x x * y ( a ) \" ( b [ *", "* x x *", "* x * x * * ( a ) y * ( a ) * x ( [ * * ( b [ ( a ) ] b b ) y ( a ) \" * x ( a ) y * ( a ) y ( a ) \" y \" ( b b [ * ( a ) * y \" ( a ) y * * x x * \" y \" * x ( a ) y ( a ) \" ( b b b ) y (", "* * y \" * x x * \" y ( a ) x \" ( a ) y ( a ) x * \" * x x * x * y * y \" * * x y \" y \" y * x x * \" y * \" * y \" y \" y \" * y \" * x x * y ( a ) \" y \" ( b b b ) ( [ ( [ ( a ) ] [ ( a ) ] b b ) ( [ ( [ ( a ) ] b [ * y \" y * ( a ) * ( a ) y * ( a ) y ( a ) \" ( a ) y ( a ) \" ( b [ ( a ) ] [ * y \" * x y \" ] b ) y * ( a ) y ( a ) \" y \" * ( b [ * * x ( a ) x \" * y \" * x x * y * ( b [ * ( a ) y ( a ) \" * ( a ) x \" ( b b b ) y * * * (", "( a )", "*", "( a )", "( a )", "( a )", "* x y \" y \" y \" * * x x * ( a ) y ( a ) \" ( a ) y \" * x y \" ( b b b ) x * ( a ) y ( a ) \" * x ( b [ * y \" ( a ) y ( b [ ( a ) ] b ) \" y \" * ( a ) y ( [ * y \" y \" y x * ] [ * x ( a ) y ( a ) \" * ( a ) x \" *", "( a )", "( a )", "( a )", "* ( [ ( b b b ) ] ) y ( b [ ( b b b [ * x x * ] ) \" y \" y \" ( a ) y * x x * \" ( a ) x y \" y \" ( a ) x \" * x x * ( b b b ) x \" ( a ) x \" ( a ) y * x ( a ) * x ( b b [ ( a ) ] b ) y * x y \" y \" ( b b [ ( a ) ] )", "( a )", "* x x *", "* y \" * y \" * * x ( a ) x \" * * y \" y \" y x * \" y \" y \" * x x * y ( [ ( a ) ] [ ( [ * x * x * * x x * y ( a ) \" ( a ) x y \" ( [ ( b [ * x x * ] b b ) ] b ) * ( b b b ) y ( a ) \" * x y \" y \" ( [ * ( b [ ( a ) ] [ * * ( a ) (", "( a )", "( a )"], "accuracy": 0.52, "train_overlap": 0.52, "res": [{"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -86.33113030178356}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -94.15424381630146}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -87.38494631150388}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -95.7349762916565}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -84.03500861284556}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* x y \" y \" y *", "log_prob": -7.398801672650734}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -96.59050085028866}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -97.01357594021829}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -90.4711838348594}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -95.29598936223192}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -91.98000054369913}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -95.16356645562337}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -15.990843450359534}, {"text": "( [ * x x * ] b b )", "log_prob": -8.882427860109601}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -81.47185643677949}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.59442044937168}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -92.50221570880967}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -93.91150820002076}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -81.77664822223596}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -87.95988214743556}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -89.357554897113}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -86.17573741037631}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -86.44023178744828}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -84.87826808192767}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -80.00730951922014}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -104.58801920508267}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -84.65608519807574}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -17.96456123306416}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -85.24364762401092}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -9.665160112373997}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -81.92667822708609}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -87.14617109746905}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -90.73945025567082}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -21.374064589035697}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -85.27708572775009}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -18.359237233758904}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "* x x *", "log_prob": -3.927713577868417}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -89.38465627553524}, {"text": "( b b b )", "log_prob": -4.5867294659256}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -90.66141524733393}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -85.3923367371317}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -82.86175351732527}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -12.084573608241044}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -68.93614572330262}, {"text": "( [ ( a ) ] b b )", "log_prob": -6.893289351661224}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" y \" y x *", "log_prob": -6.963709831237793}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -84.957928630698}, {"text": "* x y \" y \" y *", "log_prob": -7.398801672650734}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -94.78727563651046}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -91.19650883335271}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -76.86095050480799}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -86.4848251476651}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -91.38447630999144}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -92.40799810108729}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -80.58474877168192}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -87.09484452163451}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -89.33776680045412}, {"text": "( a )", "log_prob": -2.3750627643894404}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -89.94582797106705}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -83.38727517309599}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -78.74727697420167}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -84.02077488685609}]}, "epoch_0.pt": {"generated_sequences": [") x ( [ y ( a ] [ b ) ] ) ) * x * x x * ( ) ( a ) ] b b [ * y \" y * * * x y ( ) y \" ( ) x * \" \" ( a ) * x x \" ) y \" y \" y ) x * ( a ) \" * * y * * ) y \" y ( * x * x ( a [ * * * y x * y \" x * ( \" ( b b [ * x y \" * y ( b a ) \" ] ) ) ] b [ ( a ) ( a \" b [ * ( a * x x \" * x x ( [ y y ) ( a ) \" \" \" ( a ) y * x x ( b ) \" * * x x y x * * y \" * y \" * y * ( * x * x ( [ \" x * x * x * y * x * x * \" y a )", "( [ ( ] [ b b b ) ] * * * y x x \" x y \" * * y y \" y ( a ) y * ] ) ( ] [ * y \" ) ] ) \" ) \" * x y ( a ) y [ * y x ( a ) \" ( ) y \" * ( a ) a ) * y ( * x ( a ) y \" x * x x * y \" y ) ] b a ) ) * ) y ) x ( a ) y \" ) ] b ) \" * x ) \" ( b ) \" y \" x * y x * y a ) y \" * b [ * y \" y ( b b a ) y \" * x x * x ( a ) y * x * x \" \" y * ) ] ( a ) \" ( a ) ( b [ * x [ y * ( ( a ) x x * * ( b * ( b b [ ( a * \" [ [ a ) y * \" * x \" y * *", "* * y \" x * * x * x * x \" [ ( a ) * \" ( b x ( a ) y \" ( a ) y \" * ( ( a ) ] [ ( a ) x * * x y [ ( a ) ] b b b ) y \" ( a ) \" ) \" * ( a ) ] [ [ * ( a * y * x * x \" \" y \" y \" ( a ) ( a ) b a b [ * * x ( b ) x [ * ] b [ ( a ) ) y * y * x ( a ) y * x x y y \" ( a ) ] ) * x ( a ) x ( a ) \" \" y x y \" ] ) y \" ( a ) ( b [ * y * y ( [ ( [ ( a ) x x x * x * * * x x ( y \" y ( a ) ( b b ) y \" * y * x x y \" y \" \" * * (", ") y \" y y \" ( a ) * x \" ( a ) \" ( a ) ] ) ( b [ * x ( b b ) * ( b [ ( a ) ] b ) y a ) ] [ * x ] b b b b \" * ( a * y x \" * ( [ * x y ] a ) ) ] [ x \" * * * * x ( a ) * x b [ * y \" \" * y * * ] b * y \" * ] b a ) y * x * y * * x * x a ) ( b [ y y [ ( b b b ) [ ( a ( a ) * * x x \" ( ) \" * ) ] ) ) \" ( [ ( a b * x x * * x ( [ x x * ( b ) * * ( b ) \" ( a ) ] ) ) y \" * y ( b ) x a ) x x y \" ) x x y x ( b [ ]", "( a ) * y ( [ ( a ) x * x * ( y \" x x * * * * ( ) ( b [ * * x \" ( a ) y ( y b b y \" * x ( a ) ) ( a ) x ] [ ) ( b b ) y \" y ( a ) ] ) ( a x * \" * ( ) ] ) a y ) y \" y ( a ) ] b a ) \" ( a ) ] ) y * x x * * x ( a ) y y y \" y ( * ( a y ( [ * ] ) ] a ) y \" * * x * x ) ( a ) ] b [ ( b [ * * ) y * y \" ( a ) ) ] b [ * x * y ( a ) ( a ) ( a ) y \" \" y \" ( b \" y * * ( a ) ( b ) ( * x x a ) y ( ) x * y \" * x ( a", "[ ( a ) \" \" [ ( b ) ( a ) ] ( [ * x * x * * * * * x x ( ) * ( a ) * x * ) * ( * * * * y * y ( a ) \" * x * x ( a ) ] ) [ x * * a * ( ) ( a ) y b * y \" * y * ] y \" ( b [ * * * x * x ( a ) y \" ( a ) \" ( a ) \" ( a ) y b b ( a * y \" ( b [ * * x ( ) ) x \" * ( a ) ( ) ] * ] ) ) y ] * x y \" y \" y \" * ( b b b ) ) \" ) ( b [ \" \" * [ * x ( [ * * * * x x x x x ) * x * x \" ( a ) \" *", "y ( a ) y \" * ) * * x \" y * x x * y * x ( b ) \" \" y \" * ( [ * b [ ] [ ( a ) [ ) ( x \" ( ) ] ) y y b b b [ * * x ] [ * * x \" ( a ) * \" y ( b [ * x * x * * y \" ( [ ( a ) ) ( \" * * x * \" * ( a ) ) b b ( a ) \" y \" ] [ * x \" y \" ( a ) y ) ] [ * ( a ) ) y * ) [ ( a ) \" y ( a y * ] b b b \" ( ( a ) ) y \" y \" * y x * x x * x \" x ( ) x \" ( a ) ] a ) * y \" x ] ) * ( a ) \"", "( ) * x \" * * y ] b [ * x x \" * y * * x x y \" * x * x * x \" * y \" ( a ) ] b b b b b ) \" ( a ) ) y ( ) \" ( [ * x ( y a ) ] b b [ ( b b a ) x ( a ) x ( [ ( ( a ) ( \" * x ( a ) x x y \" * x * ( * y \" * ] ) a ) ( a ) ] b ) y x y y \" x ( ] [ ( b [ * x \" * [ y \" * a ) \" * y * y * \" ) ( a ( ) ] ) y \" ] b [ * ( ) \" ( \" * x * * * x ) x x ( a ) \" ( [ * * y \" * * x * y * * x y ( [ ( ) x ( b [ a ) * ] b * x x * * x y ( b [ ( b [ ( a ) \" y \" * x x * b", "( b b ) ) \" * ) x ( a ) * * x x ( ] [ [ * * * \" * x * y y ( a ( a ) \" ( [ [ * x * x * x x * y a * x * * x ( y ( a ) * x ( [ * x * b ) y ( a ) y \" ( a ) ( a ) ( a ) \" ( a ) x \" ( a ) ] b b ) \" * x * x y \" y \" * x * ( a ) * * x x ( b [ ( b [ y \" ( b [ * x ( [ y \" ( ) ] [ \" ( [ ( a ) y * x \" ] ) y * * x ( a * x * ) x y ( [ ( b b b [ \" x x * * * x \" ( a ( a ) \" y [ ( a * * x x * ( b ) ( a b b [ * * ( ) ] [ y * a ) * x ) ] [ a ) ] y", "[ * ( [ y \" ) ] b [ * * y x ] [ x * y * x ( ) ( a ) ) y x * x x * x * y \" ) \" \" ) x * x y ) ( ] [ ( a ) ( a ) \" ( a ) y \" ( a ) * * x \" ( ) y * y \" ] [ * ] b ) * ) * ] ) ( a \" * a ) y * ] ) x * ( b [ ( a ) ] a ) \" * ( * \" ( ) y \" ( a ) ( a ) [ ( a ) ] b a ( a ) ] b [ * x \" y * y \" ( [ * * x \" ( a ) ( ) y ) y * ( ) \" * * ) \" * x ( b ) y \" ] ) ] \" ( a ) \" * x ( a ) ( a ) y \" * x x", "x \" * * x \" ( [ * ( b ) ] ) ( a ) y ) ( b b b b [ * x x ( [ ( a ) ] [ \" ( b ) ] ) x y \" * x ( ( [ [ * x ] ( a ) a [ [ x * * x * x * y \" ( ) y \" x ( a ) x x y ] ) ( [ ( ( b [ * * x x * y * * ) ( * * x ) y \" y ) * x x ) y ( [ b ) y \" ( [ ( ) * x \" * y \" x ( [ * * x * * * x ( a ) ] ) x x y ( a * * * * y ] ) x * y ( a ) y \" * x ) ) y ( [ ( \" ( a b [ ( ( a ) * * ( a ) ) x \" y \" ( [ ( [ (", "* x x y ( a ) ( a ) ) a ) \" [ * * ] ) ( a ) \" ( a ) y \" ( a ) * x \" ( b [ a ) x * ( b b ( a ) ] ) ( a ) \" * x y * ( a ) ( b a ) y * y ] [ * y \" ( y \" ( a ) y \" \" ) ] [ ) a ) ( a ) y \" * * x y ( a ) x * ] b ) x x ( a ) ] [ * x x x \" ( b [ ( a ) y \" ( ) ] b [ ( a ) x ( b y ) \" ( a ) y \" ( a ) y * * * * x x * x x x x ] a ) ] b x ( ) ) y y \" * x ( a ) x x x y \" \" * x \" * x ( a * y x [ * ) ( b [ (", "* x * ] b ) * ( a ) y * y * \" * y \" * ] b [ * * y \" ( a ) y \" ( a ) * y \" y ) * * b [ * x x ) y \" y ( ) y ( a ) [ a ) y \" * * ] ) \" * x * * * * ( b ) y ( a b a ) y \" * * ] ) \" \" ( a ) ) ] [ * * ( a ) \" * ( b b [ * * b a ) y * ] a ) b [ * y x ( a ) ( a ) a ) ] b x ( ) y \" ( y \" * * y \" ] b [ * x * x \" y \" \" y \" * y \" b b [ ( a * * * x ] b * x ( ) ] [ ) ( a ) ( a ) x \" * y ( [ ( a ) y * x ) (", "* x x y \" ( b a ) \" ( ] b [ y \" y \" ( a x \" ( b [ x y ] a ) * [ x * x \" y * ( [ * x * ( a ) y y * x * * y \" ( a ) x y y y ( ( [ ( a ) \" ( b a ) y \" \" ( a ) x ) y * * \" ( ) y * x y a ) y \" ] x ( a ) \" ( [ * x * y * * x x * y \" * x * * x x \" ( ( [ ( a ) x * y * x x * x x * ] b b b ) b * ( [ * y \" y \" * y * ( b [ y y \" ( a y ( b b b [ * * ( b [ * x ) y \" ) * ) y x x [ ( a ) ) * x \" ) y \" ( a ) ( a ) y \" a * ( a ) * * x \" * y", "* ( a ) y \" ( [ * x y * ( ) ] [ \" y * * x ( a ) ] [ * y \" * * x * y \" * a ) ] ( a ) ( a ) \" * y ( a ) ] [ * ] [ ( [ ( a ) \" ( a ) ] a ) ] [ ( a * x * * ) y \" * ) y \" ( b [ * x ( ( a * y \" ( ) ( a ( a * ( y y * x * y \" * ) * * x * x x \" ( [ \" ( a ) ( ] [ ( a ) ( [ ( a ) ( b [ * x \" x y ) y * x ( ) x * y * x * y y \" * * ( [ * x * x * ( a ) y ) b b b ) x x \" y y \" * ( a ) * ( b ) y \" ( a ) y b b b", "( a ) y \" * \" y \" ( a ) \" * ( a * ( a ( a * y ( a ) y \" * x * x ( a ) x y \" * * ( a ) y \" * ( a ) ] [ * \" y ( b ) x y \" ( a ) ] b b a ) * * x * * * y \" ( a ) ) ) ( \" ( [ ( ) * y y \" ( b a ) ( [ * y ( [ * x \" y y \" ( a ) y \" ( * x * a ) x ( b ) y \" * * y * b [ x \" ) y \" * x * * y \" * x ( * x \" * x x * * * y b \" y \" x * y ( ( [ * y ( b [ [ ) ( a ) a ) \" ( b b [ x * * ( a ) \" ) * \" ( b ) y \" x ( a ) ( [ * x y y y *", "] ) y \" a ) y y \" ( * y \" x * ( [ ( a ) y ( ) ( a ) y ( ( \" ( a ) y * x * * x x * ] [ ( b [ ( * x x * * * \" y * * x x x ( ( a ) ) b ) y y \" * x \" y ( [ ( a ) x x * ] [ * * ) y [ * y * * * y ) * ( [ * x x x * y \" ) ] ) a ) * ) x * x * \" ) ( a ) y ( b [ ( ] b ) ) ] ) ] b a ) ] [ * x b [ * y ( a ) x ( ) y [ [ * x b b a ) y \" * x \" * x * ( a ) \" * * * ) \" \" * y \" ( a ) y * y ) y * y * x y ( a ) \" * x x x ) y", ") x x ( [ y \" ( a ) * * ( a * * \" x \" ( a ) y \" * x \" ) y ) [ ( a ) ] * ( [ * y \" ( b [ b [ ( a ) ] ) x y y a ) y * x x y x \" * * * \" * y \" * x \" ( [ ( * x y \" y \" y [ ] [ y x * ) b b ( b ( ) x x * y x ( a ) ] b b b b b ) \" ( a ) ( \" * y * * * x ( a ) x \" ( b ) y y \" ( b [ ( a ) ] [ ( a ) y ) ) \" * ( b [ * x * x * ) * * * x * x * ) ( b ) * ( \" ( [ ( ) * * y \" y \" * * ( b [ ( a ( [ ] ) y \" ( a ) y * x y \" \" \" * y ( a ) b b a ) *", "* y * * x y * ( a ) \" * ) ) ) ] a ) \" x * x ) y ) ( * * ( a ) ) ( a ) \" y * ( a ) \" ( * y ( * * y \" x x * ) * ( a * x * y y \" x * * ] [ ( a [ ( a ) y ) y b [ ) [ ) ( a ) ] a ) ) \" ( a ) x y a ) \" * y * ( a ) * ] a ) y \" * ] ) ) * x * y ) * x x * * ) ] \" * y \" y y ( b b ) \" * x * y \" ( a ) [ * y \" ( a ) ] ) y ) ) \" [ * x * x * * * y \" * * x x * * *", "( a ) * ( ( a ) \" y x * * ) ] * * y ( a ) y * x * x * x x ( * x ( [ ( * b b ) x ) ( [ ( * ] a ) \" ( a ) ] ) y * y [ * x y \" \" * x * x y * ( [ ( a ) \" * x x ( a ) * * x * y \" y y * x x ( b ) x x * * \" ( a b ) ( b b ) y \" * x * x x x x \" * x * ] [ ( a ) \" ( a ) * ( ] [ * * * x ( a ) \" y \" * \" ( a ) y * ( a ) ( [ ( a ) y \" ( b [ y y ( a ) \" \" ( b ) x ] * * x \" \" x y y \" * x ( a ) * \" ( b b [ y \" * y \" * y y \" \" * * a ) y b [ ( a ) \" y \" *", "x x ( a ) y ( a ) y \" x y * ( b a ) y * y ) y b b x ] b [ * b * \" * x \" * ) ] ) y ( ) ] b ) b * x x ( [ ( a * b ) \" [ * ( b a ) ] * ( y * x \" y \" ( [ \" ( ) * ( a ) y \" ] [ * b ) x ( b * x x \" ( \" * \" ] [ [ ( \" * x x * ] [ * y ) ] b a ) y y * ( [ * \" * ) a ) \" ( a ) y * ( ) * y \" ( ) y \" ( a ) \" * ( a ) y \" ( b ) ( a * x \" ] a ) y * * x * ( ( a ) ) [ ( a b", "b ( a ) ] ) ] b [ ( ) ] b ) x x ( a [ * ) ] b [ * ] a ) ) ) ] ) ) y y ( a ) ) y \" ( [ ( a ) ] a ) ) \" * x * x \" * y ( a ) ( a ) ] ) x * ] \" ( a ) ) x * ] ) y ( a ) ] b b [ * ) \" \" * \" y \" ] ) y ) ) * y \" ( a ) ) \" ( a ) y a ) x \" * \" ( b [ ( a ) \" * y \" * ( b * \" * y ( [ \" * * ( a ) ( [ * ( ) y \" ) y \" \" y * x x * \" y y \" * * \" [ [ \" ( b [ ( a ) x * x y \" * y * * y * * x * x x y ( a ) (", "\" * x x y y \" * * * x \" ( a \" y \" y \" ( a ) y \" ( a ) \" ( * ( [ x \" y \" * * y \" * y * * y \" * x x * ( a ) y \" * y * ] b ) * * ( [ ( a ) y * \" y * y \" ( ] * y y \" ( ) x ( a ) ( a ) * ] [ ( [ * y \" ( a ) a ) ( a ) y ( a b b ( a ) ] * ( [ ( y \" ( ) \" \" ) \" [ ( a [ \" * ( a y y * ( b [ [ * x * y ) * y \" * ] [ * ) ( * x ( ( a ) y \" y ) ) ( ) ] ) x * * * \" y ] ) y * * ) * ( b", "] b [ ) y \" ) * ) ( a [ * y b a ) ) ] b [ ( b [ * x x \" ] b a ) ] ) \" * * y * ) x * x ) y y y ) y x y \" ( \" * x * \" * * x ) * x \" * y \" * ) ] [ y ( a ) y \" ( a ) ] b ( b * x * x y \" y * y a ) \" * ( a ) \" y ( a * ( a ) ] b b ( b [ * \" * * x y \" \" y \" y \" \" ( a ) y \" ( b ) ) ( ) ) \" * y \" * ( a ) ] ) y \" * ( a ) y \" * ( a ) y \" * ( a ) y ) * * ( ) x * x y ( a * x", "x \" * \" b ) y * x ] ( a ) ] ] ) ( a ) * x * y \" ) ) y \" * x x ( ( a ) ] ) y \" [ x * y * \" ( a ) x ( ) y \" ( * * b * x ( * x ( b ) y b x y ( b [ * y \" y \" y * ( a b b [ y \" ] ) y x x \" * x y ) \" ) ) ] b [ ( a ) y \" ( a * \" * x ( a ( [ * x y * ( b b b [ ( [ ( a ) b * x * y a * ( ) y \" ( a ) * x ( y * ] b [ a ) ] ) ( a ) * * x y \" ( a ) x ( a ) * ( a ) \" ( [ * y [ * * ( [ * y \" * \" y", ") y b [ ( a ) * * y \" y \" ( a ) ] [ \" ( \" * ] a ) ] [ * \" a ) ( ) y ] [ y * y * x ) x ( a ) y ( [ * ( a ) x * y x ( b [ ) y \" * x * * * x b b b [ ( a \" * x x * y \" * y * * * x ( [ \" y ( a ) ] b ) \" * [ ( a ) * ( a ) \" * ( * x y ) ] * x ( * x * x x * x y \" * y x \" * x ( a ) y \" ( * ( a ) y [ * ( ) ( a ) x x * ( ) y \" * b [ [ y \" * x ( b * ) * ( [ ( a ) ( b ) ( ( b ( a ) y \" * * x * * * x x \" * x ( y ( ) [ y * ( a ) * x \" (", "\" * ( [ ( a a ) \" * y y \" * x ) y ( a \" \" * ( a ) \" * y * * x * y * x ( a ) * x y * a ) ( a ) * * y \" ( ) [ * y \" [ * y \" * x ) \" ( \" y \" ( a ) ] [ * x * x ( a ) ] a ) [ ) x x y \" * x * * ) ( * ( a a ) \" * y ( b ) ] b * ( a ) x x x ] b * x * x * ( [ * y * x x * x \" * * ( a ) * x x * \" x \" y \" ) ( a ) ( a * x x x ( a [ * ( ( a y ( b ) * x * ( a ) \" * * x x * * x y ( a \" * ) ] a ) y \" * y \" y a ) )", "\" * ( ] ) y * * x * x * x ( ( [ x \" y ( a ) x * y * ] y \" ( ) ] b ] b b [ y * x x * ( b [ ( ] [ ( * ( [ * y \" ( b b a ( [ * * x ( [ * x x ) ] ) ] b b y \" * x ) y \" * x * x ] [ ( a ) b [ \" * x x x * x * x b [ * ] b ) \" ( a ) y \" * x ( y \" y ] b a a ) ] [ ( a ) [ ) \" * y \" \" ( b a ) * \" * y \" x ( a ) ] b [ ( b b ) * x ) y ) * x ) ( a ) * x y \" ( a ) \" * x * x * x \" ( a ) x y \" ( a ) y ( b * \" ( a ) ] ) * * x * x x * * x x y ( a", "[ * y ( a b a ) y ( b * x * y \" * ( a ) y \" * * y \" * y ( a ) x y \" * * ( b b * * y * x * * ] [ ( ( a y b ) x x \" * ( a ) \" * ( a ) ( * a ) \" y x x * * ( a ) y ( [ \" x * ) * y y \" * * * \" ( a ) y ] ) ] ) * ) \" * ] b ) x b b b b [ y * x * * y \" * x x * x \" ) * * ( a ) \" * * x x \" ] * x \" ( [ a ) x * x * x * x * x x * y * y ( a ) ] [ y \" * \" * \" y \" ) ) \" ( a ) x ) ( a ) ] ) ) ] * * x x ( [ * * ( a ) y \" * y x y ] [ * x \" ( [ x x * ( a ) )", "( a ) ] b ) y \" ) y y \" ( b [ y ( a ) \" * \" ( a y y ( a ) ) y * x x * * * * * y \" x * ( b ) x \" * ( a ) * * y \" ) ) ] b [ ( a ) x ( a ) ] ( \" ) \" x * y \" ( b b ] [ ( a ) y * x x x * x * y y ( a ) ) ( a ) \" * x ) a ) y b b b b [ ( a ) x x * ) ( [ * x * x y \" ] ) y \" y \" * x ) \" * * ( [ y * * x ( x ) ] ) [ ( ) y \" * * x x * \" \" ( b ] ) \" ( ) x x ( ) \" * ( a ) ( [ ( a ) \" y \" * x", "\" ] [ ( a ) ( b ) ] b ) ) y \" ( a ) y ( ) y ( a y \" y \" * \" y * * y y ( a b b b * x ( a ) ] ( a ) \" x * x * y x [ x y * x x \" * x \" * * x * ( a ) y ) ] ) x * y ( x * ( a ) ( * x ( x \" ( a ) * x * * * y \" * ( a ) ( a ) ) ( ) y \" y \" ) ) ] b a ) ( a ) [ ( ) y \" x y x * x \" * x * * ( b \" y \" \" \" * * y ( a [ * y ( a ) * x ( a ) ( [ y \" y \" x \" * x y \" b a ) x ( * ] [ ( a ) \" ) y \" ) ( a y", ") ( ( ) ] [ a ) * x y * ( a ) ) x \" * x x y ( a ) y ( a a ) ) y y \" ( a ) y * * x * ( a ) ] * ] a ) ] * ( a * ( a ) ( b [ * ( a ) ] b ) y ( * ] [ [ [ * * x x y ] b * x y \" y \" ( a ) ( b ( a ) * * x ( \" b b ) y * \" * \" ) y \" ( a ) \" y ( a ) \" ( a ) ( [ * x * x ) ( b ) ( a ) y \" \" y \" ( [ * y * * [ * ( a ) x ( ) ] ) [ ( [ ) y ) \" * ( a ( b ) ] ) ( a \" ( a ) ] ) y \" y \" ( b ) * y ( a ) y y \" * x * \" ) y", "b * ( a ) * * \" * ( [ ) ) y x x ) x * y \" ] ) ] ) y ( b a ) \" ( a ) ) ) ] [ ( ) ) y y \" ( a ) x x \" y \" ( a ) \" ( a ) [ ( ( a ) \" * * \" y ( [ [ ( [ * * x * y \" ( ( ) ] b * * x * ( a ) y y \" y b a ) y \" * * x * x * x * * x ( [ * \" \" * * y * x \" y \" ] * * * x x * ( * * * x * * y * * \" ( y \" * ( b b ) * a ) ] [ * y \" * x x * x * ) y y \" \" * * x x ( * x x y \" * x * x \" ) y \" y \" y \" \" [ * x * x * y ( ) ( a ) * ( [ ( )", "[ ( a ) \" ] [ ( a ) ( a ) [ * x * x y x x * * * y ( b ) \" y \" y \" ( a ) ( a ) y ( [ ) ] x ) x \" * * x * ( a ) ( b x \" ( a ) x * x \" * * ( b [ ( ) x y y \" ( b ) ) * x y \" ) * * ] * ) y * * x y ( ) ] b b ( a ) ) \" y ) y \" ( * ( [ * x ( a ) y \" * x * \" ( y \" * y * x * x y ) ) ) [ ( [ * x ) ] ) x ( a ( b ( a ) \" x ( [ * ( a ) \" y * x * * x * y \" ( a b ) * \" * ) \" * * * x y \" (", "* ] a ) \" ( [ ( a ) b ) ] [ ( a ( a ) ] ) ) * ( b ) * ] [ ( a ) * x * x ( b b [ ( \" ( a ) ( a ) y \" ) x \" ( a ) ) ] ) * x * \" ] ( * * ( a ) * * y x x ( a ) * x * * x * x \" * y \" * * y ( a ) ( a ) x ) y \" ( b * x * ] ) ] b b [ * ] ) y x ( b ) * x * x ] b ) \" * * ) \" b ( a ) y \" \" y \" * x x x ( a ) * * * y \" ) ( a ) ( b ) ( a a ) * * x * \" * x b [ * * ( a ) y \" * x x * ( a ) y * ) ( b \" * * x y ( [ * ] ( a ) * y * * ] [ x * * x *", "* \" y y \" \" \" ( [ * x ) ( b ) y \" x ( a ) x \" * y * * x y \" ( a * * a ) \" ( a ) x * y ) b b [ ( a ) \" ) y ( [ [ * x * * ( a ) * x ( a ) * ] a ) ] b [ \" ( a ) y \" * ( [ a * \" * y \" y \" ( ] * x * x * ) * * ( [ * y ) * x y * * x ( a ) x \" ] a ) \" ( b ) y y \" y ( [ ( ) ( a ) \" * y * b [ \" ( b \" * x * x * * ( a ) ( a a ) ( a ) y \" ( a [ [ * ( a ) ) ] * x ( a ) * y * \" y ( a ( a ) * ( a ) ( a ) (", "( a ) x ( a ) x ( a \" * x * y * x * ( b [ * y \" y \" x * ( a ) x x y \" ( [ ( [ * * ] [ * y * x \" \" * ] [ ( a ) \" * ( b [ ( a ) ( a ) * x * * ( a ) y * x ( a ) ) x x ( ] * b [ * * ( b [ * * x * y \" * y ( * ( [ ( b b b [ ( b b ) y * y \" y \" [ * y \" * x \" ( a ) y \" ( a ) x * * ( b b b b [ ( a ) x \" ( * x * a ) y * x y y \" * x x * ) y \" ) x * ( a ) ( [ ( a ) ) \" x x \" * ) x x \" y \" * * ) ) ) y ( * * [ * ( a b b [ ) \"", "* x * a ) y ( b b [ ( a ) * x * ( a ) y \" * * x * ( ( ) x * x ( \" * x * ( b [ ( a [ [ ( ) y y ( a ) * y \" * x y ( a y * * \" \" ( a ) * ( a * x x \" y ( a [ ( a ) x ) y * * x y \" y ] b [ y \" ( a ) x ( b [ * ( a ) y * * x * x * ) x \" y * x * x x * ] ( a ) ( a \" \" ] b ) y \" * x \" y \" * x * x \" \" b b b [ * y \" * * \" \" ) y \" * ] y \" y ] b [ * x y * y y \" ( ) ( a ) x ] ) \" * x * x ] ) ] ) \" * x * x ) * ( ) ) y \" * x * \" x ( b [ ( a )", ") \" ( b b [ ( ) \" a ) y ( [ ( a ) \" ( a ) y b [ y \" x * * x x \" ) b [ ( a ) y * * y \" ( b ) ) \" * x * x y \" * x y \" ( ( b b b [ ( a * y * y ( a ) y \" * ( b ) * y \" * ( * x x y \" ( [ y ) y y ( a ) y ( [ * x x \" ( b [ * x ) * y \" \" * x * * x * * y * y \" ( a * x \" y ( [ \" ( a ) y \" * \" y ( a ) y \" ( a b [ * x x x ) * ( [ ( a ) ( a ) ( a [ * x * y \" ) * * x * y b b [ ) ] [ ( ( ) \" * * y \" ( a ) y * * x * * x", "( a ) \" * * x * x \" ( * * y \" y \" * * x ( ) y \" ( a ) ( \" ( a ( a ) * y ( y ] b [ ) ] \" ( a ) ( b [ x \" * * y ] [ * ( ) ( y \" * x y ( a ) x \" ( a ) * x * x ( a ) ] b [ ( a ) [ ( a ) y \" * x * x * x x \" ( b ) * * y \" \" y y \" y y * ( ) ) x x x x \" ) * * x \" \" ( x * x * x ( a x * x \" \" ( ) * ] [ x y \" ) y ) x ( a ) * x ( a ) x ( b b ( a ) \" ( b b [ ( [ * x * x * \" \" * ( a ) \" ( a * x x ) * x x y [ ( a ) y \" ( a ) ] b \" * x x x * * x", "( \" ( a ) [ x ( a ) ( ( ) y \" ( b b [ x * * x \" y * * * x \" * * y ( * \" * x * x * y b [ ( ) x x \" * * y [ y \" ) y y \" \" ] * x ] [ ( [ * * * x ( a ) x * y ( ( a ) x y \" \" * y y \" y \" ( [ \" x x x ( a ) y ( a y * * ) a \" * * y * x * x \" * y * * y \" ( [ * \" * y ) y * y * x x ( a ) x ( a b [ * x ) y ( \" ( * ( a ) \" * x * y ( a ) ] [ ( a ) ) ( a ) ] ) \" y \" b b ) \" * y \" ) ( ) y \" ( \"", ") ] * * x * x b b ) x ( a ) y \" ] ] b * ( a ) \" y * y \" * * x * y * ( [ * * y \" y ( [ \" \" y \" * x x ( ) x * x ( a ) ( b b [ ( ) * x x ( a ) \" ( a ) x ( a ) y [ * ( a ) y \" y \" y \" y y \" ( a ) ) ] b b ) ( a ) ( \" \" ( [ * * x \" y * ) \" ( a ) y \" ( a ) y ( ) ) ] a ) ] [ * y ) ( * ( a ) ( a ) \" * y ( b ( [ ( a ) y \" ( a ) ( a ) ] * ( a ( a ) y b ) * y x \" ( a ) ) * x \" ( [ * x ( a * x x * * y \" y \" \" y \" (", "* y ] [ b ) y \" y \" y \" ( b ) * * x * x ( b [ * * x b [ ( a ) ( ( a ) \" y \" * x \" y ( a ) a ) y * * b a ( ) y \" ( a ) \" \" y y * * ( a ) x \" y y x y * y ) \" * x ( a ) * y ( * * ] [ \" * x * x [ ] [ [ ( y \" * x x * y * ( a ) x x * ( y ( ) ) * y \" ( a ) ) y \" x \" * * x x ( a ) x ( a ) \" ( a ) y * x ) ( \" ( b [ ( a y ] [ ( a ) ( a * x x x * y \" * x ( a ) y \" ( a ) * * y * x \" * a ) y * ) \" b b ) ( a ) y \" * * * x [ ( b ) ] [ * *", "( [ * * \" * x ( y \" y ( a ) ] * * x ( a ) ] b [ [ * * * x \" * \" ( [ * y * x x ( a ) [ ] ( ( ( a ( [ ( a ) * * ( a ) ] [ * * * ( [ ( b [ ( a a ) ( * y \" * x ( a * x x x ( a ) * y ( [ ( a \" * x x ) ) ] [ ( [ x y ( a ) x * y ) y y \" ( a ) ( b [ * x * ( a ) ) y \" * x ( a ) ) ) \" y \" y y x x \" * * \" ( [ x ( a b b [ ( b ) ( a ) a ) ) b [ ( a ) ( a * ) b [ ( ) x y \" y", "( b [ * x x x ( * x * y \" * * y * ( b [ * ( a ) ( * ( b ) b ) ] [ \" y * * x x x \" ( * x * \" ( a ) \" * x \" * ) y \" * ( * y \" * x * ( b [ ( [ y * \" y \" ) * y y b ) * x x * y \" ( * x * * x x * x ( a ) ( a ) x ] ( a ) y \" y * y * ( a ) \" y * ( a b b * * * ) y \" * x * * * y y * a ) * x \" y ) y \" * y \" y \" ( * ) y \" * * x x x \" a ) * x ( a ) ( ) x * * y \" y ( a ) \" * x * * \" \" ] [ * ] b a ) ( a ) y \" *", "\" y \" ) a ) \" ( y y x * x * x * ( a ) * ) y y x ( a ) x ) y * * x y \" * a ) \" ( a ) * ( [ * x * ) * y \" b b a ) b ) y ( y * x * ( ) ( a ) y \" * \" y \" y * [ ( b * y \" y \" * y y ) ( ) ( a ) \" * * * x [ \" ) ] ) ] ) ( [ a ( a ) * y b b [ ( a ) y \" * * x \" ( a ) \" y \" ( a ) ) \" y [ \" ( [ ( ( a ) ( ) [ ) \" ( ) * ( a ) ] [ ( x * x * * ) x * x ( [ y \" ( a ) x y \" ( a ] [ [ ( a a ) y \" ) ) y * *", "\" ( * y \" y \" \" * x * * * ( a ) ( a * ) y \" * x x ( a * ( a ) \" * x * y x * * y \" ( a * * x * y \" ) y ( * x ( a ) \" y * ) \" ( a ) x * x * ( x * ) y ( [ * x ) ] b ) * ] ) y \" y \" y a ) y * x * y ) ] * * x ) ] ) x y ( ) ( a ) \" * x x \" ( a ) y ( a ) a ) ( ) b * \" y * \" ( ) ( a [ ( a ) ( a ) y ( a ) ] [ * y \" * x \" \" * ( ) ( a ) y ) * ( b ( a ) * ( a ) ( a ) y \" y x \" * y a b ) ) y \" [ ( a ] b [ ( a )", "[ * x * ] [ ( a ) y * \" y x * ] [ ( a ) ( a ) y \" ( ) ( a ) * y * x [ * x x * y * x y \" ( a ) * \" * ( ( a ] [ ( a ] a * x y \" ( a ) a ) ( a ) y \" ( [ \" ( a ) y * * x ] * \" ( a ) ) * \" y ( a ) y \" ( a b [ * * * a ) y x * x ) ] ) * * y \" \" * ( a ) ) ( a ) ] b ) ) ( a ) ] [ \" * x x \" * * x \" ( a ) * * x * y \" * ( a ) \" ( [ ( [ ( a ) * ) x x * y \" ( a ( b b [ * x x y \" ( ) * \" y y \" ( b ) * ( x * x y \" ( ) x x x x * * ) \" y b [ ( b y", ") ] y ( ) ) ) ] [ y \" ( [ * ( a ) ] ) ) * * x y * x \" ( a ) ( ) * x x \" ( [ x * y \" y \" ( a ) ( a b ( x x ( ) y ( [ y \" y \" ( a ) y \" y \" ( a ) y \" * * * ( b [ * \" ( a ) ] [ ( a ) y \" b [ ( \" y y \" * y \" b [ ) x y x ( a ) y ) y \" y ] [ ) ] [ * x * x x ) \" ( a ) y [ ( a ) \" y ( ) b ( * \" * x x ) * x * y \" * y ( a * * x \" ( a ) \" y y \"", "* ) ) ) * x * * x x x * x y * y \" * * ( a ) * y * y \" * x x * ( a ) y \" y \" ( a ) \" \" * * * y * \" y x ( [ ( a ) \" * * * ) ) y \" y \" * * x * x x ( b \" ] b [ ( a ) \" * * y \" ( a ) y \" x x ( a ) y ] a ) b ( a ) ] ) \" ( a * ] [ ) ] [ * * * [ ( b ) x \" * * y ) [ * * ( [ ( b ) y \" ( [ ( y \" ( a ) ] b [ * x y \" y \" ( [ ( b [ * * ( a ) y \" * * y \" x \" ( ) x y ( a ) ) x x x * * ( a ) y * * y ( b ) ( ) x ( b"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -140.65878584980965}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -139.9994550049305}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -140.3889338374138}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -147.12102636694908}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -149.34834757447243}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* x y \" y \" y *", "log_prob": -18.053116619586945}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -143.89111745357513}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -136.04429376125336}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -148.2872773706913}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -137.85730588436127}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -144.15349805355072}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -142.13018035888672}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -26.201374351978302}, {"text": "( [ * x x * ] b b )", "log_prob": -21.649839520454407}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -144.81599420309067}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -144.91866153478622}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -145.93762269616127}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -143.97749692201614}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -151.37301018834114}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -152.54600974917412}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -140.65724235773087}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -141.3324310183525}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -130.84354147315025}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -141.74818456172943}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -146.00291514396667}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -155.7671180665493}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -141.43506836891174}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -30.30962425470352}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -144.87744796276093}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -21.246044009923935}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -137.04990151524544}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -147.9188783466816}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -146.9994422197342}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -24.92487210035324}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -142.2266707122326}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -36.17900186777115}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "* x x *", "log_prob": -11.88472855091095}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -141.11250293254852}, {"text": "( b b b )", "log_prob": -12.92788302898407}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -141.03402283787727}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -144.74910026788712}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -147.42532575130463}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -26.946288615465164}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -111.07280138134956}, {"text": "( [ ( a ) ] b b )", "log_prob": -17.79021430015564}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" y \" y x *", "log_prob": -19.378019213676453}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -150.24559316039085}, {"text": "* x y \" y \" y *", "log_prob": -18.053116619586945}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -151.05811032652855}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -147.6396058499813}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -141.73686718940735}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -141.73668932914734}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -137.78535932302475}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -143.8626563847065}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -142.241864413023}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -139.04675009846687}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -141.336315959692}, {"text": "( a )", "log_prob": -7.881661802530289}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -151.05657190084457}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -141.484471231699}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -141.4995327591896}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -147.96660760045052}]}, "epoch_10.pt": {"generated_sequences": ["* * ( b [ * * x * ( b [ ( a ) ] b [ ( a ) y ( b ) y * * x ( a ) \" y \" y \" y \" * y \" * ( a ) y \" y \" * x ( b [ ( [ ( b [ ( b [ ( b [ * y * ( a ) ] b ) x \" y \" * x \" * * y \" * ( b [", "* ( a ) y * ( b b b [ * x y \" * y \"", "* ( a ) y ( a ) \" ( a ) y ( [ * x y ( a ) ] b [ * x x * x \" ( a ) ] ) * x \" * * x x * ] [ * ( a ) x * x * * y \" y * * ( b [", "( [ ( [ * ( b b b [ ( a ) ] [ ( a ) ] ) ] b [ * x", "* y \" ( a ) y \" ( [ * * * y \" y \" y ( a ) y \" x * y \" ( b [ ( b b [ * ] [ ( a ) ] [ * y \" ( [ * x ( b [ ( a ) ] [ * ( [ ( a ) ] [ ( b b [ * y \" y \" y \" (", "* x \" ( b b [ * ( a ) y * x y ( b [ * ( a ) ] b [ ( a ) ] [ * * ( a ) y * x ( b [ ( [ ( a ) ] [ ( [ ( b [ * ( a ) ] [ ( a ) ] b [ * y \" * * * ( a ) x y * y ( a ) \" y \" y \" y \" * * ( [ ( a ) ] [ ( a ) ] b ) \" ( b b [ ( a ) ( [", "* x ( b b [ ( b b ) ] [ * ( b ) ] b b ) x x * y \" ( a ) y * y \" ( [ ( a ) ] [ * x x \" ( b b b ) y ( a ) x * y ( a ) \" ( a ) x x \" y ( a ) y * x x ( a ) y * \" ( [ * * y \" ( a ) x x \" y \" * * x * * x * x * x y \" ( b [ * ] [ ( b [ * x ( [ * x x x ( a ) y \" y \" * x ( b b b [ ) \" ( a ) * x x * ( a ) x x \" ( b b b [ * ( b b * x ( b", "( a ) ( a )", "( [ * y \" y \" ( b [ ( a ) y ( a ) \" * * ( [ * * x x \" * ] [ * y \" ( a ) * * x x \" ( a ) y * x * y ( [ * x x * ] [ * ( a ) x ( a ) \" * x \" * ( a ) y * ( a ) y ( a ) y ( b [ ( b b [ * ( a ) ] b ) ( b ) ( b b ) y \" y \" ( b b b [ ( a )", "( b [ * x * ( a ) y * y ( [ * ( a ) y * ( a ) \" ( a ) y ( a ) \" ( b [ ( a ) ( a ) y * x * ( [ * ( a ) ] b b ) \" ( a ) * x x \" y \" y \" * y \" y y \" y ( a ) x * x x", "* y \" * ( [ * x * ( a ) y ( a ) \" * ( b [ ( [ ( [ ( [ [ * * ( a ) y ( [ ( a ) ] [ ( a ) ] b [ ( a ) ] [ * ( a ) ( a ) y * x * ( a ) \" * ( a ) y ( a )", "* x x * \" ( b [ * ( a ) ] [ * * x x \" ( a ) x \" ( [ * ( a ) ] [ * ( a ) y ( a ) y \" * x x * ( b b b ) y ( b )", "", "( [ * * * y \" ( a ) y \" ( [ ( b b b b [ * x ( [ ( a ) ] [ ( b ) ] [ ( a )", "( a )", "* x * x ( a ) y \" ( a ) y * * x x * ( a ) x * x * x ( a ) \" y ( a ) y y \" y \" y \" * x x x * ( a ) \" y y \" y \" * x x (", "( b b )", "* * ( b b [ ( a ) ] b ) y \" ( [", "( b b )", "* * y \" y \" ( b [ * x x * ] b b [ * x ( a ) ] b ) y \" * x * * ( a ) ( b ) y \" ( a ) y", "( a ) ( a )", "* * ( a ) * * * y \" ( b b b )", "* x ( a ) y * * x y \" y \" * * x y \" y \" ( a ) y * ( a ) y * x * * ( a ) y \" y * x x * x * ( b [ * * x x x x * ] b [ ( [ ( a ) ] b ) x \" * y \" * ( a ) y \" y \" ( a ) \" * x x x ( a ) y ( b b b ) \" * x y * * ( a ) y \" * y \" ( a ) y * x x x ( a ) * * ( a ) y * x * \" y * x x", "* ( b [ ( a ) ] [ ( a ) ] [ * x ( b b [ * y \" * y \" ( b [ * x * ( a ) y ( a ) ( b b [ * ( [ * * ( a ) ] [ * x * y \" * x y \" * x ( b [ * y \" ( a ) y \" ( ) y \" y ( [ ( a ) x x * x y ( a ) y *", "( [ * * x x * * y \" y ( a ) \" ( [ ( a ) ] [ * x * ( [ ( b [ * ( b [ ( b b [ ( [ ( a ) ] [ * x * ( b ) ] b [ * x y * x x x * ] b ) y \" *", "* ( a )", "( b b b ) ] [ * x \" ( b [ ( a ) ] b ) x \" * x * ( b b ) y ( a ) x * ( a ) y \" ( a ) ( [ * y \" ( a ) y ( a ) x \" ( b [ ( a ) y * ( b [ * y \" * x * x ( [ * (", "( a )", "( a )", "] [ ( ] [ ( a ) ] ) ] [ * * y \" ( b [ ( a ) y ( a ) \" y ( a ) y * x x * x \" ( a ) y * * y * ( [ * y ( [ * y \" y \" ( a ) x * * * y \" * y \" * * x x y ( [ ( [ * * * x x * ( [", "( [ * ( a ) ] [ ( b [ * * y \" ( b [ ( [ * ( [ ( [ ( [ * x * x x * * y \" y * ( b b b [ ( [ * ] [ * ( a ) x x * ] [ ( a ) ] [ * * * y \" y \" * * x x x \" y \" * ( [ ( a ) y ( a ) \" y x x x * \" * ( [ ( a ) ] b b b [ ( a ) ( a ) y \" y ( [ * ( a ) * x x y * \" y * x x * x \" y \" y", "( a ) y \" ( [ ( [", "( a )", "* * ( a ) x * * x x \" * ( a ) y \" ( a ) * x * x * x ( [ ( b [ ( [ ( a ) ] b [ ( a ) ] [ *", "* x y \" ( a ) y * y ( b [ ( b b b ) ] b ) \" ( a ) y * * ( a ) y x ( a ) \" y ( b b b b [ ( a ) ] [ ( b b [ * ( [ ( a ) ] [", "( a ) * * * x y * * x ( b [ * y \" * * ( a ) y * x * * x * y ( a ) y * * * \" y \" y \" y \" ( a ) y ( a ) y ( [ ( a ) ] b b b b ) x x ( [ ( a ) ] ) x * ] ) y * * x \" y * x x * * * x \" * ( b b [ ( a ) ] [ ( [ ( a ) ] b [ * * ( a ) y \" y ( a ) y", "* x ( a ) y ( a ) \" ( b b b b ) y ( b [ ( a ) ] [ ( a ) ] b ) ( a ) \" * * y \" ( a ) * ( [ ( a ) ] [ ( a ) ] [ ( [ ( a ) ] [ ( [ ( a ) ] b ) ] ) \" y \" ( [ * ( a ) y ( [ ( a ) ] [ ( a ) ] b [ ( [ * x x ( b [ ( a ) ] [", "* * ( a ) y \" ( a ) ( a )", "* * * ( [ ( b b b b ) ] b [ ( a ) ] [ * * x x * ] [ ( b [ ( [ * x x * ] [ * y \" * ( a )", "* x * * x * * x y * ( b [ ( [ y \"", "( b ) ( b [ ( a ) ] b [ * * ( a ) x x \" y * y \" y ( a ) \" y \" y \" y ( a ) y", "* ( b [ ( [ * y \" y \" y \" * x", "( b b [ ( b b ) ] b b [ * ( [ ( a ) x \" y \" ( b [ * x y \" y \" ( [ *", "* y \" * ( b [ * * ( [ * y \" ( a ) * y \" y \" y \" ( b b [ * * y \" ( a ) x \" y * x ( a ) y \" * \" ( [ ( b [ ( a ) ] b b ) y ( a ) \" ( a ) * ( a ) y ( a ) ( a ) ( a ) \" ( a ) y * ( [ * * * x x x * y \" y \" y", "* ( [ * ( a ) * ( b [ * ( a ) ] [ * * x x * y \" ( a ) y * x x * \" ( b [ ( a ) ] [ ( a ) ] [ ( b b [ ( a ) y ( a ) ] b [ * * ( a ) y * ( a ) y \" y \" y", "( a )", "* y \" ( a ) y * ( a ) y * x x \" y \" ( b [", "* x y \" ( a ) * ( a ) y * x * * y * x x * ( a ) y * ( b [ ( a ) ] [ * ( a ) y \" ( b b b [ ( a ) ] b ) \" * x x * x * y ( a ) x * * x \"", "( a ) * * * x * y \" y \" y \" y x y \" y \" ( a ) x * y \" * x x * y \" y \" y \" ( a ) x y * x ( a ) \" * * x ( a ) x x ( [ ( a ) ] b ) y \" y * \" ( b [ ( a )", "y ( a ) \" y \" * ( b b [ * x x * ] b ) y ( a ) \" ( b [ ( b ) ] b ) y \" y \" y \" * x y \" * * x ( b [ * ( [ ( a ) ] [ ( [ ( [ ( [ ( [ ( a ) ] b [ ( a ) ] [ * * y * x y ( a ) \" ( a ) \" y \" ( [ ( a ) ] ) * x x * ] b ) * x * * x"], "accuracy": 0.1, "train_overlap": 0.1, "res": [{"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -103.6790261878632}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -108.33555128239095}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -94.83736982289702}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -120.17294911807403}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -103.86133999226149}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* x y \" y \" y *", "log_prob": -13.417585035786033}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -110.71333941200282}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -105.25302006793208}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -105.45740074838977}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -108.71157115860842}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -106.94037681748159}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -111.75976834748872}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -19.306844757171348}, {"text": "( [ * x x * ] b b )", "log_prob": -13.592993648722768}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -98.67561121098697}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -99.96996899123769}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -110.71453646407463}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -107.07483534212224}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -106.48073477274738}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -112.46966016152874}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -105.96774870157242}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -100.72078077704646}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -98.46858055214398}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -103.46030553756282}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -105.71832367184106}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -122.78892793750856}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -104.69205939571839}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -23.472269151825458}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -99.2442920813337}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -12.29916395957116}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -103.62161762139294}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -107.68324965983629}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -109.88533934834413}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -19.85404573334381}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -102.81159939267673}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -27.833729167934507}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "* x x *", "log_prob": -7.649878432974219}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -106.32652849075384}, {"text": "( b b b )", "log_prob": -7.006177365779877}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -109.80854618968442}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -105.59725304646417}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -107.23364687454887}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -15.906298018759117}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -79.65805997001007}, {"text": "( [ ( a ) ] b b )", "log_prob": -9.93115914973896}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" y \" y x *", "log_prob": -13.669076513499022}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -105.58625392371323}, {"text": "* x y \" y \" y *", "log_prob": -13.417585035786033}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -110.5595741244033}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -117.80522486870177}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -99.2481165266363}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -105.31071909342427}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -104.74205750459805}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -119.8203859620262}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -103.77489211270586}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -99.08079132460989}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -106.74696042807773}, {"text": "( a )", "log_prob": -3.1501750082243234}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -127.72636583447456}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -104.16011305351276}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -101.97386335453484}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -115.04910343396477}]}, "epoch_15.pt": {"generated_sequences": ["( * x ( b [ ( [ ( [ * y \" y \" * x x * ] [ * * * ( a ) x \" y \" ( a ) x \" y \" ( a ) * * * * x ( a ) y ( a ) \" * x * y \" ( a ) y * x * * x x * y \" y \" * y \" * ( [ * ( a )", "( [ ( a ) ] ) ] [ * ( [ * * x ( [ ( a ) ] [ * * x ( a ) y * * x x * y * \" * *", "* x * * ( b [ * x ( a ) x * \" y \" * y x * x y ( [ ( b [ ( b [ ( a ) ] b [ ( a ) ] ) ] b [ * x x * x * * x \" y \" ( a ) * y \" y \" y ( b b [ ( a ) ] [ * y \" * ( a ) ( [ ( a ) ] b ) x \" ( [ *", "* * x ( b [ * * * x ( [ * x y \" y \" y \" ( b [ * ( [ * x y \" * x * y ( b [ * ] b ) ( a ) ] [ ( a ) y * y * * ( a ) y \" * x x * x * ( [ * x * ] [ * * y x x * y \" * x * x * * * ( a ) ( a ) ( b b [ ( [ * * x ( [ ( a ) ] [ * x", "( a ) ] b [ ( [ ( [ ( [ ( a ) ] b [ * * ( a ) y * y \" ( b [ * * * * y \" ( b b ) y \" ( a ) ( b b [ ( [ * * y \" ( a ) y *", "* ( a ) * ( b [ ( a ) ] ) y ( [ * y \" y \" * x * x x * * x ( a ) y * y \" ( a ) y", "* * x x * y \" * x ( a ) y * ( a ) y ( [ ( [ * ( [ * x y \"", "( a ) y \" y \" y \" ( a ) y ( a ) x \" * * x * y * ( a ) ( a ) y * * x ( [ ( [ ( [ * x ( a ) ] [ * ] b [ ( a ) ( [ * ( b b [ ( a ) ] [ * y \" * ( [ * ( a ) y ( [ * * ( a ) ( a ) y * x * x x * y \" * x y \" * y \" * ] [ ( a ) ] [ * ( a", "* x x * ( [ * y \" y \" y \" * x y \" ( b [ * ( a ) y * ( a ) y ( [ * y \" ( [ * y \" ( a ) y * y \" ( a ) y * ( a ) y ( b [", "* y \" * y \" y \" y \" * x ( b b [ ( [ *", "( b ) y * y \" * x x * ] [ ( b [ * * ( a ) ( [ * x x * ] b [ ( b [ * ( a ) y * * ( [ ( a ) ] b [ * * ( [ ( b b [ * * ( a ) y * x x * x \" * * x", "( a )", "( a ) x \" * y \" y \" * y \" * x ( a ) y ( a ) y ( b [ ( a ) ] b ) \" ( [ ( b [ ( a ) ] [ ( [ * * ( [ * ( a ) y ( a ) y", "( a ) ] [ * x ( b [ ( b ) ] [ ( a ) ] [ ( a ) ] [ ( a ) ] b ) ] )", "( a ) ] ) y * x x \" ( a ) y * x x * x * \" (", "* * y * x y \" * * ( a ) x \" ( a ) ( a ) ( a ) y ( a ) \" * x y \" * * x x * \" ( [ * y \" * x x y \" * y \" * y \" * y \" ( a ) y ( a ) \" y \" ( b [ ( b b [ * x x * ] [ ( a ) ] ) y * * x * x * x * y * * x y \" (", "* * y \" y \" * x y \" * * * * ( a ) y ( a ) y \" ( a ) y ( b [ *", "( a )", "( a ) y * ( [ ( [ ( b [ * y \" * * x x * ] b b ) y * ( a ) \" * x ( [ * ( a ) y ( a ) y \" * * x * ( [ ( a ) ] [ ( a ) ( a ) ] b ) ] ) \" * x x * ( [ ( b [ * * * * * ( b b b ] [ * x x", "* x x * y \" * ( a ) y * * y \" y \" * x * * ( b [ ( a ) ] b ) x \" * * x ( a ) x \" y \" ( b b b [ * * y \" ( a ) ( [ * y ( b b [ \" ( a ) ] ) y ( a", "( a ) y ( a ) \" * y \" ( a ) y ( b [ * y \" ( [ ( a ) ] [ * y \" y \" * x x y \" y \" ( a ) y ( a ) y * x \" * ( b [ * y \" y \" ( b [ * y \" ( [ * y \" * x x * ] b ) x \" y * x * x x * x x * \" * ( [ ( b b b ) ] [ ( a ) ] ) ] ) ] b ) y * y * x ( [", "( b [ * x x *", "( b b [ ( a ) ] [ * * * x * y \" ( [ ( a ) ] b ) y ( b [ ( a ) ] [ ( a ) ] b ) ( a ) ] [ ( a ) ] b b ) ] ) y ( [ * ( a ) y \" ( a ) * x ( [ ( a ) ] b ) y * x x * x * \" ( a ) y ( [ * ( [", "* x x * y ( a ) \" y x * y ( a ) x * \" ( a ) x \" * y \" y \" ( [ * ( b [ ( a ) ] b b ) y * * x y ( [ ( b b [ * y \" * * x x y \" ( a ) y * (", "* * * y \" ( a ) y * * y ( [ * x x * ] [ ( a ) ] ) y ( b [ ( b [ * * x x * ] ) y ( a ) \" ( a ) y \" ( [ * x x * ] [ *", "( a )", "* ( a ) y * * y ( a ) y * * * ( a ) y * ( a ) x \" y * y \" y \" ( a )", "* * * ( a ) y ( b b [ * y \" * * * y \" y \" * * ( a ) ( a ) y * ( [ ( [ * ( [ * x x * ] [ * x \" ( b [ * ( b [ * y \" ( a ) y ( a )", "] ) y * ] [ * * (", "( a ) ] b ) y * ( a ) y * y x * x * y * ( [ ( [ ( [ * x x * ] [ ( [ * x y \" * ] [ * x x * ] [ * ( a ) x * x \" ( b b [ * (", "( [ (", "* x * * x x \" y \" y * x * ( a ) y * * x x * y \" ( [ * ( a ) x \" y * x * * * y * * x x * y \" ( [ * * ( a ) y * ( a ) x * ( a ) ( b [ ( [ * * x y \" * y \" * y \" * * x x * * ( a ) ( a ) y * * * ( a ) y * x y ( [ *", "* x * y \" y \" y \" y \" * x x * y \" ( a ) ( b b ) x \" * \" ( [ * x * ( a ) x \" ( a ) ( a ) y ( [ * x * * ( a ) * x ( a ) ( a ) y * * * * * x", "* x \" * y \" ( a ) y * \" ( a ) y * x * x x * * x * y \" y x y * y \" y \" ( b b [ ( [ ( a ) ] [ ( ) ] [ * y \" * x ( a ) x \" * x y \" ( [ ( a ) ] [ * y * x x * y \" ( a ) y ( [ * ( a ) ] ) x \" * x * * * y \" ( b b b ) ( a", "* x * y \" * * y \" * * * x ( a ) y", "( a ) ] [ * * ( b [ ( [ * * x x * y \" * y \" y \" * x ( a ) x \" ( [ * x x * ] [ * ( a ) ( a ) y * ( a ) x ( b [ * * ( a ) y * *", "* x x * y ( a )", "( b [ * x y * x y \" ( a ) x * y ( [ ( [ * ( [ * x ( a ) ] [ ( b [ * x x * ] [ * x y \" ( b [ * x * ] b )", "( [ * y \" * * ( [ * ( a ) ] [ * x ( a ) ] b ) y ( a ) \" ( a ) ( a ) y ( a ) * ( a ) ( b b [ ( a ) ] ) y * x x * ( a ) \" * x ( a ) y ( a ) ( [ ( [ * * ( a ) * * ( a ) x \" ( b b [ ( a ) ] b", "( a ) ] ) y ( [ * y \" ( a ) y * x y * x * \" ( [ * x * y \" * x * y * y \" ( b b b b ) y * * x y \" y \" ( a ) ( a )", "* ( a ) ] b ) y *", "( a ) ] [ * x y * ] b ) y * ( [ ( a ) ] b b ) y * x x * \" * ] [ * x x * ] [ * * * ( a ) y * * y y \" (", "( [ * ( a ) ] [ ( a ) ] ) y * x * * ( a ) ( a ) x \" * * y \" * * * ( a ) x ( [ * ( [ * ( [ ( a ) ] b b ) x \" ( a ) y * y \" ( [ ( [ ( [ * * * x * * x * x * ] b ) * (", "* * x ( b [ * y \" y \" ( a ) y ( [ ( a ) ] b ) y ( [ * ( [ * x x", "( a ) ] ) y * x x * ( a ) y", "( b [ * y \" * x \" y \" ( a ) * y ( a ) y ( a ) \" ( a ) y * * x x * * ( a )", "* x * ( a ) y \" ( a ) \" * ( a ) * y \" * ( a ) * ( a ) x \" ( a ) ( a ) y ( b [ ( a ) ] [ (", "( a ) ( [ ( [ ( [ ( a ) ] [ (", "* x * ( a ) * y \" ( a ) y * x * y \" y \" *", "( a )"], "accuracy": 0.08, "train_overlap": 0.08, "res": [{"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -98.53963841265067}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -104.25859255995601}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -91.7608074718155}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -111.16697548190132}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -102.610445326427}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* x y \" y \" y *", "log_prob": -15.123167945304886}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -103.74150779051706}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -107.5039231965784}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -99.25129645131528}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -102.56408007373102}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -102.84854419971816}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -101.60969081660733}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -20.750795652274974}, {"text": "( [ * x x * ] b b )", "log_prob": -13.000699204043485}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -91.60008420748636}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -89.38944893376902}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -105.38997840764932}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -103.45667341630906}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -98.61833964055404}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -106.79711391287856}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -98.26736659696326}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -97.91231227479875}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -93.60333722480573}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -92.80780743807554}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -97.30471368227154}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -114.98469280614518}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -101.52102238242514}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -25.800228262669407}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -95.15443318663165}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -13.19100383867044}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -103.89615899673663}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -98.08809050358832}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -104.03019848815165}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.419816508772783}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -95.9198486013338}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -26.422891158726998}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "* x x *", "log_prob": -7.478793362621218}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -99.95557538373396}, {"text": "( b b b )", "log_prob": -8.68995737656951}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -103.59049776988104}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -98.01435884414241}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -93.60031611728482}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -16.856801483547315}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -84.15597822004929}, {"text": "( [ ( a ) ] b b )", "log_prob": -11.426520784618333}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" y \" y x *", "log_prob": -14.531644330592826}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -98.41904661501758}, {"text": "* x y \" y \" y *", "log_prob": -15.123167945304886}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -105.42018705047667}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -106.15369028761052}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -94.8312679475639}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -100.97288646711968}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -107.13144224369898}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -107.0620290148072}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -98.4004041054286}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -100.87214165693149}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -106.10258826613426}, {"text": "( a )", "log_prob": -4.391178416321054}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -113.44126066728495}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -101.04254075023346}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -91.77615783456713}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -106.22598060639575}]}, "epoch_20.pt": {"generated_sequences": ["( a )", "* x y \" y \" y ( a ) y \" * ( [ * * x * ( a ) y ( a ) \" y \" y \" y \" ( a ) ( b [ * x ( [ * x x * ] [ * y \" y \" y \" ( a ) y ( a ) \" ( a )", "( a )", "* * x x * y * y * y \" * x * y * \" ( [ * x x * ( a ) y * \" * x ( a ) y * \" * * * x * * * ( a ) x \" ( b b [ * * x * y \" ( a ) y * ( a ) y ( a ) \" * y \" * ( [ ( a ) ] [ ( [ ( a ) ] [ ( a ) ] [ * x", "( a )", "( a )", "( a ) ] b [ * x ( [ * * x * x * x y * ( a ) y ( [ * y \" ( b b b b ) y * y \" y x * y * * ( a ) * y * x * x * \" y \" * y \" y ( a ) * x ( [ ( [ * * * x y \" ( [ * x *", "( a )", "* ( [ ( b [ ( [ ( b [ * * * ( a ) y ( b ) \" * x y \" y \" y y \" y x * \" ( a ) y * * x y \" ( a ) y ( a ) \" y \" ( a ) y ( a ) \" y * x * ( [ ( b b [ *", "( a )", "( [ ( a ) ] b [ * y \" y \" y y \" y \" * y x * * x x * x x * \" ( a ) \" y \" * * ( b b [ * * x y \" y \" y * x * y \" ( a ) * y \" ( a ) x \" * y * * ( a ) y ( b b ) \" y \" * x * x * y ( a ) \" * x * ( [ * x y \" * x ( a", "* x ( a ) y ( b b b [ * x x * ] ) y ( b b b ) \" * x * ( a ) y * ( a ) y * y \" * y \" y \" ( a ) y * ( b b [ ( a ) ] ) y ( b [ ( b b ) \" y \" ( a ) ( [ * x * ] b ) x \" ( b [", "( [ * x ( b [ * * x ( b b [ ( a ) ] b b ) y ( a ) \" ( a ) y * x * x * y * \" y * x ( a ) y * \" ( b [ * ( b [ ( a ) ] [ ( b b [ * y \" * * y * x * y \" ( b [ ( b b b ) ] ) x \" * x", "* y * x x * ( b [ * * x ( a ) x \" ( x * y * ( b b b b b ) \" * * * x x * y ( a ) \" y \" y \" y * ] [ * * ( [ ( a ) ] [ * x y \" y * ] b ) * x ( b [ ( a ) ] [ ( [ * x * * x x * y * \" * x * * *", "* y \" y * ( b [ ( a ) ] [ * * y \" * * x x * * y ( a ) \" ( a ) y \" * * y \" * ( a ) x \" ( a ) y ( a ) \" ( b b b ) y * x * \" * y \" * x y \" y * * x y \" y \" * x * y \" * ( [ * y \" * * x x * y ( a ) \" y ( [ ( b [ ( a ) ] [ ( a ) ] ) ] b", "* x x *", "( a )", "( a )", "* x y * x * y * x * ( a ) y ( a ) \" * ( [ * * x * x * y \" * x x * x x * \" y * * x * * * ( a ) y * ( a ) y ( b b b ) \" y \" * x * ( b [ * * y \" y \" * ] [ * y \" * y \" * x * ( b [ * y \" y \" * * x x * y * ( b b ) y * * x ( a ) \" * ( [ ( [ * y \" * ( a ) y * * * x x *", "", "( a )", "( [ ( a ) ] [ * * y \" y \" y \" ( a ) y * x \" ( a ) y * x * \" * y \" * x y \" y \" y * y * x * \" * x * y \" y", "* * x y \" * y * y * * ( a ) y * y \" ( [ * ( a ) x \" y * x x * \" * ( b b [ * y \" * * * ( [ ( [ * x ( a ) ] b [ ( b [ ( a ) ] [ ( a ) ] ) y ( b [ * ( a ) y * y \" y \" ( a ) x \" ( [ * * * x", "( a )", "* x y \" * x * ( a ) y * x * x * * y \" ( b [ ( a ) ] )", "( [ * ( a )", "( a ) ] b ) y \" *", "* * x ( b b b ) y * x * x * y * ( a ) y * y \" y \" * ( a ) x \" ( a ) y ( a ) * * x * * x x * x * x *", "( a )", "* y \" ( a ) y * y", "( a )", "( a )", "* x y ( [ ( a ) ] [ ( a ) ] [ ( b b [ ( a ) ] ) \" y \" ( a ) y * y \" ( a ) y * y", "* x x * ( a )", "( b b b )", "* ( a )", "* y \" y \" ( a ) x \" y \" ( a ) y * x x * x \" ( a ) y ( [ ( b [ ( a ) ] [ * x * y \" ( a ) x \" ( [ ( a ) ] b ) y * * * x ( [ * ( [ ( a ) ] [ ( a ) ] b ) ] b [ ( b [ ( [ ( a ) ] b ) ] ) y * ( a ) y * * x * x x * y * x", "* * * y \" * x ( a ) y \" * x x * x x", "* x ( a ) y ( a ) \" ( a ) y * x * y \" ( [ ( a ) ] b b ( a ) y ( [ * x x * ] [ ( a ) ] b [ * ( a ) y *", "* x \" y ( b [ * y * x x * ] [ * x * y ( a ) y ( a ) \" y \" * ( a ) x \" y x * \" * x x * y \" ( [ * x y ( b [ ( a ) ] [ * x ( [ * x * y \" * y \" * ( [ ( a ) ] [ ( [ ( [ * x * x * y \" y \" y", "* y \" y \" ( b [ ( a )", "( a )", "* x y ( a ) \" y * x x * y \" * x y \" ( b [ * y \" * x y \" y \" ( [ ( b [ ( [ ( a ) ] ) ] [ * ( a ) y ( a ) \" (", "* x *", "* x * x * x x * y ( [ * * y \" y \" ( a ) ( b b b ) y ( b b b ) \" y \" * x x * x x y ( a ) \" y \" * x * * x x * y", "( b [ * x x *", "( a ) y ( a ) \" ( [ ( b [ ( b [ ( [ ( a ) ] [ * x ( a ) y ( a ) \" * x x * \" * y \" * x x * ( a ) y ( a ) \" * x * x * x", "* x y ( a ) y * y \" ( a ) * y \" * x * x \" ( [ ( a ) ] [ * * ( a ) y ( a ) y ( b [ * x ( a ) y * * * y * x * \" * x x * ( a ) x \" ( [ * * ( a ) y ( [ ( a ) ] b [ ( a ) y *", "* x * x x * y * y ( a ) \" y \" y ( a ) y ( a ) \" y y * ( b b [ ( a ) ] b b ) ( [ * x x * ] b [ ( a ) ] [ ( b b ) ] [ * x y \" y \" ( a ) y ( a ) \" y \" * y \"", "* x ( b b [ ( [ * ( b [ ( a ) ] [ ( a ) ] [ ( b b ) ] ) ] ) y ( a ) \" * x y \" ( b [ ( a ) ] [ ( a ) ] [ * * ( b b [ * x x * y \" ( b [ * x y ( a ) \" y \" * x y \" * y * ( a ) x \" ( a ) y * x * y \" y \" ( a ) * x \" * x * x * * x ( a )"], "accuracy": 0.32, "train_overlap": 0.32, "res": [{"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -95.3035153853707}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -97.98445159522817}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -89.54270614217967}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -106.28216655133292}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -96.35834025149234}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* x y \" y \" y *", "log_prob": -11.255511779221706}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -105.46473875455558}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -101.73993089841679}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -100.44735165382735}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -100.72294318745844}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -100.0034901369363}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -102.83203940326348}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -16.784317332087085}, {"text": "( [ * x x * ] b b )", "log_prob": -11.509495775564574}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -89.26325665321201}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -91.21314847585745}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -104.64785955660045}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -96.51724555110559}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -94.63375025987625}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -101.09958859509788}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -95.7192407832481}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -95.2164057912305}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -91.8313081364613}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -91.14198293164372}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -94.91498215869069}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -120.2761411331594}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -93.85935601848178}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -20.15713925473392}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -92.61459344532341}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -11.392362250597216}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -94.99982524011284}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -95.68554433016106}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -99.12261149240658}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -14.70384130300954}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -96.47073879372329}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -24.050923654809594}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "* x x *", "log_prob": -4.405573291704059}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -101.26461739651859}, {"text": "( b b b )", "log_prob": -6.159634379204363}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -104.41692501259968}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -98.2428386141546}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -92.17588245752268}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -13.952568228822201}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -78.5878708793316}, {"text": "( [ ( a ) ] b b )", "log_prob": -8.785568343941122}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" y \" y x *", "log_prob": -8.91092791070696}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -95.36960847885348}, {"text": "* x y \" y \" y *", "log_prob": -11.255511779221706}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -109.14343179878779}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -104.821790415328}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -92.1822387271095}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -95.40751617122442}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -100.84085818659514}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -108.94950572121888}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -93.53822504868731}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -95.64638992026448}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -97.15797591721639}, {"text": "( a )", "log_prob": -2.7992412603925914}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -106.28991605388}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -94.89991098782048}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -92.67491191672161}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -98.22012998722494}]}, "epoch_25.pt": {"generated_sequences": ["* * * * * x y \" * x x * ( [ ( a ) ] [ * * x ( [ ( b b b b ) x * ] ) y * * x * x * ( [ * y \" y \" y \" y * y \" * ( b b [ ( a ) ] [ * * ( a ) y ( a ) \" * y \" ( a ) y", "x ( a ) * * y \" ( [ ( [ * * x x * ] [ * * x ( b b [ ( a ) ] ) \" y * ( a ) y * * x * ( a ) y \" ( a ) ( [ * ( a ) ( [ ( a ) ] [ ( a ) ] b b b ) \" ( a ) y * x \" * ( [ ( a ) ]", "* * x ( a ) y * * x y \" y \" * x x * ( [ ( a ) ] b [ * y \" ( b [ * ( a ) y * y \" ( b b [ ( a ) ] b ) \" * x ( a ) x * * x y \" * y \" ( b [ * ( b b b ) y ( a ) \" * x ( [ ( b b ) ] ) y * y \" ( [ * * x ( b [ * x", "( a ) ] ) ( a )", "* x y \" * x ( a ) y ( [ ( [ ( a ) ] b b [ * x x * ] [ ( a ) y ( [ ( a ) ] b ) \" ( a ) y ( [ * x * y \" * * x x * y * x y \" * x x * y ( b [ * x * ( b b ) y * y \" * y \" y \" * ( a ) y * * *", "( [ * y \" * * x * y \" * y \" * * * ( [ ( b [ * ( [ * x y \" * ( a ) y * * x x * y \" * x ( a ) y ( a ) \" * x * * ( a ) y ( a ) \" y \" ( b b b ) y * x x * x \" * x * x * * x x * y", "( b b b ) * y \" * x x * y * x * y \" * * x ( b b [ ( b [ * (", "( a )", "( a )", "( a )", "( [ * ( a ) y ( a ) \" * * x * x x * x \" * ( a ) y * x y \" * ( a ) x \" y ( a", "( b b b )", "* * * * y \" ( [ ( a ) y * x x * \" y \" * x ( a ) y ( [ ( b b b ) ] [ ( [ * x x * ] b b ) y \" * * y \" ( a ) x \"", "", "( [ ( a ) ] [ * x * y \" y \" * x x * y * * x * x * y * x x * \" y \" y \" ( a ) y * x * x * \" * x x * x \" * * y \" * ( a ) y ( a ) \" y x * y \" * * x * x * x y \" * x x * x \" * x * * x * ( b b b ) x \" * x ( a ) x * y * x", "* * ( a ) * x x * y ( b b ) \" y * x * * x x * y ( [ * x ( b [ * y \" * ( [ * ( a ) x \" * * * x y \" * y \" ( a ) y ( b b [ * ( [ ( [ ( a ) ] [ * x y \" ( a ) y ( a ) \" ( a ) y \" ( b b b [ * ( a ) * * x *", "* x x * * ( b b [ * x x *", "( b [ * y \" * x x * x \" * y \" ( b [ * x x * ] ) x \" ( [ * x * x x * x * y * x x \" * y ( a ) y ( a ) \" ( a ) y * x y \" ( b b ) y * x * \" ( b [ * * y \" * * ( b b ) ( a ) y", "( a )", "( b b [ ( a ) ] ) y * * x x * y * * x y \" ( b [ * * x x * x \" * y \" ( [ * ( [ * ( a ) y ( a ) \" * ( a ) x \" ( b b [ * ( b [ ( a ) ] b b ) y ( a ) \" ( a ) y * * * x ( [ * x x * * x x * x \" * x x * ( [ * x", "* * y \" ( [ ( a ) y * y \" ( a ) y * ( a ) y * x ( a ) y ( a ) \" ( a ) ( a ) y ( [", "* y \" ( b b [ ( b [ * * y \" y \" y y * x x * y \" * ( b [ * x * x ( [ * x y \" * x y \" ( a", "( [ ( [ ( b [ ( a ) ] ) \" y \" * y \" * x x * y * x x * \" * x y \" y \" ( a ) * x x * * x x * y ( [ * ( [ * * x y \" y \" ( b b [ ( b [ * x ( a ) y * y \" ( b [ * * y \" ( a ) y ( [ ( a ) ] [ ( [ (", "( a )", "* y \" * ( a ) y ( b b [ ( b [ ( [ * ( a ) x \" * x x * y * y \" ( b [ * x y \" y \" * x y ( a ) x \" * x x * y * * x x * * x ( a ) y ( a ) \" * * * ( a ) x x * y \" * x x * y", "* x y \" * x y \" y \" ( a ) y ( [ * y \" y \" * x x * ] [ * y \" ( a ) y * ( a )", "* x x * * x y \" * ( b b b ) y * x y \" * x y \" ( b b b ) y * x * ( b b b ) * x x * x * ( a ) x \" y \" ( [ ( [ * * * * x y \" y * x *", "( [ * * x * * x x * ( b [ * * y \" y \" * x x * x \" y \" y \" ( [ * x y \" * x x * ( b [ ( a ) ] [ * * ( [ * ( a ) y * y \" ( b b b ) x \" ( a ) * ( b b ) y ( a ) \" * x y \" * x", "( [ * x x * ( [ * x x * ] b [ ( a ) ] b ) y * x x * * * x y ( b [ \" * x * y \" ( [ * x ( a )", "* ( a ) * ( a ) * x x * y ( b [ ( a ) ] ) \" ( a ) y ( a ) \" ( b b [ ( a ) ] ) ( a ) y ( a ) \" ( a ) * y \" ( a ) y ( a ) \" ( a ) * y \" * x y \" * * x x * * x * y \" y \" * y \" * * * * x x * * y \" \" y \" *", "( b [ * * ( a ) x \" ( a ) y * * x ( a ) y * x x * \" * y \" ( [ * ( b b [ * y \" y \" y \" ( a ) y * x y \" y \" y \" y x * ] [ ( a ) ] ) y ( [ * x", "( a )", "* * y \" * * * x * x x * y * y \" y \" ( a ) y * ( b [ * ( b [ ( a ) ] ) y ( a ) \" * * * x x * ( a ) y * y \" y \" y \" ( b [ ( [ * * x x * ] b b ) y ( b b b ) \" ( a ) y * ( a ) ( a ) y ( b b b b ) \" * x x", "* ( a ) * ( b [ ( a ) ] ) y ( [ ( a ) ] b [ * x x * ] ) y * x x * \" ( b [ ( b b b [ ( b b ) ] [ * x y \" * x y \" * x y \" y \" ( a ) y * x x * y * ( a ) \" * ( b b ) x \" ( b ) x \" ( a ) x \" y * x x * \" * x", "( a )", "* * x ( b [ * x * x ( a ) * ( b [ ( b [ * x * x * ( a ) ( a ) y * y \" ( a ) x \" * y \" * y \" * * ( b [ * y \" ( a ) y ( a ) \" y x", "( a )", "( [ ( a ) ] ) \" ( a ) y ( a ) \" * ( b [ * * x * x ( a ) y ( [ ( b [ ( a ) ] b b [ * ( a ) y \" ( a ) ( a ) * * ( b b [ * y \" ( a ) y * x x * \" * x y \" ( b b b ) y * x y \" ( a ) y * x *", "( [ ( a )", "* x", "* x ( a ) y ( [ ( a ) ] b b ) \" * ( a ) y * y \" y \" * ( b b [ * x ( a ) x \" ( b [ ( a ) ] ) y * * x y \" * x x * x \" * ( a )", "* * x x * y ( a ) y ( b [ * * y \" * x * x x * y *", "* * x x * ( [ ( a ) y ( a ) \" * x * x x * y ( a ) \" y * * ( b b [ ( a ) ] ) y ( a ) \" * x x * * y \" ( b b ) y * x x * y", "( [ ( a ) ] b b ) y ( a ) \" y ( b b ) y ( * * ( a ) y ( b b b ) \" y \" y \" ( [ ( b [ ( [ ( a ) ] [ * x y \" ( a ) y ( a ) \" ( a ) x \" * ( b b [ * * * y \" y \" y \" ( b [ ( a ) ] ) y * y \" ( a", "* * y \" y \" ( a ) * ( a ) *", "* x ( a ) y ( b b [ * * x x * y * x ( [ ( b [ * y \" (", "( b b [ * * y \" * * y \" y \" ( b b [ * ( a ) y * ( b b [ ( [ ( [ * x x * ] b [ ( a ) ] ) ( a ) y ( a ) \" * x x * y \" ( [ ( [ ( b [ *", "( a )", "* * x ( a ) y * ( a ) y ( b b b ) \" ( b [ * x x * ] [ * ( a ) y * x * y \" * x ( b [ ( a ) ] [ ( b [ * x * x y \" ( a ) y ( a ) \" ( a ) * x", "* ( a ) y * x x * y * ( a ) x \" ( b [ * x ( a ) x \" ( a ) ( a ) * x y \" y \" * x ( b b b ) y * ( a ) \" * y \" * x x * x x * y ( [ ( b b b ) ] ) x \" ( b [ ( a ) ] [ * x x * ] [ ( b [ * ( a ) y ( [ ( [ * * y \" ( b [ ( a ) x"], "accuracy": 0.2, "train_overlap": 0.2, "res": [{"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -92.57994654076174}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -100.84129018010572}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -89.8304026639089}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -101.37264022906311}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -100.3966517734807}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* x y \" y \" y *", "log_prob": -15.020399677334353}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -105.00182891928125}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -97.95036944444291}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -97.88660564238671}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -97.87096718361136}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -96.6642426995677}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -98.07486326846993}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -18.82248340122169}, {"text": "( [ * x x * ] b b )", "log_prob": -12.702823317900766}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -91.5961129902862}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -87.78304342809133}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -99.72576742339879}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -101.98391650011763}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -89.69179584539961}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -103.4332915940322}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -94.4053702999372}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -97.6114037380321}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -93.17043747368734}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -90.8285341685405}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -88.98271339864004}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -112.4124741635751}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -93.89165191270877}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -23.516494575422257}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -91.81250702263787}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -13.029774882365018}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -91.56283925916068}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -92.35342022159602}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -94.85701849171892}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.10860492044594}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -92.21058900014032}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -27.484283314610366}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "* x x *", "log_prob": -6.484987386036664}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -99.74026482208865}, {"text": "( b b b )", "log_prob": -7.2403784124180675}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -98.91045561502688}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -91.71082641533576}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -87.25440700235777}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -16.7529125251167}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -85.04222907620715}, {"text": "( [ ( a ) ] b b )", "log_prob": -11.624164702312555}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" y \" y x *", "log_prob": -12.649369711987674}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -94.02284172701184}, {"text": "* x y \" y \" y *", "log_prob": -15.020399677334353}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -106.7996034740936}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -96.56242142710835}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -87.63185837038327}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -96.84084884217009}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -99.46132144483272}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -97.72193292458542}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -90.49969621968921}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -98.65827440097928}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -97.56336575746536}, {"text": "( a )", "log_prob": -4.141984059824608}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -103.02208385663107}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -90.2778475524392}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -85.7396615348407}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -100.8969755701255}]}, "epoch_30.pt": {"generated_sequences": ["* x x *", "( [ * x x *", "* \" * x y * x x * x \" y \" * x x * ( [ ( b [ ( a ) ] [ ( a ) ] ) y * ( a ) y ( a ) \" y \" y ( a ) y * x y \" * x y \" ( a ) y * ( b [ * * * * * ( [ ( a ) x \" y \" ( a ) y ( a ) y \" y \" y \" * x ( [ ( a", "* x ( [ ( a ) ] ) ] b b ) ] b b ) \" * * * * ( a ) y ( a ) \" * y \" * * x * * x x * x \" y \" * * x x * y ( a ) ( b [ * y \" ( [ ( a ) ] [ ( a ) ] [ ( a ) ] [ (", "*", "( a )", "( a ) ] b b ) y * ( a ) y * y \" y \" ( [ * x y \" * * x x * y \" y ( a ) y * ( [ * x x * ] [ * * x y \" ( a ) y * x ( a ) x \" (", "( [", "( a )", "( a )", "( [ * y \" ( a ) y ( a ) \" y \" ( [ ( [ * x x * ] b b ) x \" y \" ( a ) y * * * *", "* * x * ( a ) x \" * x x * y * * x x * * x * x ( a ) y * y \" ( [ * y \" y \" ( a ) y \" * x * x ( a ) y \" ( [ * * ( a ) *", "* ( a ) ] ) y ( a ) \" * ( b [ * * * x y \" * x x * y ( [ * * x ( b [ * x ( a )", "* ( [ ( a ) ] b b ) ) y ( b b [ * x x * ] b [ * x ( b [ ( a ) ] [ * y \" ( [ ( a ) ] ) y * y \" ( a ) * x y * * * x ( [ ( a ) ] [ ( a ) ] [", "* x * ( a ) y ( [ ( b b [ * ( a ) y * ( [ ( a ) ] b [ ( a ) ] ) \" y \" * * y \" y \" * x * y \" y \" * y \" ( a ) y * x ( a ) y * * x * y ( a ) y ( [ * x * ( [ ( [ ( a ) ] [ * * x x * x * \" * x", "( b b [ * * x * * x x * y * y * * * y \" ( a ) y * * x x * \" * * x x * y * ( [ * x x * ] [ ( a ) ] b [ * x x * ] [ * * x * ( a ) ] b b [ ( b b b ) y ( [ * x y \" ( [ ( a ) ] [ ( [ * y \" * *", "( a )", "* * x y \" * x * * * x ( a ) ( a ) y * x y \" y \" * x y \" y \" * * * * x y \" ( a ) y ( a ) \" ( a ) y * ( a ) y ( a ) \" * y \" * y \" ( a ) y * * y \" ( a ) y * * * y \" y \" ( [", "( [ ( a ) ] b [ * x y \" ( [ ( [ * * x * * * ( [ ( b b [ ( a ) ] b ) x \"", "( b b )", "( [ ( [ ( a ) ] b b ) y * ( [ * x ( a ) y * * x * y ( b b [ * ( a ) y ( a ) \" ( a ) x \" * x ( a ) x \" y ( a ) * ( a ) * x ( a ) y * ( b [ ( [ ( a ) ] a ) ] b b [ * x ( a )", "( b [ * * * x * x x * * y * ( [ * x x * ] b [ ( a ) ] ) \" * y \" * x y \" y \" y * ( [ * x * * ( a ) x \" * x x * x \" y \" ( a ) * ( a ) y ( a ) \" * ( b b b b ) y * * ( a ) x \" y \" (", "* * * ( b [ * * ( b [ * ( a ) y * ( a ) ( a ) \" * ( [ ( a ) ] [ * * * y \" * y \" * \" * ( [ ( a ) ] [ ( b [ ( a ) ] ) x \" ( [ * x y \" * y \" y \"", "* y * x ( [ * x y \" * x ( a ) y * \" y \" * * x y \" * * y \" y \" ( b b b ) x \" ( a ) x \" ( [ * x ( a ) y * * x x * \" ( [ ( b b b ) ] [ ( a ) ] ) * ( a ) y * * ( [ ( [ * y \" ( [ * x *", "* x y \" y \" * ( [ ( a ) ] b ) y ( a ) \" * ( b [ ( a ) ] ) y * * x ( b b b [ * * x x * ] [ * y \" y \" * * y \" * * * y \" * y \" ( a ) ( [ * y \" y \" ( a ) y * ( a ) x \" y \"", "( a ) ] b [ ( b [ ( a ) ] [ * y \" ( [ ( a ) ] b ) y * * ( a ) y * y \" y \" ( [ ( a ) ] b b ) y * ( [ ( a ) ] b b ) y ( b b b ) \" ( a ) y ( b b b ) \" y \" y * \" y \" * x x * x \" y ( a )", "( a )", "* x * ( a ) x \" y \" * ( b [ ( b b [ ( a ) ] ) y ( a ) \" * x y \" ( a ) x \" ( a ) x \" ( a ) y ( [ ( a ) ] [ * * * x ( b", "* * x y \" y \" * x * y ( a ) \" ( b b [ ( a ) ] ) y ( a ) \" * x y \" y \" * ( [ * ( a ) y ( a ) \" * x ( b b [ * x y \" ( a ) * * x y \" y \" ( a ) y ( [ ( [ ( a ) ]", "* x x * y * x * x ( [ * * x x * * * * ( [ * x * ( a ) y * ( b b b [ * ] ) y \" ( a ) y * x y \" * ( [ ( b b b b ) ] b ) y ( a ) \" * x x * ( b [ ( a ) ] b ) ( a ) y * ( b", "* y \" ( [ ( b [ ( a ) ] [ ( a ) ] ) y * x x * \" y * ( a ) y * * ( a ) * x x * y \" * * x * ( [ * * * (", "* x * ( b b b b )", "* * * y \" y \" * * x y \" ( a ) y \" y \" * * y \" y \" y \" ( a ) * x * y \" * * * x * x * ( a ) y ( a ) \" * x ( a ) y * x * * y \" * ( b b b [ * * x ( a ) x \" y ( [ ( a ) ] [ * y \" ( a ) y ( a ) \" ( a )", "( b b b [ * ( a ) ( [ * * * x ( a ) y * y \" ( [ * ( b [ ( b b [ ( a ) ] ) y ( a ) \" * ( [ * ( a ) y * x x * \" * x y \" * ( a ) y ( [ * y \" * x * x ( a ) y * y ( a ) x \" y \" * y \" *", "( b [ * x ( [ * * x x * ] [ * ( a ) y * y \" ( b b b [ * x y \" ( a ) y ( a ) ( a ) \" * x * ( a ) ( a ) y ( a ) \" * y \" ( a )", "( a )", "* x * * * x y \" * ( a ) x \" y \" y \" * x x * x y * ] b [ ( a ) ] [ * * * x ( [ ( [ * y \" * x ( a ) y \" y \" y \" * ( b [ * x * x * ( [ * * * ( a ) y * * x x * y * x y ( a ) \" * * x y \" * * * x", "* * ( b [ * ( a ) y * ( a ) y * x ( a ) \" ( [ ( a ) ] [ * x x * ] [ ( b [ * * x * ( a ) ( b [ * x y \" * x ( a )", "( [ ( a ) ] [ ( a ) ] b [ * y \" y \" * ( [ ( a ) ] b b ) ( a ) y * x x * \" * ( a", "( a )", "( b b ) ] b b [ ( a ) ] [ ( b [ * * x x * ] b ) ] b [ * y \" * x y \" * y \" y \" * ( [ ( b b b [ ( a ) ] [ ( a ) ] ) y * x * y \" ( b [ * x y \" ( a ) y ( a ) ] b [ * x y \" ( a", "* y \" ( [ * y \" ( a ) y * ( b [ * * x y \" * * * * * * x x * y * x * x * ( a ) ( a ) ] b [ ( b [ ( b b b b b ) ] ) x \" ( a ) * * x x * y * y \" * y \" y \" * (", "* * x * y ( [ ( a ) ] [ * ( a ) y * x y \" ( [ ( a ) ] b b ) \" ( a ) y * x x * \" * * * y \" ( a ) y * y \" ( a ) y * * ( a ) ( b b b b ) y * * x x * y * y \" * x * ( a ) y ( a ) y ( [ * ( a", "* y * * ( [ ( a ) ] b [ * ( a ) ( b [ * * y \" * x x * y ( b [ ( [ * x x * ] b [ *", "( [ ( a ) ] [ ( b b b [ ( a ) ] [ (", "* x ( a ) y ( b b b b ) \" ( a ) y * x y \" ( [ * x ( b b b [ * y \" * * x x * * * * ( b b [ * x x * ] ) y ( a ) ( b b b ) \" ( a ) y ( a )", "* y \" ( a ) y * y \" ( [ ( [ * * ( a ) ( a ) * x y \" * x x *", "* ( a ) y * x ( a ) y ( a ) \" ( a ) x \" ( a ) y \" ( a ) y * * y \" * y \" y \" * y \" * y \" * x x * ( a )", "( a )", "* x * ( b b b )"], "accuracy": 0.18, "train_overlap": 0.18, "res": [{"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -90.39053393655922}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -99.02436685131397}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -87.7256456555333}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -100.20656892878469}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -97.93135673977667}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* x y \" y \" y *", "log_prob": -13.423289094003849}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -101.95799681474455}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -100.49338447221089}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -96.41035774780903}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -96.41072156082373}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -96.50119557860307}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -99.92090980778448}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -18.53323393315077}, {"text": "( [ * x x * ] b b )", "log_prob": -10.821833580266684}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -88.83144200663082}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -86.51449417532422}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -97.0816271478543}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -100.04858979256824}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -91.73667614394799}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -98.71449475095142}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -92.10208260675427}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -91.89256675424986}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -90.64464895881247}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -88.75415578763932}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -91.4907698223833}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -114.266881166026}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -92.1826883435715}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -24.126256373652723}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -88.54999953426886}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -10.736129152588546}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -90.67752304743044}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -94.27353067463264}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -97.298997552949}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.26120730652474}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -90.14233915240038}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -22.60435658111237}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "* x x *", "log_prob": -5.697772903367877}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -93.9050232473528}, {"text": "( b b b )", "log_prob": -6.5800137631595135}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -95.69783533283044}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -91.63585844391491}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -90.41559766186401}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -14.74577188922558}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -79.95656376844272}, {"text": "( [ ( a ) ] b b )", "log_prob": -8.391263936297037}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" y \" y x *", "log_prob": -10.98071996634826}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -95.93611406034324}, {"text": "* x y \" y \" y *", "log_prob": -13.423289094003849}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -103.6763813389698}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -101.27787117217667}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -86.25455550302286}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -96.8500790137332}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -97.66888549993746}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -98.48080773011316}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -89.91587106336374}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -93.16133446525782}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -96.04363778955303}, {"text": "( a )", "log_prob": -3.096909432904795}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -99.90356556349434}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -92.05824076861609}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -84.76924204872921}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -97.64070012769662}]}, "epoch_35.pt": {"generated_sequences": ["( a ) x \" (", "( a )", "( a )", "* x * ( b [ ( a ) ] b ) y * x * y \" * x x * x \" * x x * x \" * y ( b [ ( b b ) ] ) ( a ) y * y \" ( a ) y ( a ) \" * y \" ( a ) y \" * x x * x \" y \" ( a ) y ( b [ * x ( [ * ( b b b [ * x x * x * ] [", "( b b [ * y \" ( b [ * y \" ( a ) y ( a ) \" ( a ) * x * ( a ) y ( b [ ( a ) ] [ * x ( a ) y \" * * x ( a ) y ( a ) \" y \" y \" * x y", "( a )", "( a )", "( b [ ( a ) ] [ * x y \" ( a ) x \" * x x * y ( a ) \" ( a ) x * x ( a ) x \" y \" y ( a ) y ( [ ( [ ( a ) ] b ) ] b ) ] [ ( [ ( b [ * * y \" y \" * y \" * ( [ * x * y ( b [ * * * x x * y * x ( a )", "( a )", "( a )", "* x x * y ( b [ * x x * ] [ * * y \" * x x * y ( b b b ) \" ( b [ * x ( [ * ( b b b b ) y ( a ) \" ( a ) y * x x * \" ( a ) y * * x ( a ) y \" ( a ) y ( a ) \" ( a ) y ( a ) \" ( a ) y ( [ ( b [ * x x * ]", "* ( [ ( [ * * y \" ( a ) ( a ) * ( a ) y * y \" ( a ) y * x x * y * x x * y ( [ * y \" ( b [ * x x * ] [ ( a ) ] )", "* y \" y \" y \" ( a ) y * ( a ) x \" * x x * y ( a ) \" ( b b ) ] ) y \" ( a ) y * x x * \" y x * y ( a ) \" ( a ) y", "( b b b ) ( b [ * y \" * y \" ( b b b ) y * y \" * x y \" y x * y * x x * ] b b ) x \" y * y * * * y \" ( a ) y * ( b b b ) y ( [ * x x * ] [ * * y \" ( b b b ) (", "* x x *", "( b b b ) ] [ * x x * ] b b ) y * ( [ * x x * ] b [ * * * ( a ) y ( a ) \" * y \" * * x x * y ( a ) \" * x x * y * * y \" * x x * y ( a ) \" * y \" ( [ ( b b ) ] b ) ] [", "( a ) y ( a )", "* x x *", "* x x * y * * * * x * ( a ) y ( a ) \" * ( b b b ) y \" y \" * x * ( b b b ) y * x ( [ * ( b [ * x ( [ * * ( a ) x \" ( a ) y * x x * \" ( a ) y ( a ) * x y \" y \" y * * x ( b [ * * y \" *", "* ( a ) ( b [ * ( b [ ( a ) ] b ) y * y \" ( a ) * y \" * ( a ) x \" y y \" * x ( a ) y ( a ) \" * * * y \" y \" ( b [ ( a ) ] [ ( b [ ( b b b ) ] ) ( a ) y ( a ) \" y y \" y \" ( a ) ( [", "* y \" * ( b b [ * x x * ] b b ) ] b ) ] [ * ( [ ( a ) ] b b [ ( a ) ] b ) y ( [ ( a ) ] [ * * y \" * x x * y * y * * ( b b ) y ( a ) \" ( a ) y", "* y \" y * x x * ( a ) ( a ) y * * ( [ ( b b b ) ] b )", "* * ( a ) y * ( a ) y \" ( b b [ * x x * ] [ ( [ * * * x y \" ( a ) x x * y ( a ) \" y * x x * x * y * * x * y \" y * x x * y * y \" x ( a ) y ( [ ( [ * ( a ) x \"", "( a ) ] b ) y * ( a ) x \" * ( b [ ( a ) ] [ ( a ) ] ) y * x x * y ( b b b [ * x x * ] ) y ( a ) \" y * ( b [ ( a ) ] [ ( a ) ] [ * ( b [ ( a ) ] b ) y * x * x ( b b b ) ( [ ( a ) ] ) ] [ ( b b [ ( a ) ] ) ]", "* x y \" * x x * y ( [ * y \" ( a ) y ( a ) \" * * y \" y y \" ( b b [ * y \" y * ( b b ) ( [ * * ( b b b ) y * x y \" * ( a ) * x ( a ) * x x * y * y \" y \" ( a ) y ( b b ) y", "* * ( a ) y ( a ) \" * x ( a ) y * y \" ( [ * x ( [ * y \" ( a ) y * * y \" ( a ) y * x ( [ ( a ) ] [ ( [ ( a ) ] b [ ( [ ( [ ( a", "\" * y \" y \" * y \" * ( a ) ( [ * x ( a ) x \" y ( b [ * x ( a ) ( b b b ) ] [ ( a ) ] b b ) ] b ) y * * x * * * x ( b [ * ( b [ ( a ) ] ) ] b b ) x \" * y \" * y \" ( a ) x y * * x x * y \" y \" y \" ( a ) y ( [ ( b [ (", "( [ * ( a ) x \" ( b b [ ( [ * * * * x y \" * x * y ( a ) \" ( b [ ( b [ ( a ) ] ) y * y \" ( b b [ ( b b ) ] b [ ( b [ * y \" * * ( a ) x \" ( a ) y ( [ ( a ) ] b b ) * x ( [ * * y \" ( [ ( b", "* x * * x ( b b [ * y \" ( a ) y ( [ * * x y \" ( a ) ( [ * ( b b b ) y * x x * \" ( [", "* ( a ) y * ( a ) y ( b b b ) y * x * x ( a ) x \" * y * x y \" * y \" ( a ) * x * y ( b [ ( [ * x x * ] [ * y ( a ) \" x * ( a ) * ( b [ * * x y \" y \" ( a ) y ( a ) y", "* y \" y \" y * y \" * x * ( b [ ( [ ( b b b ) ] ) ] [ * ( a ) * x x", "( a )", "y \" ( a )", "( a )", "* ( a ) x \" y \" * x ( b b [ * x * y \" * x * x y \" ( [ * * * x y \" * y \" ( a ) x \" ( a ) y ( a ) * y \" y \" * ( a ) x * x y \" ( a ) y ( a ) \" ( a ) y * ( [ * y \" * * x x * y * * * ( a ) y", "* x * ( a ) y * ( a ) y * ( a ) ( [ ( b [ ( b b b ) ] [ ( [ ( b b b ) ] b ) ] b ) y ( [ * x ( a ) x \" ( [ ( a ) ] b b ) y * y \" * x x * y * y \" ( a ) y * ( a ) \" * y \" y \" * ( b b b ) y * y \" y \" * x \" *", "* * x ( a ) y ( b b [ ( a ) ] [ * x * * ( a ) y ( a ) \" ( b [ * * x y \" * * ( a ) y * ( a ) x \" ( b [ * y \" * x ( a ) y * x y \" y * x y \" y \" ( a ) * x x", "* y \" * ( a ) y * x x * y * * * ( b b b ) x \" * x * * * ( a ) y * ( a ) ( [ * x ( b [ ( a ) ] b ) y * ( [ ( a ) ] [ * x ( a ) ] b ) y \" y \" y \" ( b b b ) y ( a )", "( a ) y ( [ ( [ * x ( b b [ ( a ) ] [ * x * ] b [ ( [ ( a ) ] b ) ] [ ( b b ) ] ) x \" ( b b ) y * * * x y \" (", "* x * x y \" * ( a ) ( a ) y ( a ) \" y \" ( b b [ * x x * ] ) x \" y * y \" ( b [ * x x * ] ) y ( a ) \" * * ( a ) y \" * y \" * x y \" * * * y \" ( [ ( [ * x x * ] b b ) x \" y ( a ) y ( [ ( b [", "* ( a ) x \" y \" ( a ) x \" y x * ] [ ( [ * y \" * x y \" * y \" ( a ) y ( a ) \" y \" ( a ) y * x ( a ) y \" * ] b ) * x x * ( a ) y ( b [ * * y \"", "* ( a ) y \" y \" ( b b [ ( a ) ] [ ( a ) ] ) y ( [ * x x * ] [ ( a ) ] b b ) ] b ) * ] b [ * ( b b [ ( [ ( [ * * y \" ( a ) y ( [ ( b b b b ) ] b b ) y ( a )", "* x x x *", "* * ( b b b [ * y \" * x x * y ( [ ( a ) ] b ) \" y * x ( b b [ * * * y \" y \" * ( b [ * x x * ] )", "( a )", "( a ) y * * ( a ) y ( b [ ( [ * y \" ( [ ( a ) ] b [ * * x ( a ) y ( b b [ ( a ) ] b ) \" ( a )", "( a )", "( a )", "* x * x * * * x ( [ * x x * ] b [ * ( b [ ( a ) ] ) ] [ ( a ) y * ( [ ( a ) ] [ * ( a ) y * x x * \" ( [ ( a ) ] [ * y \" ( a ) y ( b [ * * x x * ] [ * ( b b [ ( b b [ ( a ) ] b ) ] b", "* x * * x x * y * y \" ( b [ * * x * y ( [ * x ( b [ * * * y \" y \" * ( a ) * ( [ * y \" ( [ ( a ) ] [ ( a ) ] b ) y \" ( b b [ * x x * ] ) y ( b b )"], "accuracy": 0.26, "train_overlap": 0.26, "res": [{"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -90.15216374956071}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -95.576001963811}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -90.29222150752321}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -98.28620797523763}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -94.54795541591011}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* x y \" y \" y *", "log_prob": -12.1799448907841}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -101.28451272740494}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -100.54182483803015}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -100.202963145799}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -98.73225984931923}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -95.90788536355831}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -98.999615784036}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -17.028895082883537}, {"text": "( [ * x x * ] b b )", "log_prob": -12.320228458876954}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -85.97686578088906}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -86.44869825651404}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -97.90719454735518}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -96.41067774407566}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -90.56349300360307}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -92.79816604452208}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -91.01397184166126}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -90.66610462858807}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -89.34799257200211}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -88.90165065194014}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -88.27791379066184}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -110.9962049855385}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -94.91273341351189}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -22.246732190600596}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -87.75446165818721}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -12.29710869077826}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -87.1018042099895}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -93.40726274170447}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -94.80664201965556}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.10646353289485}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -89.34704573685303}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -23.163054999371525}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "* x x *", "log_prob": -5.67497021832969}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -90.99960483273026}, {"text": "( b b b )", "log_prob": -6.917421323130839}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -94.15143749024719}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -94.46384754881728}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -85.16268479113933}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -15.761590272828471}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -71.35213633975945}, {"text": "( [ ( a ) ] b b )", "log_prob": -9.828573708655313}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" y \" y x *", "log_prob": -9.661501373746432}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -95.02153553627431}, {"text": "* x y \" y \" y *", "log_prob": -12.1799448907841}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -98.09189348563086}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -96.25576202140655}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -84.46002520085312}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -94.01892569637857}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -97.72673509526066}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -96.01309556141496}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -88.78490176610649}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -93.02670535736252}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -95.50754007906653}, {"text": "( a )", "log_prob": -3.2559111251030117}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -100.09655941743404}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -88.38730511430185}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -87.55694006744307}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -92.57692116778344}]}, "epoch_40.pt": {"generated_sequences": ["( a )", "* ( b [ * ( b [ * x ( a ) y ( b b b ) \" * x ( [ ( [ ( a ) ] b [ * * x ( a ) y * y \" y \" y * ] [ * * * x * ( a ) y * x x * \" ( a ) y ( b [ ( a ) ] [ ( [ * x ( [ * x * ] [ * y \" * y \" ( a ) y ( a ) \" y \" ( [ *", "* x ( a )", "* ( b [ * y \" * y \" * * x x * y ( b b b [ ( b b [ * y \" y \" ( a ) y ( a ) \" y y *", "( a )", "* ( a ) y *", "* (", "* x ( a ) y ( a ) \" ( a ) y ( [ ( b b [ * y \" y \" y * ] [ ( a ) ] b ) y * x y \" y \" ( [ ( a ) ] ) x \" y \" * x y \" * x x * y * y \" y \" ( a ) y ( a ) ( a ) \" ( b [ ( [ ( a ) ] [ ( a ) ] ) y (", "* * ( [ ( [ ( [ ( a ) ] b [ * x x * ] b b [ ( a ) ] [ * ( a ) * * x * ( a ) y ( b b [ * * ( a ) y * y \" ( a ) x \" * x * x \" y \" ( a ) * * * x ( a ) x \" ( a ) x \" ( a ) y * * y \" ( a ) y \" * ( a ) * * ( b b * ( [ * x ( a ) y * x * x ( a ) ( b [ ( a ) ] ) ( a ) ( a ) y ( a ) \" * x x * y ( [ * * * y \" ( a ) * y ( [ * x x * ] [ * * x x * ] [ ( b [ * x * ( a ) y * x * * * x ( a ) y * ( a ) y ( a ) \" y \" y \"", "* y \" ( [ * * * y \" * y \" ( [ ( [ * * (", "] [ * x * ] [ * ( b b b ) y * * x ( b b [ * ( a ) y * x y \" y \" ( a ) y ( a ) y ( [ ( [ * ( [ * ( [ * y \" y \" ( b b b [ ( [ ( a ) ] b ) ] b b ) ] [ ( a ) ] [ ( b b ) ] ) ] [ * ( b b ) y * x x * \" y ( [ ( [ ( b * x x * y ( a ) \" * * * x x * y ( a ) \" y \" * ( a ) y * x x * \" y ( [ ( a ) ] b ) \" * x x * ] ) * y ( a ) \" ( a ) * x y \" y \" y \" ( a ) y ( a ) \" * x * x x * y * y \" y \" ( a ) y * y \" y \" y \" ( a ) x \" y * ( b", "* ( a ) ( a ) y ( [ ( a ) ] [ * x y \" ( a ) x \" ( a ) y ( a )", "( a )", "( a )", "* x x *", "( b [ ( a ) ] [ ( a ) ] b ) y * * ( [ * x y \" * ( b [ ( [ ( a ) ] [ * ( a ) y * ( a ) y ( a ) \" ( a ) x \" y \" ( a ) x * y * * * y \" ( [ ( a ) ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( [ ( a ) ] b [ ( [ ( a ) ] b ) ] ) ] ) y", "* x x *", "* x x * x y \" * ( b [ ( a ) ] b ) ] [ ( [ * ( [ ( [ * y \" y \" * x ( b b b [ ( a ) ] b b ) ] [ * y \" y \" ( a ) ( [ * * x x * ] b ) y ( [ ( a ) ] b [ * ( [ * x x * ] b b ) x \" y \" ( b b )", "( a )", "( a )", "* ( b [ * x x * ] b ) ( a ) x \" * * * x ( [ ( a ) ] b [ ( b [ * ( a ) y ( b [ ( a ) ] b b ) \" ( [ * ( a ) y * y \" * ( a ) y ( [ * ( a ) y * ( a ) y ( [ * ( a ) y ( b [ ( [ * x * y \" ( b [ ( a ) ] b ) ] ) y * ] b [ ( b [ * x x * ] b * y \" * ( a ) y ( [ * * ( a ) y * x y \" y \" ( [ ( a ) ] b b ) x \" y \" * x ( a ) * * * ( [ ( a ) ] [ ( b [ ( [ * x ( a ) ] [ * * x x * y * x y \" ( a ) * y * ( a ) \" * y \" ( a ) ( a ) ( [ ( a ) ] [ * y \" * y \" y \" ( [ ( a ) ] [ ( a ) ] )", "* (", "* ( a ) ] [ * x * x * * * * * * x ( a ) y \" * y \" ( b [ * ( a ) * ( [ * * x ( [ * y \" y \" y \" * x x * y ( b [ * * * x x * ] b ) y ( [ ( a ) ] b b ) \" ( a ) x \" * y \" y \" ( a ) y * y \" ( a ) y * x x * y * x \" * ( [ (", "( b [ ( a ) ] b b ) ( [ * y \" y \" * x x * y * ( b b b [ ( [ * ( a ) x \" y \" * x * x x * y ( a ) \" * y \" ( b [ ( [ ( [ ( a ) ] b b ) ] ) y \" y \" y \" y * ] [ ( a ) ] ) ( a ) y * x y \"", "* ( a ) y * x ( a ) ( a ) y ( a ) \" * x * x x * y * * x ( a ) * ( a ) ( b [ * ( b [ * * ( a ) y * x * y \" * x * ( a ) y * y \" y \" y \" * y \" y \" ( a ) y * * * x ( a ) * x ( b b [ *", "* x y \" * * x * y \" y \" * y \" ( a ) * x ( a ) x \" ( a ) y ( a ) * y \" y \" ( b b [ ( a ) ] ) y * y \" * x ( [ ( a ) ] [ * x * ( a ) x \" ( a ) y ( [ * y \" ( b [ ( [ (", "* x x * * ( a ) y * x x * \" y \" * x x * x \" y ( b b [ * y \" y \" * x * * x * ( b [ * x x * ] ) y ( a ) \" ( a ) y ( [ * x x * ] b [ ( a ) ] [ * x x * ] ) y * y \" y \" y ( [ ( [ ( b [ ( a ) ] b ( [ ( a ) ] b [ ( [ * ( [ * * ( a ) y * * y \" ( a ) ( a ) * * * x ( [ * x x * ] b ) ] ) y * x x * \" y ( a ) x \" * x x * y * ( [ * x x * ] [ ( a ) ] [ ( a ) ] [ * ( a ) y ( a ) \" * y \" * y \" y \" ( [ * y \" * * y \" ( a ) y * y \" y \" ( a ) ( b b ) y * ( [ ( a ) ] [ * x x * ] [ ( [ * ( a ) y ( a ) \" ( a ) y ( a", "* * x x * y ( [ * * y \" * ( b [ * ( [ ( [ ( a ) ] [ * y \" * y \" y \" ( a ) y ( b b [ ( a ) ] ) \" * x ( [ * x x * ] b b [ * ( a ) y ( a ) \" y \" * x * x * * y * x * y \" * ( a ) * x ( b [ ( [ ( a ) ] b ) ] ) y ( a ) \"", "* x ( [ * y \" y \" y y \" y \" y x * y ( a ) \" ( a ) y ( b [ ( b b [ ( a ) ] b ) ] [ ( a ) ] [ * x y \" * * x x * y ( b [", "* * * x x * * y \" y \" y * y \" ( b [ ( a ) ] b [ ( a ) ] b ) y ( a ) \" ( b b ) y * x ( a ) x \" y \" y \" ( a ) y ( a ) y ( a ) \" ( a ) ( a ) y * * x y \" ( a ) y * x * y \" ( b b b ) * * * * * x x * y ( a ) \" ( a", "\" y ( [ ( a ) ] b b ) ] [ ( b b b [ ( a ) ] b", "* x x ( a ) y ( a ) \" y \" y * x x * ] ) x \" * ( [ * x x * ] [ * x x * ] b [ ( b [ ( a ) ] [ ( a ) ] ) ] ) x \" ( a ) y ( [ * x * ] [ * ( a ) y * * x ( a ) * ( a ) y ( b b ) \" y \" * * x * y \" ( a ) y * * * * x y \" y \" * ( [ ( b [ ( [ ( a ) ] b )", "* y \" * * ( a ) y ( [ ( a ) ] [ * x x * y ( a ) \" * x ( a ) ( a ) y * y \" * * ( b [ ( a ) ] ) y ( b b [ * ( a ) * y \" ( b [ ( a ) ] [ ( a ) ] ) ( a ) ] ) y ( a ) \" * x * ( b b b ) y \" ( b b b ) ( b b ) y ( b", "* y \" y \" ( a ) y ( a ) \" * * * x x * y ( a ) \" y \" * x x * y * x * x ( b b ) x \" ( a ) * x ( a ) y ( [ ( a ) ] [ ( b [ * y \" ( [ ( a ) ] [ * * x y \" ( [ * y \" y \" * x x * ( b b [ ( a ) ] b ) ] [ * (", "* ( [ * x x * ] [ * ( a ) ( [ * * x x * y * x x * \" ( [ ( [ * y \" * x y \" * y \" ( a ) y ( b b b ) \" ( a ) y * y \" ( a ) y * * * ( b [ * y \" ( [ * y \" y \" ( a ) y \" * * x x * y * x ( a ) y ( a", "* x y \" * ( [ * ( a ) y ( a ) \" ( a ) y \" * x y \" y \" ( [ ( [ ( b [ ( a ) ] b ) ] [ ( b b [ ( a ) ] [ ( b [ * * ( a ) y ( a ) \" * * x x * y * x ( a ) y * x ( [ ( b [ ( b b ) ] ) ] [ ( a ) ] b ) \" ( [ ( a ) ] [ ( [", "* ( a ) y * * ( b b [ ( a ) ] b ) y * ( a ) y * ( b [ * x x * ] [ ( a ) ] b ) y \" ( [ * * * x x * y ( b [ ( a ) ] ) \" * * x y \" ( a ) ( a ) y * x ( a ) ( a ) y * ( b", "* x * * ( a ) y ( a ) \" * ( a ) * * x x * y * y \" ( [ ( a ) ] b b [ * * ( b b ) y ( b [ ( [ ( [ * ( b b b b ) y * ( [ * x x * ] [ ( [ (", "( b [ ( b [ ( a ) ] b ) ] b ) ] b b ) y ( a ) \" * * x x *", "* ( a ) x \" ( a ) y * x *", "( [ * y \" * x * ( a ) y ( [ * ( a ) y ( a ) \" * ( a ) y * * ( [ ( a ) ] [ ( a ) ] b ) y * y \" ( b b [ ( a ) ] [ * * ( a ) * x y \" y \" * ( [ * y \" ( a ) y \" ( [ * ( a ) y ( b [ * * y \" * y \" y \" ( a ) x \" ( a ) y ( a )", "* ( a ) y * y \" * x ( [ ( a ) ] b ) x \" ( [ ( a ) ] b [ ( [ ( [ * x x * ] b )", "( a )", "( b a )", "( b b b )", "( [ ( a )", "( b [ ( b [ ( a ) ] b ) y * x ( a ) y ( b b b ) \" ( a ) y ( a ) \" * x y \" ( [ ( a ) ] b [ ( b b ) ] ) x \" * ( a ) y ( a ) \" ( a ) y * x x * \" ( [ ( b [ ( a ) ] b b [ * ( a ) y ( a ) \" ( a ) y", "* ( [ * y \" ( a ) ( a ) ( a ) \" y \" y * ( a ) y ( b [ * y \" y \" * x ( [ ( [ * * ( b b [ ( a ) ] [ * x x * x \" * x x * ( b b ) y ( b b b ) \" y \" * * y \" * * ( a ) y ( a ) \" y \" ( b [ * y \" * ( a ) y * y \" * x x * y * y", "* * * ( b [ * ( [ * x * * y \" ( a ) ( a ) y * x x *", "( b [ * x x * ] b [ ( a ) ] [ * * y \" y \" ( a ) y ( b [ * y \" * * x y \" ( a ) * ( a ) y * ( a ) y * y \" * * x x * \" * x ( b [ * ( b [ ( a ) ] b ) ] ) ] [ ( a ) ] [ ( a ) ] b b ) ]"], "accuracy": 0.2, "train_overlap": 0.2, "res": [{"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -88.78855925425887}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -98.42888841382228}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -85.30992067896295}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -101.41727404447738}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -93.53511214716127}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* x y \" y \" y *", "log_prob": -11.377932177856565}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -99.89282163296593}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -101.51543123251759}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -96.397171567427}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -97.14032093493734}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -95.07735775993206}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -98.51443065376952}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -15.203409312292933}, {"text": "( [ * x x * ] b b )", "log_prob": -12.228831113898195}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -83.153369704145}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -84.79264410119504}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -96.47397279570578}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -96.07322069676593}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -86.61652137542842}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -92.52878777304431}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -91.00764867465477}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -90.04007029708009}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -91.34590217383811}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -90.0532345866086}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -83.98460542655084}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -108.5267312428332}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -88.85213931649923}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -21.19927207310684}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -84.71819028496975}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -11.923971648764564}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -85.57332327938639}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -91.07619731698651}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -94.72967140597757}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.000245831208304}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -88.43986761011183}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -22.61597195122158}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "* x x *", "log_prob": -5.008606794290245}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -92.73195781745017}, {"text": "( b b b )", "log_prob": -7.361330304644071}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -94.90119093499379}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -88.44903128041187}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -83.9090767269372}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -16.93477532916586}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -74.97788883961039}, {"text": "( [ ( a ) ] b b )", "log_prob": -9.084296885936055}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" y \" y x *", "log_prob": -9.090580304269679}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -87.91969736694591}, {"text": "* x y \" y \" y *", "log_prob": -11.377932177856565}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -97.8224829029059}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -94.22304351534694}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -84.300579475821}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -88.72074863285525}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -96.14886058215052}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -94.69947616697755}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -87.39220583066344}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -88.55107616621535}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -94.55564882513136}, {"text": "( a )", "log_prob": -3.0228362248744816}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -97.18281969567761}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -86.75207467930159}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -83.57386353117181}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -90.09206882485887}]}, "epoch_45.pt": {"generated_sequences": ["* ( [ ( a ) ] [ * ( b b [ * x * x * x * y * * y \" y \" * ( [ ( a ) ] b b ) * ( a ) * * ( [ * * x ( a ) x \" * * x * * x x * y \" * x x * * x y \" y \" * * * x x * y ( [ ( b b b ) ] b [ ( a ) ] ) y ( [ ( a ) ] [ * x ( a ) x \" *", "( a )", "* ( b [ * y \" * x x * * ( a ) x \" * x x * y ( a ) \" y \" * x y \" ( [ * ( b [ * x ( [ ( a ) ] b ) ] b [ * x x * ] ) y ( b [ ( a ) ] b ) \" * * y \" ( a ) x \" * x x * y * x * x y \" y \" ( a ) y ( a ) \" * x ( a )", "* ( [ * y \" y \" ( [ * * y \" y \" y * x ( b [ ( a ) ] ) x \" y \" * y \" y ( a ) \" ( b [ * x ( a ) y * x * ( [ ( a )", "* ( a ) y ( a ) \" * y \" ( b b b ) y ( a ) \" ( b [ * x x * * y \" ( a ) y * x x * y \" ( b b [ * x y \" * y \" * * x ( a ) y * x * x * x x * y ( b [ * y \" * ( b b [ ( b b ) ] [ * x * x x * y ( a ) \" y * y ( [ ( b [ * ( a ) y", "( a )", "* y \" * x y \" * * * * * ( a ) y * x y \" * * * x ( [ * y \" y \" * ( a ) ( b b [ * * y \" ( a ) x \" * y \" y \" ( [ ( b [ * * x (", "* y \" ( a ) * x x * ( a ) y \" y \" y y x * x * \" y ( b b ) y ( a ) \" y \" ( a ) y ( b b [ * x ( a ) x \" y \" y \" y * ] b b ) y ( a ) \" * y \" * * x x * y * x ( a ) ( a )", "* x y \" ( a ) y ( b [ ( a ) ] b ) \" * x ( a ) y * ( a ) ( b b [ * y \" ( b b b ) x \" * x y \" * * y \" ( b [ ( a ) ] ) y ( a ) \" * * x * x x * x \" ( a ) y ( [ * x x * ] b b ) \" y \" ( [ ( a ) ] b b ) y ( [ ( a ) ] b )", "( a )", "* x * y ( [ ( a ) ] b ) \" ( a ) y ( b [ ( a ) ] ) * x x * y * ( a ) y * y \" y \" ( a ) x \" ( a ) y ( [ * x x * ] [ ( a ) ] b ) y * ( b [ ( b [ * * x ( a ) y * x ( [ * x ( a ) y ( a ) \" * x x * y * y \"", "* y \" ( a ) ( a ) y * * y \" ( b b b ) y * * ( a ) y ( a ) y ( [ ( a ) ] b [ ( [ * x x * ] [ * x ( a ) * * * * x ( a ) y * * * x y \" y \" * x x * y * x ( a ) y * x x * \" * x ( [ * x x * ] b b ) y * y \" * ( [ * x x * ] b b ) ( b", "* * * ( a ) y * x y \" y * x y \" * y \" ( a ) y * x x * ( [ * x y \" y \" * ( a ) x \" * * x x * y ( a ) \" y \" ( b b b ) y * ] ) x \" ( a ) * * ( a ) y * x ( a ) ( a ) y * x x * \" ( b [ * * x ( [ * * x y \" * * ( a ) y * ( a )", "( [ ( b b [ ( b [ * x * ( a ) y * * ( a ) * x ( a ) y ( b b b ) \" * ( a ) x \" ( [ * x * * ( [ ( b [ * * ( a ) y \" * x y \" y \" ( a ) y ( a ) y * x x * y * y \" y \" * x x * y ( a ) \" * x ( a ) y \" ( a ) y \" * x ( a ) y", "* ( b [ ( a ) ] ) y * x y \" ( a ) * * x x * x * y * y \" * ( b b [ * x * * x * y \" ( [ * ( a ) y * ( a ) y * ( a ) x \" ( a ) y \" ( b b [ ( [ * x y \" * y \" * * * ( [ ( a ) ] [ ( a ) ]", "* y \" y \" ( a ) y * * x * x ( b b ) y * y \" ( a ) y \" y \" * x x * y ( [ ( b [ * ] [ * * ( [ * x * ( a ) y ( a ) \" y x * ] ) y * ( a ) y ( a ) \" ( a ) y \" * * * y \" * * * ( a ) * * * ( a ) y ( a ) \" * x x * x * x", "* x x *", "( [ ( a ) ] b )", "* y \" * * * y \" y \" ( [ * x x * * x y \" * ( a ) ( a ) * x x * ( [ * y \" * x y \" ( a ) y ( [ * ( [ ( a ) ] b [ ( a ) ] ) ] ) * ( a ) y * ( [ * x ( b [ ( [ ( b [ ( a ) ] ) ] ) y ( a ) \" * x ( a ) x \" ( b b b [ * ( b", "* y \" y \" y \" ( a ) y * * * ( a ) * * ( [ ( a ) ] [ ( a ) ] ) y \" ( a ) y ( a ) \" ( [ * y \" ( a ) y * x x * x ( b [ ( a ) ] b ) \" * ( a ) y ( b [ ( b [ * y \" * x ( a ) y * x x * \" y ( a ) y * * * y \" y \" y y x *", "( [ ( [ ( [ * * ( a ) y \" y \" ( [ ( a ) ] [ ( [ ( a ) ]", "* x ( [ * ( a ) * x x * * y \" * x * * ( [ ( a ) ] [ * y \" y \" ( [ * ( [ * y \" * y \" y \" * ( [ ( a ) ] [ * ( a ) x \" y \" y * ] ) x x * \" * ( [ * x * x y \" * x x * y * y \" ( a ) * * x x * y ( a ) \" ( b [ ( a ) ] [ * x x * ] ) x", "( a )", "* * * * ( b b b ) y \" * y \" * x ( a ) y * * x x * y ( a ) \" y \" ( [ ( a ) ] b ) y * y \" * * x y \" ( a ) x \" ( b b b ) y * y \" * x ( a ) x \" ( b [ ( a ) ] b b )", "* ( [ * x * x \" * * * * ( a ) y * y \" * x y \" ( a ) x \" ( b b [ ( a ) ] ) y * ( b [ ( b b b ) ] ) y * x x * \" ( [ * * x * * x y \" ( a ) y \" * ( a ) x \" ( a ) y * * ( a ) y * x x * \" * ( a )", "* ( a ) y * x * * y \" * x ( b b b ) y ( [ ( [ * x y \" y \" ( [ * x y \" y \" * ( a ) ( [ ( [ * y \" ( a ) y ( [ ( b [ ( a ) ] [ ( a ) ] b ) \" y \" * y \" * x x * x x * y * ( b [ * x x * ] ) * x ( a )", "* x y \" ( [ * * y \" ( a ) y \" * x x * y ( a ) \" ( a ) y ( [ ( a ) ] b [ * * * x x * y * ( b b ) * y \" * x ( a ) y \" ( a ) y * * y \" y \" ( a ) y ( a ) * x y \" * x x * y ( a ) \" ( a ) ( a ) y ( b [ ( [ * * y \" * x x * y * y", "( b [ * y \" * x x * y * * y \" * ( a ) y * x ( [ * x y \" ( a ) y * x ( a )", "* ( a ) x \" ( a ) y \" y \" ( b b [ ( [ * x * y \" * x ( b b [ * x y \" ( a ) y ( [ ( a ) ] [ ( a ) ] ) \" * * * x * y \" ( a ) y * x * \" y \" y \" * * * x x * y \" ( [ * y \" ( a ) y ( b b [ * * y \" y \" y \" * x x * y ( a )", "( [ ( [ * y \" ( a ) y * y \" ( a ) x \" * ( a ) x \" y \" ( a ) * * x x * x \" y \" ( [ * ( b x y \" * ( a ) y * ( [ * x * ( a ) y * * x y \" ( [ ( a ) ] [ ( a ) ] ) * ( a ) y ( b b b ) \" y \" ( a ) ( a )", "* ( [ * * x x * x \" ( b b [ * y \" ( b b [ * ( a ) y \" ( a ) x \" * ( a ) y * * y \" ( a ) y * ( a ) y * x ( a ) y ( a ) \" y x * ] b [ * ( b b [ * ( a ) y ( a ) \" * x * x \" y \" ( a ) * ( a ) ( a ) * y \" y ( a )", "* x x *", "* y \" y x * x * x x * x * \" y \" ( a ) y * x x * y \" ( a ) y ( b b [ * x x * x ( a ) y ( a ) \" ( [ * x x * ] [ ( [ ( a ) ] [ * x ( a ) y ( a ) \" * * x y \" ( b b b ) y \" * x x * y * ( [ ( a ) ] [ * y \" * * x * x", "( a )", "* x x *", "* x x * y * x x * \" y \" y \" * y \" y \" * x x * y ( a ) \" ( [ * y \" y \" * x x * ( a ) * * ( [ ( a ) ] [ ( [ * * y \" * x y \" * x ( [ ( a ) ] b ) * * x ( a ) y * ( a ) * x y \" ( a ) y * x ( [ ( b [ * ( b b b ) x \" ( a )", "* x * * ( a ) y \" ( b [ ( b b ) ] [ ( [ * y \" ( a ) y ( [ * x ( [ * ( a ) y * x * x x * y \" * x ( b b b ) y * * y \" * x * x ( [ ( a ) ] b b ) ( a ) y * ( [ ( a ) ] b ) y * x x * y ( a ) \" * x y \" * y \"", "* * x x *", "* ( a ) * x x *", "( a )", "( b [ * ( b [ ( [ ( a ) ] b ) y * x * x * y \" * x ( a ) y ( a ) \" ( b [ ( [ ( a ) ] b b ) x \" ( b [ * x x * ] b ) y * * y \" ( a ) * * * ( a ) y * x * x y \" ( b [ ( a ) ] [ ( a ) ] ) * x * x * x x * y * x x *", "* * ( b b b ) y \" * y \" ( a ) x \" y * x y \" y \" ( a ) ( b [ * ( b [ ( a ) ] b ) y * y \" y \" y ( b b ) y * \" ( a ) * x x * y * * * x x * x x * y * x x * ( [ * y \" * x x * y ( [ * y \" ( [ * ( b [ * * ( a ) * x ( a ) y * x ( b b ) ] [ * ( a", "* x ( b [ * * ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y * x * x * y ( a ) \" y \" y \" y * ] [ * x y \" y \" * y \" ( a ) y * x x * y ( [ ( a ) ] b [ * * ( [ ( b [ ( [ * ( a ) x \" * ( a ) ( [ ( b b b ) ] ) x \" ( b b )", "* * x x * ( a ) y * * x * x x * y * * ( a ) x \" ( a ) y * x ( a ) ( [ * * x * y \" y \" * x ( b [ * x ( [ ( a ) ] ) x \" * x x * x * * y \" * * x x * x x * y ( a ) \" * ( [ * x * x ( a ) x \" * * x x * x \" * * y \" * x ( a ) x x \" *", "( [ ( a ) ] [ * * y \" ( b b [ * ( a ) y * * x x * y \" y \" ( a ) y * y \" * ( b [ ( a ) ] b ) * * * ( [ ( a ) ]", "( b b )", "* ( [ ( [ * * * y \" * y \" * x ( a ) y ( a ) \" y \" * y \" y \" * ] b [ ( b b [ * y \" ( b [ ( a ) ] ) y * * * x x * y * * ( a ) y * ( a ) x \" * * x y \" ( a ) * x x * y * x x * \" ( a ) x * y \" y \" y \" * x * y \" ( [ ( a ) ] b [ *", "* y \" ( b b b ) y * x y \" * y \" y \" y x * ( b b ) * x y \" ( [ ( a ) ] [ * y \" ( a ) * * x x * y * * ( a ) x \" * ( a ) ( a ) y * x y \" ( [ ( a ) ] [ ( a ) ] b [ ( b b ) ] ) y \" * ( a ) y ( [ ( a ) ] b b [ * * * y \" * x", "( b b )", "( a )"], "accuracy": 0.2, "train_overlap": 0.2, "res": [{"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -88.0869363443635}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -92.87639046032564}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -89.14269819177571}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -93.94364653711091}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -92.03466993631446}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* x y \" y \" y *", "log_prob": -9.501430577714927}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -98.5665287313168}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -96.33400348637952}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -92.67425535185612}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -93.06678475739318}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -94.70377347976319}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -95.61764832100016}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -15.77411221168586}, {"text": "( [ * x x * ] b b )", "log_prob": -12.064892170019448}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -86.88995519169839}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.2206550190167}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -95.13819450660958}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -100.43565059939283}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -84.84971452417085}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -92.39448844330036}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -87.7759426048433}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -91.1681421167741}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -88.60165380075341}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -85.61935097869718}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -83.38209881991497}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -107.5744049269997}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -88.83148787840037}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -19.75734792271396}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -86.82496559940046}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -11.315118291473482}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -86.3857927507197}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -86.43695327956812}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -91.51049956708448}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -15.96929419375374}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -88.40448158804793}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -22.57170315948315}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "* x x *", "log_prob": -3.8534824692178518}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -92.405379220756}, {"text": "( b b b )", "log_prob": -5.4316260404884815}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -92.47010421566665}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -89.39124288814492}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -83.99999227692024}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -14.751618609618163}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -71.33186642715009}, {"text": "( [ ( a ) ] b b )", "log_prob": -8.566280242637731}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" y \" y x *", "log_prob": -8.421184015460312}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -90.45602273815894}, {"text": "* x y \" y \" y *", "log_prob": -9.501430577714927}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -98.01674425241072}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -94.68043322392623}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -83.19077809108421}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -91.34769118987606}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -95.40344727860065}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -92.34593280695844}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -85.18210636332515}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -93.35593065153807}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -95.06962858821498}, {"text": "( a )", "log_prob": -2.3588556885370053}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -89.59962148836348}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -87.34653457891545}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -82.14008192098117}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -90.29650856665103}]}, "epoch_5.pt": {"generated_sequences": ["* x x * * x ( a )", "x * ( a )", "( [ ( a ) ] ) y \" ( a ) ] [ * ( a ) x * x * * x x * y \" ( a ) y \" * x * * x * x \" ( a ) y ( [ ( a ) ] b b [ ( a ) x ( a ) ] ) y \" * \" * y * y \" y * * * y ( [ ( a ) * * x \" * x \" * x * x \" ( a ) * x * y * x \" * y \" ( a ) x ( a ) y \" ( b [ * * x * * ( [ * x ( [ * y", "* ( a ) ( [ ( [ ( a ) ] [ ( a ) y * * ( a y * ( b [ * ( a ) ] [ * x \" ( [ ( a ) y * ( a ( a ) y \" ( b ) \" * x y * x * x y \" y \" * x * x * x * ( a ) x * x * ( b [ ( a ) \" * y \" * x \" y \" ( b [ * ( [ ( a ) y ( a ) ] b", "* x ( a ) y * ( a ) \" * y \" * x * y ( b [ * x * ( a ) \" * ( a ) y \" ( a ) \" ( [ ( b ) ] [ * ( a ) \" y \" ( a ) \" * y ( a ) * x * ( a ) \" ( a ) x \" * x x \" ( a ) y \" y * * ( a ) * x \" ( a ) x ( a ) y \" (", "* * * x x * x * y ( [ ( a ) y ( [ ( a ) ] b [ ( a ) ] [ * y ( a ) \" ( a ) y * x \" ( [ ( a ) y ( a ) \" * x \" y ( b [ ( a ) x \" * y ( a ) y \" ( a ) * ( b b [ ( a ) ] [ ( b b ) y * y * ] [ * ( a ) ] [ * x * * \" y * * y ( [ ( a ) \" ( [ * y ( [ ( [ * ] b [ * * ( a ) y ( [ * * ( a ) y ( [ ( a ) ] [ * x x \" y \" ( a ) ] [ ( a ) * x x ( a ) x \" * x * y ( a ) \" y \" ( b ) y * ] [ ( [ ( [", "* * x * ( a ( [ * y \" ( b [ ( a ) ] [ ( b b b ) ] b ) ] b [ * x \" * * * y \" * x * x * x \" ( [ ( a ) y \" ( a ) ] [ ( a ) y * x \" * * x y ( b [ ( a ) x ( a )", "( b b [ ( a ) ] ) x \" * * x * y \" * * x ( a ) * * x x * * x ( a ) y \" * y \" * x * y \" y \" (", "* * x x * y \" y \" y * y \" y * \" ( a ) x * y \" y \" * x * * x y \" * ( b ) \" y \" * * x * y \" ( a ) \" ( a ) y \" * y y \" y ( a ) * y * * x * x * y * x ( [ ( b [ ( a", "y ( b [ * * x ( [ ( a ) ] b [ * ( [ ( a ) ] b ) y * x \" * ( a ) ] [ ( [ * ] ) ] b [ * x \" ( a ) y \" * x * x * y \" * * y x * ( a ) y * y \" ( a ) y \" * y \" ( a ) x * y \" ( a ) y x x x \" ( a ) y * ( b [ * * * y * x x * y ( a ) y \" ( a", "( [ * x x * y \" ( a ) y * ] [ * * * * x y * ( a ) \" * ( a ) \" ( b b b [ ( a ) ] ) ] b b [ * * ( a ) \" y \" * x x * * y \" ( a ) x * x x * * x * x \" y \" ( b b b [ * x ( a ) y \" * * x x y * x * x \" * x * ( [ ( a ) ] b b [ * x * x y * * ] [ ( b b [ * y ( a \" y y \" * x * x \" * y \" * ] ) y \" * y * y \" y \" ( a ) y * x ( a ) \" ( a ) x ( a ) x ( \" y ( a ) y ( [ * * * * x * y x x y ( a ) \" ( b b b [ ( a ) \" ( a ) \" ( [ * * x \" y \" y \" ( a ) y \" y \" * * x * ] [ ( a ) ] ) y ( a ) y ( a ) \" y * * x x \" ( a ) \" ( b a ) \"", "( b [ ( a ) ] b ) ] ) y ( a ) \" * x \" y \" * y \" ( b b [ ( a ) x * x * y \" * y \" ( a ) * * ( a ) * * y \" ( a ) x \" ( b b [ ( b [ * x ( b [ ( a ) ] [ ( a ) * * ] [ ( a ) ] b [ ( [ ( a ) y ( [ * * x x ( b [ ( [ ( [ ( a ) ] [ ( a ) ] [ ( a ) y * ] [ ( b b ) ] b ) ] ) x \" ( [ * y * x x ( a ) \" * ( [ * ] ) y \" ( [ ( a ) x \" ( [ \" ( a ) ] ) ] [ ( [ * x x * x * y \" y \" ( a ) ] [ ( a ) y \" * ( a ) y ( [ * ( a ) \" ( [ * * x * * y ( [ * x ( a ) ] ) x \" ( b [ ( a ) ] ) * * ( [ ( a ) * * y ( a ) ] a ) \" * x * x * x * y", "x ( a ) x * \" * y \" * x x x x \" y \" y \" y * x * ] ) ] b [ * * * x x ( a ) \" ( [ * ] [ ( b [ ( a ) ] [ ( a ) ] ) \" ( [ * ]", "* * * x * x * y \" * y \" ( a ) \" ( [ * y \" * x x ( a ) x * ( a ) \" * ( a ) \" ( a ) \" y \" * x x x * * x * y \" * x x ( [ ( a ) ] b b [ * ( [ ( a ) ] [ * ( a ) y \" y y [ ( a ) x x x \" ( [ * ] b ) y \" * x * * y * y ( b [ ( a ) y \" ( [ * x * * \" *", "* y \" * x x y \" ( a ) ( b [ ( a ) ] [ * x * y * * x x x \" ( b [ * ] ) y \" ( a ) \" * * ] [ ( a ) ] [ * x * * ( a ) ( a ) ] b b [ * x * y \" y \" y \" y \" * x * x * x * y \" y \" * y \" ( a ) y \" ( a )", "* x * x x * ] [ * ] ) x \" y \" ( a ) * y ( a ) y ( [ * x ( a ) ] b ) ( a ) \" y ( a ) y * ( [ ( a ) \" ( a ) y x * x \" y * ( a ) \" y \" * x \"", "( a ) ] [ ( a ) x * x * * x * x * x \" ( a ) ] b b [ * x * y ( b ) y * * x \" * x \" * (", "* * * * ( y \" * y \" * x x x * x y \" ( a ) \" y \" ( [ * ( a ) x ( a )", "* x ( a ) ] [ ( a ) y * * x * * x x ( a ) \" ( a ) * x * x * x * y \" * x * y ( [ ( [ * ] [ * * ] [ ( a ) x y \" y * ( [ ( a ) y \" * x * * ( [ * ( [ ( b [ * * x * ] b b ) \" ( a ) ] [ * x ( a ) ] b [ ( a ) ] ) ] [ ( a ) ] b [ ( a ) ] ) \" * ( [ ( [ * * x x \" ( b ) ] [ ( b [ * x x * x * y \" ( a ) y \" y \" ( a ) ] b ( a ) \" * x \" y ( [ \" ( a ) ] ) \" ( a ) ( a ) y \" y \" * x \" y \" * * y \" ( [ ( a", "] ) y ( b [ * x * * ( a ) x * \" * x x * y \" * x x * y ( a ) y \" ( [ ( b b [ ( a ) ] ) \" y \" * ( a ) y \" ( a ) y \" ( [ ( b b b b [ ( a ) y ( a ) ] b [ ( a ) ] [ ( a ) ] [ ( a ) ] b b ) ] b b b [ ( a ) ] b", "* x * ] b [ ( [ ( b b [ * x x ( a ) y \" ( [ * ] [ * x x * x x ( a ) ] b [ ( [ * y \" * * ( a ) * x * x x * y * \" y \" y \" ( a ) \" * y \" y ( b b [ * y \" * ( a ) ] [ * x y \" * x * x y \" y * y \" * ( b [ ( a ) ] ) y \" y * x ( a ) x * * y * * x ( [ ( [ * x ( a ) ] b b [ * x", "( a ) y * x x \" * * x * x ( a )", "* * ( a ) y \" ( a ) \" y ( [ ( [ * ( a ) ] [ * y \" ( a ) \" ( a ) x * * x * * x * ( a ) y ( [ ( b b [ ( a ) ] b b ) ] [ * x \" * ] b b b ) \" ( a ) ] b ) ] b ) \" y ( a ) ] b ) y ( [ ( [ * ( a ) x * x ( a ) ] [ ( b [ ( [ * * ( [ * ( b ) ( b b b", "( a ) \" y x * x * x \" y \" ( a ) y * x * ( a ) y \" \" y \" * x \" * y \" y \" * * y * x * * x x y \" ( a ) \" y * y \" y \" * x * y \" y * ( a ) \" ( a ) \" y \" ( a ) y \" * y ( a ) y * x x \" y ( b [ * ( a ) y \" * ( a ) \" * x \" * ] [ ( a ) ] [ ( a ) ] b [ ( a ) ] b b [ * x * ] b b [ * y \" * ( a ) y \" ( a ) y \" y \" y ( a ) * ( [ * ( a ) y * x * x * ( b [ y \" * x x * * x", "* * x * y \" y \" * x * x x x x * x y \" * x * ] b [ ( a ) ] ) x ( a ) x * x * \" * x x * x * x * x y \" * y * x * y \" ( a ) ] * * y * y ( [ * x * * ] [ * x * ] b [ ( a ) ] [ ( a ) y * * ] ) y \" ( [ * * * ] ) y ( [ *", "( a ) * ( [ ( a ) ] b [ * x \" y \" * y ( [ * ( a ) y \" ( a ) ] b [ ( a ) y * * x \" \" ( a ) ] [ ( [ * x \" ( a ) \" y ( [ * x * x \" y ( a ) * * x x \" y \" y \" ( a ) \" * ( a ) y \" ( a ) y \" * * x x x * ( a", "( a ) ] b ) y * x * x * y \" ( a ) \" ( a ) \" * x x * x \" * y ( b b ( a ) y \" y \" ( [ ( a ) y \" y \" y \" ( a ) y \" y * x * ] [ * x * x \" y ( a ) ( a ) x x \" * x * x x * ] ) \" y * ( [ ( a ) y ( a ) y \" * * y \" y \" y \" ( a ) ] [ ( a ) ] ) \" y \" * y * * * y \" ( [ ( b ) ] [ ( b b b [ * * x * x * x * y ( a ) ] b [ * ] ) y * ( [ ( a ) * \" y ( a ) ] ) \" * ( a ) ] b [ * y \" * x * ( [ ( a ) ] b ) ] [ * x \" y ( a ) ] ) ] [ ( [ ( a ) ] b ) y * * * * ( [ * * * y ( a ) \" y \" * * * y ( a ) \" * * ( a )", "y \" * y \" ( b [ * * * ( a ) ] [ ( a ) y \"", "* y \" ( a ) \" y * x * * x * x * y \" ( a ) \" * x * y \" ( a ) x x x x x \" ( [ ( b [ * ] [ * x \" y * x \" ( [ * y \" * ( b [ * ( a ) ] ) ] ) y ( a ) \" * ( a ) x x y ( a ) y ( [ ( b [ * x * x * y ( a ) \" y \" y \" ( a ) \" ( a ) y \" ( a ) ] [ * y \" ( a ) \" ( b ) ( [ * * x \" ( [ * x ( a ) ] [ * ( a )", "( a ) y \" ( a ) x \" * * y \" * x \" ( a ) * x \" * * x y \" ( a ) y * x * ( a ) y * y ( a ) y * * y \" * \" y ( a ) x ( a ) \" ( a ) x \" ( a ) \" ( a ) ( a ) \" ( a ) x \" * x * * y * y * * * * \" y * ( a ) y (", "( x \" ( a ) ] [ * ( a ) ] [ ( [ * * x x * *", "( a ) ] b ) y ( a ) x * \" ( a ) y \" * * x * x * x x * * * ( a ) y * x * x y ( b ) \" y \" y ( a ) \" ( a ) y \" ( a ) \" y ( a ) \" ( a ) \" * y * x * y * * x * x \" ( b b b [ * y * ] b [ * y \" * * * * x x \" ( [ * ] [ ( b [ * y * * x", "( a ) \" y \" * y * x * ( a ) y \" * ( [ * * * x x ( a ) ] [ * * x x * y \" ( b [ * y \" ( a ) x x * x y \" ( [ ( a ) ] [ ( a ) ] b [ ( a ) ] [ * * x ( a ) ] b b b b ) ] [ * x y \" * y \" y \" y \" * y ( a ) x * x * y ( a )", "* * x * ( [ * ( b b [ * y \" y \" * x ( a ) * y ( a ) * x x * x x ( a ) y * y \" * x ( a ) y ( a ) \" *", "* ( a ) x * x * ( b [ * * y \" * y \" * y \" * y \" y \" ( [ ( b [ ( b ) ] ) x * x x * * x * * y \" y \" y \" * y \" y y \" ( b [ ( a ) y \" y \" ( [ ( [ ( a ) ] ) x * ( a ) y \" ( a ) y \" * x * x x x y ( a ) ] ) y \" * x * * y \" y ( a ) x * * * \" * x", "( a ) ] b ) \" y \" ( a ) y * x * x y \" ( a ) \" ( a ) \" * x * * x * ( a ) \" ( b [ ( b [ * x * * ] [ * x y \" * x * * y ( [ * y \" y \" ( a ) y \" ( a ) x x \" y ( [ ( a ) y \" y \" * x * * x * ( a ) y \" y \" (", "( a ) ] [ * x x \" ( a ) ] [ * * x * ( [ * y \" * * x x * x x x y * * y \" y \" y \" ( a ) x * * x y \" * * * x x x ( a ) ( [ ( a ) ] ) ] [ * y ( b b [ ( [ ( b b [ ( a ) ] [ * x * ( a ) y \" y \" ( b [ ( [ ( a ) \" y ( a ) ] [ ( a ) ] b b b [ * x * * x x * * y \" ( a ) ] b ) y \" x * y ( a ) \" ( [ * * x * y ( a ) y x * * ] [ ( b b b b b [ * x * ] )", "* ( a ) ] b ) \" ( b [ ( [ * * * x ( a ) \" ( a ) y ( a ) \" y \" * \" * y ( a ) ] [ ( a ) \" y ( a ) \" y \" y x ( [ ( a ) ] b ) y * * ( a ) x \" * y \" ( a ) y ( a ) y ( a ) \" y \" y ( b [ * * y ( a ) \" ( [ ( a ) ] [ * x * x x y \" y ( a ) \" y ( a ) * * x * ] ) y \" * y ( b [ ( a ) y ( a ) y * * * ( a ) y \" y \" ( [ ( a ) ( [ ( a ) ] b [ ( a ) \" * x \" y ( [ ( [ *", "* ( b b * ] [ ( b [ ( a ) ] [ * x * x \" ( [ * x x * y \" ( a ) y \" * x x ( b ) y \" y \" ( [ ( a ) y \" y \" ( a ) y ( a ) ] b [ ( a ) y ( a ) y * x \" ( a ) * * ( [ * y \" * \" y \" * ( a ) x x y ( a ) y ( a ) x * y \" * y ( a ) * * * x * y \" y * ( b b [ * y \" * ( a ) x * x * * ( b b [ * x *", "* x x * ( a ) * ( b [ ( [ ( a )", "* * * * ( a ) ( a ) y * x \" * y \" * x * x x y * x x * \" y \" ( b [ ( b b b b ( [ ( b ) ] ) \" ( a ) \" y \" y \" ( b [ * x y ( a ) y * * x * x * y \" * y * * x ( [ * ] b [ ( a ) y * ] ) * x * y * x * * x * * ( b b b b [ x x \" y \" * x * \" ( a ) ( a ) y * x * ( b b b ) ] ) x * ( a ) x * * x * y * x ( a ) \" y \" ( a ) \" * \" ( b b b ) y ( a ) \" y * x ( [ ( b b ) \" y \" y ( b ) ] ) * x * ] [ ( a ) \" y \" ( a ) ] b b ) y * y ( b [ ( a ) ] ) \" ( [ * x x * y *", "( a ) ] [ * x x ( [ ( a ) ] b [ ( a ) ] b b b ) ] [ * * ( [ ( a ) ] b [ * * ( [ ( a ) y \" x x y ( b [ ( a ) ] [ ( a ) \" ( a ) ( a ) ] ) x \" * * ( [ ( a ) y ( b [ * * y \" y \" * y \" y ( a ) y \" ( a ) ] ( a ) \" ( [ * ( a ) ] [ ( [ ( [ ( a ) ] b [ ( [ * x * * y * x ( a ) y ( a ) ] b ) ] b b b [ ( [ ( a ) y ( a ) y * ] ) ] b [ ( b b [ * ( a ) ] b [ ( a ) ] b ) y \" ( [ ( [ * x * * x * ] ) y ( b [ * x ( b b ) ] b [ ( a ) ] [ ( a ) ] [ ( b [ ( a ) ] b [ * * * x \" * y \" y \" ( a ) ( a ) \" ( b b [ ( [ ( b [ * y \" ( a", "* x x * x * * y \" ( a ) y * y * * * x * ( a ) \" * x x * ( a ) \" y ( a ) \" ( a ) y ( b [ * * ( a ) y \" * y \" ( b b ) \" * x x x * \" y ( a ) y ( a ) * y \" ( a ) x * x * ] b [ ( a ) * x ( a ) \" y \" * ( b b b )", "* x x * \" ( a ) y ( a ) ( a ) \" y \" * x * y ( [ * x \" y \" * x ( [ ( a ) \" y \" y \" ( a ) y ( [ * ( a ) ] [ ( a ) y * x * x * * * x x * x * y ( [ ( a ) y \" y \" ( a ) y ( [ * y \" y * ( a ) y ( [ * x x x * ] [ ( [ ( b b * x x * y", "y \" * y \" * y \" y \" ( a ) y \" * x * y \" ( b [ ( a ) ] [ * * * x x x * y \" ( a ) y \" ( a ) \" * ( a ) y ( a ) y \" * x y \" y \" * x * y \" * \" y \" (", "* * y \" * x ( a ) y ( a ) \" ( [ * x y ( b [ * x * ] [ ( [ * x y * ( a ) ] [ ( a ) ] b b b ) * ( [ ( a ) \" y \" ( a ) y * x x * y \" ( a ) x \" * y ( b [ ( a b b [ * ] b [ * x x \" ( [ ( [ * x * x x \" * ] [ ( [ ( a ) ] [ ( b b [ ( a ) ] [ * ] ) y \" * ( a ) y ( [ ( a ) y \" ( a ) \" y \" ( a", "( a ) ] ) ] b ) y \" y * x * x \" y * x x * \" * * ( a ) x \" ( b [ ( a ) ] b b ) * x ( a ) * x \" * * * x \" y * \" y \" ( [ ( a ) y * ] b [ * x * x \" y ( a )", "* * x x \" * y \" y \" y \" * * y \" y \" ( b b [ ( a ) ] b ) x x x y ( a ) \" ( a ) * * x x * \" * x \" y * \" * y \" y \" ( b b [ * ( a ) x * * x ( a ) y \" y \" * ( a ) ] b b [ * x ( b [ ( a ) x * * x * * \" ( b b * * x ( [ * y \" *", "( [ ( a ) ] [ * y ( a ) ] [ * x * y \" y * y \" * ( [ * * * x * \" y ( a ) y * * ( [ * ( a ) y ( a ) y * x x \" ( a ) y * x x \" * x * y \" ( a ) \" ( b b [ ( a ) y \" * x x x * x * \" ( a ) y ( a ) y \" * x * x * ( a ) \" * * x ( a ) \" ( a ) y ( [ * x ( a ) \" y \" y * ] b [ * ( a ) ] b [ ( [ ( [ ( a ) ] ) ( a ) y \" y \" ( [ * x * x x \" ( b [ * y \" * * x ( a ) ( [ ( b b [ ( a ) ] [ ( a ) ] [ * * x * y * * x ( a ) ] b ) y \" * y ( a ) ] [ * * ( a )", "( a ) \" ( a ) y \" y \" ( b ) b ) y ( a ) \""], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -114.8358351206407}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -116.98850357718766}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -102.90526577364653}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -124.59187249932438}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -116.56576206628233}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* x y \" y \" y *", "log_prob": -15.840224340558052}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -116.68248024955392}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -112.66809345874935}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -113.42601547110826}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -111.89482474233955}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -118.64263708330691}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -117.8434150358662}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -19.99942904151976}, {"text": "( [ * x x * ] b b )", "log_prob": -13.312626093626022}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -114.30689698457718}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -111.7380246091634}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -120.59500034805387}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -114.92725189495832}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -117.15022640675306}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -118.90272140223533}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -111.15378925576806}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -111.89969461783767}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -106.06455270573497}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -115.4886009292677}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -115.19896624609828}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -131.40185290947556}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -114.00973689649254}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -28.12145462166518}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -110.7947289943695}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -12.548547026701272}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -108.63715530745685}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -117.8322694581002}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -121.08027574513108}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -20.14165901672095}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -114.15066575957462}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -28.043324559926987}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "* x x *", "log_prob": -9.034897863864899}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -114.34769730269909}, {"text": "( b b b )", "log_prob": -9.776443839073181}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -115.91870888695121}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -119.71686559449881}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -113.45328181330115}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -17.361319542862475}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -81.80604422464967}, {"text": "( [ ( a ) ] b b )", "log_prob": -11.3236647634767}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" y \" y x *", "log_prob": -19.22540942579508}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -119.73457551607862}, {"text": "* x y \" y \" y *", "log_prob": -15.840224340558052}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -120.52185778319836}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -131.1763178743422}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -104.8818171643652}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -112.34110549185425}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -114.73301692027599}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -126.31030703149736}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -118.69767709169537}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -105.3544685067609}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -121.32183416280895}, {"text": "( a )", "log_prob": -5.574101636186242}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -122.11044907569885}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -111.12658131681383}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -110.38576003909111}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -122.7539904518053}]}, "epoch_50.pt": {"generated_sequences": ["( a )", "* ( [ * y \" y \" ( a ) y * * y \" y \" ( a ) x \" ( a ) y * ( a ) y * y \" * y \" y \" y * * x * x y \" * x y \" y * y \" y \" ( a ) y \" ( b b b ) * y \" y \" * x ( a ) y * \" ( a ) y * y \" * x y \" y \" ( [", "* y \" y \" ( [ ( a ) ] [ * x x * ] [ * ( a ) y * ( a ) y * ( a ) y ( b [ ( b [ ( a ) ] ) ] ) \" * ( a ) y * y \" * x * ( [ ( a ) ] [ * ( [ ( b [ * ( [ ( a ) ] b b ) y * ( b b ) y ( a ) \" * * x y \" ( b b b ) y * ( [ (", "* * y \" * * y \" * y \" y \" * y \" y \" * x y * * ( a ) y * x x * \" ( a ) y \" y \" * x x * y ( a ) ( [ ( [ * * ) y * x y \" ( a ) y * y \" * * ( a ) y * x * \" ( [ * * x * y \" * ( a ) y ( a ) \" ( [ * x ( a ) y", "* x x *", "* y \" ( a ) y ( b [ ( a ) ] [ ( a ) ] ) \" ( b [ * x x * y * x x * \" * x y \" ( a ) y \" ( b b b ) y * ( a ) y ( [ ( a ) ] [ * * * ( a ) y ( a ) \" ( a ) y ( a ) \" ( b b b ) y ( a ) \" y x * y ( b b [", "( [ * y \" y \" * * y \" y \" * x x * y * * * ( b a ) y ( a ) \" y \" y \" y \" * x ( b b b ) * * * x ( a ) ( [ * y \" ( b [ * ( a ) y ( a ) \" * x ( a ) y ( a ) \" * x y \" y * ( a ) y \" y \" y * ] b ) y \" ( a ) y *", "* * ( a ) y \" * ( [ * x * x * y * ( b b [ * ( [ * * x * * x * x * * x y \" * x x * y ( a ) \" y ( a ) * x x * \" ( b b b ) y * x x * \" y \" y * x * y ( a ) \" ( a ) y * ( a ) y * ( a ) y * x x * \"", "( b", "( b [ ( [ * x * x x * y * ( a ) y * ( b b b [ * * x y \" y \" * * ( a ) y * x x * \" y \" ( a ) y ( b [ * x ( a ) y * x y \" y \" ( a ) y ( a ) x * x * y \" * ( b [ * x x * ] [ ( a ) ] b ) x \" y \" y \" ( a", "( a )", "* x x *", "( a )", "* y \" y \" ( a ) ( [ * x * ( a ) y ( [ ( b b b ) ] [ * y \" ( a ) y ( a ) \" ( [ ( a ) ] [ * ( b [ ( b b [ * ( b b [ * x y \" * ( b [ * x * * x ( [ * x * ] b b ) y * ( b b b ) y ( a ) \" * x ( b b [ *", "* ( a ) ( [ * * ( [ ( a ) ] b b ) y ( b [ * x y \" y \" ( a ) ( a ) y * * x * ( a ) y * ( b b [ ( [ * y \" ( a ) y * x ( b b [ ( a ) ] b ) y ( a ) \" ( a ) y ( [ ( a ) ] [ ( a ) ] b ) \" y * y \" * x x * x", "( a )", "( a )", "( a )", "* ( a ) y ( a ) \" ( [ * ( b [ ( a ) ] ) y * x y \" ( b [ * x y \" y \" y \" ( a ) y ( a ) x \" y \" * * x x * y * ( b b b ) ( b b ) ] b ) * * y \" y \" ( b [ ( a ) ] ) y ( [ ( a ) ] [ ( b [ ( b b b ) ] ) ] [ * ( [ * * y \" (", "( a )", "( b [ * y \" * ( b [ * x ( a ) y \" y \" y * * ( a ) y * x * y \" y \" y \" y * ] [ ( [ * ( a ) y * x x * \" y \" y y ( [ * ( [ * y \" y \" ( [ * * x ( a ) ( [ * y \" ( a ) y * ( a ) y ( a ) \" y \" * x x * x \" ( a ) y \" ( a", "* x *", "( [ ( a ) ] b b )", "* x x *", "( b [ ( a ) ] b [ * * y \" * x x * ( [ * ( a ) y ( a ) \" y \" ( a ) x x * y ( a ) \" ( b b [ ( a ) ] [ * x ( a ) y ( a ) \" ( [ * x x * ] [ * x * * y \" ( a ) x \" ( [ * x y \" ( a ) y ( [ ( [ ( a ) ] [ * * x * ( a ) y ( a )", "* x ( [ ( a ) ] b ) \" * ( a ) y * x ( a ) y ( a ) \" y \" ( a ) y ( [ ( a ) ] b [ * x y \" ( [ * ( a ) * * x * x x * y * ( a ) y ( a ) \" * y \" ( a ) y ( a ) \" ( b b [ * ( b b [ ( [ ( b b ) ] ) * *", "( [ ( a )", "* * * x x * ( a ) y * ( b b [ ( a ) ] [ * ( b b [ ( a ) ] [ ( [ * y \" y \" y x * y * y \" y ( b b [ * x x * ] [ * ( [ * ( b [ * x x * ] ) x \" * x x * y ( a ) \" ( b b [ ( a ) ] [ ( b [ ( a ) ] [ (", "( a )", "* ( [ * * y \" * * ( b [ ( b b b ) ] ) y * x x * x \" ( a ) x \" ( [ * ( a ) y ( b b b ) \" ( b [ ( a ) ] ) * x * x y \" y ( b y \" ( [ ( b [ ( [ ( a ) ] b b ) ] [ * * y \" * y \" ( [ * y \" * x y \" ( [ * * ( [ [ * y \"", "* * x x *", "( a )", "( [ ( b b [ * * x x * y * * x y \" ( a ) * * * * x x * y ( b [ * x y \" ( a ) y * y \" y \" y y \" ( a ) y * x x * y ( [ * * ( a ) y \" ( a ) y * y \" ( b [ * y \" ( a ) y * x ( [", "* x ( a ) y * y \" y \" ( a ) * * y \" ( a ) ( a ) * x x * y * * ( [ ( [ ( a ) ] b b ) ] b ) ] [ * x ( a ) x \" y ( [ * y \" y \" y * x x * x \" ( [ ( a ) ] b b ) y * * y \" ( b [ * x * ] b )", "* ( [ * * x * y \" ( a ) y * x ( b [ * ( b [ * x x * ] [ * ( a ) x \" y \" * x * x * x ( b b [ ( a ) ] ) y \" y \" * x x * x \" * * x * x y \" * x y \" ( b b [ * * * * y \" ( a ) y ( [ * y \" * * x * ( a ) y * ( a ) y", "* y \" * x ( b [ * * x ( [ * x x * ] b b ) ] [ ( a ) ] [ * x * * y \" * * x ( [ * * x x * ] b [ * x * ] b ) y ( a ) \" ( a ) y \" y x * y * y ( a ) \" ( b [ * * ( a ) y * x ( a ) y ( a ) x \" y * ( a ) \" y ( a", "( a )", "* ( a ) y * y \" ( b b b b ) x \" ( a ) y ( a ) \" y \" y \" y * y * y \" * * x * ( a ) * * x y \" * y \" y \" y ( b b [ ( b b [ ( a ) ] b ) ] b b ) ] b ) y ( a ) \" * * ( a ) x \" y \" y * y \" * x y \" * ( a", "* x x *", "* x ( a ) y * y \" y \" * ( a ) y ( b b [ * x ( a ) y * x ( a ) y * x * x * \" y * ( [ * x * y \" ( b b b ) * * ( [ * * y \" ( [ ( a ) ] b [ ( a ) ] ) y ( a ) \" ( a ) y \" ( a ) y \" ( a", "( a )", "* x y \" y \" y *", "* * * y \" * * ( a ) y * y \" ( [ ( a ) ] [ * ( [ * x x * ] [ ( a ) ] b ) y ( a ) \" ( b b [ * y \" y * x x * x \" y \" ( a ) x x * y * y \" ( [ * x x * ] b [ ( b b ) ] b ) ] [ ( a ) ] b b ) y \" ( [ * y \" y \" y", "( b [ * ( a ) y \" y \" * x ( a ) y * x * y \" y \" ( a ) x * ( a ) y * y \" ( b [ * x x * y ( b b [ * ( a ) y * * x x * y ( [ ( a ) ] [ ( b b [ * x ( a ) x \" ( [ * * x ( a ) y ( a ) \" y \" ( b [ ( b", "* * y \" ( a ) y ( [ * ( a ) x \" * y \" * y \" ( a ) x \" y \" ( [ * x ( a ) y * ( b b b ) y * x y \" y \" y \" * ( a ) y * y \" * x x * y * x x * \" ( [ ( a ) ] [ * ( a ) y * * x * * x ( a ) y * ( a ) \" ( b [", "* ( a ) y \" ( b b b ) * ( a ) y * x ( a ) y ( b b [ ( b [ ( b [ * x y \" y \" y * y * x * x y \" y * * x * x x * ( a ) x \" y \" * x x * ( [ ( b b [ ( [ ( a ) ] [ * * * * x y \" y \" ( a ) y * * * x y \" ( b b [ ( a ) ] )", "* ( [ ( a ) ] b [ * * x y \" * x ( a ) y ( a ) \" y x * x * y * x ( b b [ * ( a ) y ( b [ * * y \" y \" ( a ) y ( a ) \" y x * y ( [ * ( a ) x \" ( a ) y ( a ) \" ( a ) y \" ( [ ( a ) ] [ ( a ) ]", "( a )", "* ( a ) ( b [ * y \" y \" ( a ) y ( a ) \" ( a ) y * ( b [ ( [ * x y \" ( [ ( a ) ] [ * x x * ] [ * y \" y \" * x y \" * ( a ) y ( a ) \" y \" * y \" ( [ ( b b b ) ] b ) y ( a ) \" * x x * y", "( a )"], "accuracy": 0.38, "train_overlap": 0.38, "res": [{"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -85.52667737926822}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -93.12137775067822}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -86.46626830560854}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -98.03257841934101}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -89.56152461568126}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* x y \" y \" y *", "log_prob": -7.583161173854023}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -98.39926588136586}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -96.05400510903564}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -90.82170320441946}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -95.04731299282867}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -94.12957574936445}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -98.15696302746073}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -16.095795585628366}, {"text": "( [ * x x * ] b b )", "log_prob": -11.062223233864643}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -85.32204165999428}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -82.37430740564014}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -93.66569195021293}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -96.95901948513347}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -83.55676523165312}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -85.66511539390194}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -90.77187734170002}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -88.52094662838499}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -86.48521079434431}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -87.08012929497636}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -81.16080436069751}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -107.91784792786348}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -87.28959980350919}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -19.572532362188213}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -84.84881477296585}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -11.392968656960875}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -82.29239705664804}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -88.29191142760101}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -93.21221137966495}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -16.745934289239813}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -86.18354305328103}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -20.626241129473783}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "* x x *", "log_prob": -3.3838908177567646}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -90.60280349908862}, {"text": "( b b b )", "log_prob": -4.806867816485465}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -89.30028011862305}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -86.58550492036738}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -82.61067418154562}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -14.485979446733836}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -70.01138545051799}, {"text": "( [ ( a ) ] b b )", "log_prob": -7.549517835606821}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" y \" y x *", "log_prob": -7.22269400418736}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -87.62628432389465}, {"text": "* x y \" y \" y *", "log_prob": -7.583161173854023}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -95.9496024538239}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -92.18860156615847}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -79.86902770659071}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -87.26118203625083}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -93.9540545057389}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -95.37345682911109}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -81.08068336106953}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -89.53216069709742}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -92.03352924564388}, {"text": "( a )", "log_prob": -2.1191550123039633}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -92.09645954813459}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -85.83800852135755}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -80.58796388364863}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -88.15211852052016}]}, "epoch_55.pt": {"generated_sequences": ["* ( b [ * y \" ( a ) y ( a ) \" ( b [ ( b [ * x x * ] ) y * x * x x * * y \" y \" * x ( [ * * x x * y * x x * \" y * ( a ) y ( [ ( b [ * x x * ] b ) \" * * y \" ( a ) y * x * x y \" * x ( [ * * x * y \" y \" y ( a ) y ( a ) \" * * x y \" y \" * ( a ) y", "* ( [ * x * x y \" y * ( b [ * ( [ ( b b b ) ] ) ( a ) y ( a ) \" * x ( [ * * ( b [ * x y \" ( a ) y ( a ) \" y ( a ) y * x x * \" y * ] b ) y * x x * \" ( a ) y \" ( a ) y * * ( b [ * x ( [ * ( [ ( [ ( b b b ) ] ) ] ) y \" * * ( a ) y ( a ) \" y \" * ( a ) y ( a ) \" ( a ) y ( b b b [ (", "* ( ] [ * x ( b b ) y ( [ * ( b [ * ( [ * * ( a ) y ( a ) \" ( a ) x \" y \" ( b [ * y \" * ( a ) x \" y \" * * x * x y \" y \" * * x ( b b b ) y ( a ) \" * x ( a ) y \" y \" * y \" * x y \" ( a ) * * y \" y * * ( a ) y * x ( a ) y ( b [ ( a ) ] [ ( [", "( [ * ( a ) y * ( [ * ( a ) y \" * * y \" * x x * y \" y * x y \" * x x * x \" y \" ( [ * x ( b [ * ( [ * ( a ) y \" ( a ) y * * y \" y \" ( b b [ * x x * ] ) * x ( a ) y \" y \" y * y * y \" ( a ) y * ] b [ ( a ) ] ) y \" * ( a ) y ( a ) \" y \" * ( a ) y * ( a ) y ( a ) \" y \" * x *", "( b [ ( [ * x * ( [ ( b [ ( a ) ] [ ( [ ( a ) ] b ) ] ) y * x x * \" y * ( a )", "( a )", "* * x ( [ * x y \" * ( b b ) y ( a ) \" y \" y \" ( a ) y ( a ) y \" * x x * x \" * x x * x x * y \" ( a ) y ( b [ ( a ) ] b ) \" * x ( b [ ( b [ ( a ) ] ) ] b ) y \" ( a ) x \" y \" * x x * y * y \" * * * ( [ ( a ) ] b b ) ( a ) x \" * x * x", "* * * x ( a ) y ( [ * * x ( a ) ( [ * x ( b b b ) y \" * ( b b ) * ( a ) x \" ( [ ( a ) ] [ ( a ) ] b ) y * y \" y \" ( a ) * * x ( b [ ( b b [ ( a ) ] ) ] ) x \" ( b b [ ( a ) ] ) y * x y \" * ( [ ( [ * * ( a ) y ( a ) \" ( b [ * x x * ] [ ( b b ) ] )", "* x x *", "* * x ( a ) y ( a ) \" * x y \" y \" ( a ) y \" ( a ) y * x * x x * y ( a ) \" y \" y x * x * \" ( [ * x x * ] [ ( b b ) ] [ * x x * ] ) * * x x * x \" y \" * y \" ( a ) ( a ) y ( a ) \" ( a ) y \" * ( a ) y ( [ ( [ * x x * ] [ ( a ) ] [ ( a ) ] ) \" ( b b ) y * x ( b [ ( [ ( b b b )", "* x y \" ( b [ ( a ) ] ) ( [ * * x ( [ * x x * ] b ) y * * x ( a ) y \" y \" * x ( a ) y * * x ( [ * x x * ] b b ) y * * x x * y * * ( [ ( a ) ] [ ( a ) ] b ) x \" ( a ) y ( [ * x ( [ * ( b b b ) y * x x * \" y", "* y \" * x ( [ ( a ) ] ) y * ( a ) y * ( a ) y ( a ) \" * x x * y \" y \" ( b b b ) y * * y \" ( a ) x \" ( a ) * x x * y * * x x * y * x x * \" y \" * x x * y * x * x * y * x y \" * * x x * y ( [ * x x * ] ) \" * y \" * x x * y * x y \" y \" *", "* ( a ) y * x * * ( a ) y ( [ ( a ) ] [ * ( [ * ( b b [ * ( a ) * y \" y \" ( [ ( [ ( [ ( [ ( a ) ] b [ ( b b b ) ] [ ( [ ( [ * x ( b b b ) y ( a ) \" y \" ( a ) ( a ) y ( [ * x ( a ) y ( [ ( a ) ] [ * x y \" * x ( a ) y ( [ ( [ * ( a ) * * * ( a ) y *", "( a )", "* y \" y \" * ( a ) x \" * y \" * ( a ) y * x y \" * x * x x * x \" * x x * y ( b b ) \" ( a ) y * y \" * ( a ) y \" y * x y \" * ( a ) y ( [ * x x * ] b [ * x * ( b b ) y * ( b [ ( [ * * * ( a ) y ( [ * x y \" y \" ( b b b ) y * x x * \" ( a ) y ( [ ( a ) ] b ) \" * *", "* x y \" y \" ( b [ * x x * y * ( a ) y * * ( b b [ ( [ * y \" * x x * x \" * * x x * y ( a ) \" y \" * ( a ) y ( a ) \" y \" y \" y * * * ( b [ ( a ) ] b ) y * ( a ) y ( a ) \" ( a ) y * ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" ( a ) y ( a ) \" ( a ) y * x", "( a )", "( [ ( b b b ) ] b )", "( b [ ( a ) ] )", "* * x x * x \" y \" y *", "( b [ ( [ * x y \" * x ( b b ) y \" ( b [ ( a ) ] [ ( a ) ] ) y * y \" * y \" y \" ( [ ( a ) ] [ ( a ) ] b ) ( a ) y * x x * \" * * x x * y \" y * * x x * y ( a ) \" * * ( a ) y ( a ) \" ( a ) y * y \" * x * * x * x * y ( b b b ) \" y \" y", "* ( a ) x \" * x ( a ) * * ( a ) * * y \" * y \" ( b [ * x ( a ) y ( a ) \" y \" ( a ) y * y \" * x x * * x * ( b [ * x ( a ) y * y \" ( [ * x x * ] [ * x x * ] [ ( a ) ] [ * x * x x * x \" y * x x * y * x y \" ( a ) x \" * y \" ( a ) y", "( [ * * ( a ) ( [ ( b b [ ( b [ ( a ) ] b ) ] b b )", "( [ * * x x * y * y \" y \" ( a ) y ( b [ ( a ) ] b ) x \" * ( a ) y ( a ) \" * x * y * * * x x * y ( b b b ) \" * ( b [ ( a ) ] [ * ( a ) y ( a ) \" y \" y \" * * ( [ ( b [ ( b b [ * x y \" ( b [ * * * * ( [ ( a ) ] [ ( a ) ] [ ( a ) ] ) y ( b b ) \"", "( a )", "( [ ( a ) ] b )", "* ( a ) y * ( [ ( a ) ] b [ ( [ ( b [ * x ( b [ ( b [ * ( a ) y ( [ * x ( a ) y * x y \" y \" y \" y * x \" * * * ( a ) ( a ) y ( b [ ( a ) ] [ ( a ) ] ) \" * x x * y ( a ) \" y \" ( a ) y ( b [ * * y \" * ( a ) ( b b [ ( a ) ] ) y ( [ ( a ) ] b [ ( a )", "* x y \" * * y \" ( a ) y * ( a ) y ( [ * * x y \" * x * x y \" * ( a ) y * ( a ) y \" ( a ) y * * x x * y * x * y \" ( a ) ( a ) y * ( [ ( a ) ] [ * x ( a ) ( a ) x \" ( b [ ( a ) ] b ) ( [ ( b b [ * x ( b [ ( a ) ] ) * x x *", "( b [ ( a ) ] [ ( a ) ] b )", "* x * y \" * y \" ( b [ ( a ) ] [ * * x ( a ) y * * x ( a ) x \" ( a ) x \" ( a ) y ( b [ ( a ) ] b ) \" * * * * ( b b [ * x x * y \" ( b [ * x ( a ) y ( [ ( b [ ( a ) ] b ) \" ( a ) y ( a ) \" * x y \" ( a ) y * y \" y x * y ( [ ( a ) ] b ) \" ( a ) y", "( b b )", "( a )", "* * * y \" y \" y x * x \" ( b b b ) y ( a ) y * * y \" y \" y * y ( a ) y ( a ) \" * x x * y \" * x ( a ) * ( a ) y ( a ) \" y \" ( a ) y ( a ) \" y * y \" y \" y \" ( a ) ( a ) ( a ) y * y \" * x * ( b b [ ( b [ * x x * ] b ) y ( b b )", "( a )", "* y \" ( b b [ * x y \" * x * x * x x * y ( a ) \" ( a ) y ( a ) \" ( a ) y ( a ) \" y x * * y \" ( b [ * * ( b [ ( a ) ] ) y * x x * \" * x * x \" ( a ) y * * x ( a ) y \" ( a ) y * y \" * y \" * x x * y * x x * \" * * ( [ ( a ) ] b [ * x y \" * * y \" * * ( a ) y (", "* * x * * x y \" y \" * * x y \" y \" ( a ) ( a ) y ( [ * ( a ) y ( a ) \" ( b b ) y \" ( a ) y * y \" ( a ) x \" y \" ( b b ) y * y \" * * ( a ) x \" y \" * x * y \" ( a ) x \" y \" ( a ) x y \" ( [ ( a ) ] b [ * x ( [ ( a ) ] ) y * * x * x x * y * * * x x y \" * x x *", "* x x *", "* ( a ) y ( a ) \" y \" * x x * y ( b [ * x x * ] ) y ( a ) \" ( a ) x \" y * x x * y * x x * \" * x x * x \" * x * ( b b ) y ( a ) \" y \" * x y \" y \" ( b [ * * y \" (", "( a )", "( a )", "* ] [ ( a ) ] b ) ] [ ( [ ( [ * x x * ] b [ * x * y \" ( a ) y * x x * \"", "* ( a ) y * y \" * * x ( b [ * ( a ) ( a ) y ( [ ( b [ * x x * ] [ * ( a ) y ( b [ * x x * ] ) \" * ( b b ) y ( [ ( a ) ] b [ * x * ] b ) \" y * * ( b b b ) y \" * x * * x y \" * * x y \" y \" ( b b [ ( [ * * x x * * x * x * y ( a ) \" * ( a ) y * x y \" y x * \" ( b [ * x y", "( [ ( a )", "( b [ * x y \" y \" * ( b b ) x \" ( a ) y ( a ) \" ( a ) y ( a ) x * y * x y \" y * y \" ( [ * x * x x * y * x x * \" * * * * * * x x * y ( b [ ( a ) ] b ) \" * ( a ) x \" ( a ) y ( b [ * ( [ * y \" y \" y x * ( a ) ( a ) \" * ( [ [ ( [ ( a ) ] [", "( [ ( [ * y \" * x * ( a ) y * * x * y \" * * * x ( a ) y * x y \" * * * x x * x \" * x * x * y ( a ) \" * x * y \" ( a ) y ( [ * * y \" * x ( a ) y ( [ * x x * ] b b ) \" ( [ ( a ) ] [ ( [ ( a ) ] [ ( [ ( a ) ] [ ( a ) ] ) ] ) y * x * x *", "* * * x * y \" * x * ( a ) y \" ( a ) y * x y \" ( [ * x y \" * x * x x * ( [ ( b b ) ] b ) y * * x ( [ ( [ * * * ( [ * y \" y \" * y \" y \" ( b [ * x x * ] b ) y ( a ) \" ( a ) y ( a ) * x x * y ( b b [ ( a ) ] ) \" ( a ) y ( a ) \" ( a )", "* y \" ( a ) y ( [ ( a ) ] b [ * ( b [ ( b [ ( a ) ] b ) x \" ( a ) y ( b b ) \" * * x x * y \" ( a ) y ( a ) \" * * ( [ ( b [ * x x * ] b ) y ( a ) \" ( a ) y * x x * \" * * x y \" ( a ) y * ( b b [ ( a ) ] ) y * * * y \" ( a ) y * * * * y \" *", "* * * x x * y ( a ) \" ( a ) y * x ( [ * y \" * * x ( b b b ) y * x y \" * x x * y * x x * \" y * y \" ( a ) y ( a ) \" ( a ) y \" * * ( a ) y \" * x x * \" ( b b b ) x \" ( [ * ( [ * * * y \" ( b [ ( a ) ] ) y * x ( b b ) y \" * x ( [ *", "* x ( a ) y * ( a ) ( a ) x \" ( [ ( a ) ] b ) y * y \" y \" ( [ ( [ ( [ ( b [ * * ( a ) x \" ( [ * * x * ( b b b ) y \" ( a ) y * x * * y \" y \" * ( [ * * y \" ( a ) y ( a ) \" y ( b [ ( [ ( a ) ] [ ( a ) ] b ) ] [ ( a ) ] ) \" ( a ) y ( b [ ( b b b ) ] ) \" y", "( a )"], "accuracy": 0.22, "train_overlap": 0.22, "res": [{"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -92.69818821243825}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -96.5215488577669}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -90.54354227535077}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -100.31499434256693}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -93.20534491466242}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* x y \" y \" y *", "log_prob": -8.181049710023217}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -100.53662783154869}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -100.01019399610232}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -97.14723626693012}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -97.0903170601523}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -98.4586658498738}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -101.2072545933479}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -18.56107128941221}, {"text": "( [ * x x * ] b b )", "log_prob": -10.083453766419552}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -88.81259197299369}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -86.64060344689642}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -91.69781190191861}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -99.760572239873}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -89.56582737743156}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -94.24465823054197}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -93.37886541499756}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -92.32835852159769}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -93.33173097492545}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -89.23628680677211}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -84.10157610636088}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -113.99927976250183}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -90.76738615878276}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -18.712384944257792}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -89.62451848338242}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -8.561637791135581}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -86.71803148358595}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -91.34521259873873}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -93.97528605847037}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -21.15893255028641}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -91.60766505514039}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -20.883624364505522}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "* x x *", "log_prob": -3.7479452220723033}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -93.11121170621482}, {"text": "( b b b )", "log_prob": -5.371665757615119}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -97.49515040154802}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -91.44409241664107}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -85.8020830389869}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -11.793472263467265}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -74.6072991740366}, {"text": "( [ ( a ) ] b b )", "log_prob": -7.051584191969596}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" y \" y x *", "log_prob": -7.832085581496358}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -92.73576914938167}, {"text": "* x y \" y \" y *", "log_prob": -8.181049710023217}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -99.62935175537132}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -97.41186884473427}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -83.49598300587968}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -90.55832840138464}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -96.07894418339129}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -93.76876147004077}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -86.24826702676364}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -94.64235521972296}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -99.54926802014234}, {"text": "( a )", "log_prob": -2.022524684580276}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -96.5702275038202}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -88.59406287345337}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -83.21209817338968}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -89.14304017703398}]}, "epoch_60.pt": {"generated_sequences": ["\" * x * ( a ) x \" * x ( [ * x * x x * ] b [ ( a ) ] ) y ( a ) \" * * y \" y \" y ( a ) x ( [ ( a ) ] b b ) ] [ * * * * ( [ * * x y \" y \" y x * ] [ * * x x * y * ( a ) y * ( [ * y \" y \" * ( b [ ( b [ * * x * x ( [ * x *", "* * * * x ( b [ * ( a ) y ( [ ( b [ * * x x * ] [ * x y \" * y \" y \" y * y * y \" * x x * y \" * * ( [ * x * x ( a ) y * ( a ) y * * * ( a ) y * * * ( a ) y * x x * \" * * x * y \" * ( a ) ] b b ) y * ( a ) y *", "( a )", "( a )", "* ( a ) y \" y \" ( [ ( b [ ( a ) ] ) y ( a ) \" * ( a ) y * y \" * x * y \" y \" * x y \" * x x * y ( a ) \" * ( [ * x ( b [ ( a ) ] ) y * ( a ) y * y \" * y \" * x * * * ( b b [ * ( [ * * y \" * y \" y \" * * y \" y \" *", "( a )", "* x x *", "( a )", "( [ * x x * ] b [ ( [ * x x * ] [ * x y \" ( a ) x \" * ( [ ( a ) ] [ * y \" y \" y x * y ( [ ( b b [ ( [ * x x * ] [ ( b [ ( b b b ) ] [ * x ( [ ( a ) ] b ) ] [ * x ( a ) x \" ( a ) y \" * y \" y \" ( a ) y ( a ) \" y", "( [ ( [ * x x * ] b b ) ] b [ ( a ) ] ) y ( b b b ) \" * x * x \" ( [ * y \" * ( a ) y \" ( b [ * x ( [ ( [ * * * x x * y ( [ * x x * ] b ) \" ( a ) y ( a ) \" ( a ) x \" * x * * x y \" ( [ ( [ * * y \" y \" ( [ ( a ) ] [", "* y \" y x *", "* * * x ( a ) y ( a ) \" ( b [ * y \" ( a ) x \" y \" * * x x * x \" ( a ) x \" * x ( b [ * * ( a ) y ( b [ * ( a ) y ( b b [ * * x x * y ( a ) \" ( [ ( a ) ] [ * ( a ) y ( a ) \" y \" ( a ) x \" y * y ( b [ ( [", "( a )", "* * * x ( [ ( a ) ] ) ( a )", "* * y \" y \" ( [ ( a ) ] b b ) * x * ( a ) y ( a ) \" * * ( [ ( a ) ] b [ * x y \" ( a ) x \" ( a ) y ( [ ( a ) ] b b ) ] ) ] [ * * * y \" y \" * x y \" y \" * * ( a ) y \" y \" * x x *", "* x x *", "( a )", "* y \" * * *", "( a )", "* y \" ( a ) y * x x * \" * ( [ * x y \" * y \" ( a ) y ( [ * y \" ( a ) * x * y * x ( b b b ) y ( b b b ) \" ( a ) y * ] [ * ( a ) y ( a ) \" * x ( a ) * x x * y \" * x y \" ( a ) ( a ) y * x ( a ) y * x x * \" ( a ) * x y \" ( a", "( a )", "( a )", "* x * * ( a ) y * x x * \" ( a ) y * * ( a ) y * x * x y \" ( a ) y ( a ) \" * x * y \" y \" ( [ ( a ) ] b ) ] [ ( a ) ] [ ( a ) ] ) y \" y x * y ( a ) \" * x y \" * * ( a ) y ( a ) \" y \" ( [ ( a ) ] [ * x ( a ) y * x x", "( a )", "* y \" y \" ( b [ ( a ) ] ) y * x ( a ) x \" * x x * x \" ( a ) y \" ( a ) x \" * x * x x * y * * x y \" * y \" * * * y \" * * y \" y \" ( [ ( b b b ) ] b [ * x x * ] [ ( a ) ] [ ( b b b ) ] [ ( a ) ] ) y ( [ * x x * ] [ *", "* x ( a ) x \" ( a ) y ( [ * ( a ) ( [ * * x y \" y \" ( a ) y ( a ) \" y \" * ( a ) y * ( b b b ) ( [ * * * ( a ) y * * y \" ( [ * x x * ] [ ( a ) ] ) y * x x * \" * * * ( [ ( a ) ] [ * y \" y \" y \" * x ( a ) y * y", "( a )", "( a )", "( a )", "( a )", "( [ * x x * ] b [ ( [ * x x * ] b ) ] [ * * y \" ( [ * ( a ) y ( [ * x * x ( b b b ) y ( [ * * x * * ( [ ( a ) ] b b ) ] b [ ( a ) ] ) y * y \" * x y \" * ( b [ ( b [ ( a ) ] [ * x * x x * ] b ) y * x ( a ) y ( a )", "( b [ * ( a ) y ( a ) \" y \" y \" y \" ( a ) y ( [ ( [ ( b b b ) ] [ * x * x y \" ( [ * * ( [ ( a ) ] b b ) ] b b ) ] ) y * ( a ) y ( a ) \" y \" ( [ * * x x * y * ( [ * x * * y \" * x x * x \" ( a ) x \" * y \" y \" y \"", "* x ( b [ * x * ] [ ( [ * ( [ * x x * ] b b ) ] [ ( [ * x x * ] b b ) ] b ) \" ( a ) y * y \" * y \" ( a ) ( a ) x \" ( b [ ( b b ) ] ) ( [ * x y \" ( a ) * y \" ( [ ( a ) ] [ * ( a ) x \" y x * ] b b ) y *", "( a )", "* ( a ) ( a ) ] [ ( b [ ( b [ ( b b b ) ] ) ] b [ * * ( a ) y ( a ) \" ( a ) * * x * y \" y \" y \" y * x x * x \" * y \" ( [ ( b b [ ( [ * x x * ] [ ( [ * ( b b [ * * ( a ) y ( a ) \" ( a ) y * ( [ * x ( a ) y ( b [", "( b b b [ * ( a ) * ( [ ( a ) ] b ) y ( b b [ ( a ) ] ) \" * y \" * x x * x \" * y \" * x ( b [ ( b [ * x * x x * ] [ ( [ * x y \" * * x x * y * x x * \" ( a ) y * x ( b b b ) y * * x ( [ * * x x * x \" * x * ( b [ * y \"", "* x x *", "( a )", "( a )", "* ( b b [ ( [ ( b [ ( a ) ] [ * x x * ] ) ] ) y ( a ) \" y \" y * y * * x * y \" ( [ * * x x * y ( a ) \" ( a ) y * x y \" * ( a ) y ( b [ ( a ) ] [ ( a ) ] b ) \" * y \" ( a ) y * * ( a ) y ( a ) \"", "* ( a ) y \" ( [ ( a ) ] [ * x y \" y \" * y \" y \" * x * ] [ * * ( b [ * x x * ] ) y \" ( a ) y ( [ ( [ * x ( b [ ( b [ * ( [ * y \" ( a ) y ( a ) \" * y \" y \" * x ( [ ( a ) ] b b ) x \" y \" ( a ) * ( a", "* y \" * x x * y * x ( a ) y ( b b ) \" y \" y \" ( a ) y \" ( a ) y * y * ( a ) y * x y \" y \" y * y ( a ) \" ( a ) x y * * x x * y * ( a ) y ( [ * y \" ( a ) y ( a ) \" * x y \" ( a ) y * ( a ) y * y \" * ( b [", "* y \" y \" y x *", "( a )", "( a )", "( a )", "* * y \" y \" y \" * * x y \" y \" ( a ) x * y * x x * y * ( a ) y ( b [ * * y \" y \" ( [ ( [ * x x * ] [ * y \" ( a ) y * ( a ) ( a ) y * x ( a ) ( b [ * x ( a ) y * ( a ) y * x y \" * ( a ) y ( b b [ ( [", "* ( a ) y ( a ) \" y \" ( b [ ( b b b ) ] ) y ( b b b ) \" ( a ) y * * * * * ( a ) y ( a ) \" ( a ) y ( [ * * x x * * y ( [ ( [ * ( a ) y \" * x ( b [ ( [ ( [ * y \" y \" * * * x y \" ( b b [ ( [ * ( [ ( b b b [ * * y \" *", "* x ( a ) y \" * * * * y \" ( a ) y * x ( a ) y \" y x * \" y \" ( a ) y ( a ) * x * y * x ( [ ( b [ ( [ ( [ ( [ ( a ) ] b [ * ( [ * ( a ) y ( a ) \" ( a ) y * x x * y \" ( a ) y ( b [ ( [ ( b [ * x ( a ) y ( a ) \" y", "( a )"], "accuracy": 0.5, "train_overlap": 0.5, "res": [{"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -88.35945582052227}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -92.3232033320237}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -85.41908690723358}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -100.95660430641146}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -90.178839817876}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* x y \" y \" y *", "log_prob": -9.145540704485029}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -99.02477793925209}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -101.3318378420081}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -95.03012413054239}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -98.59642230137251}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -97.20248021674342}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -95.45863397116773}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -17.050580584269483}, {"text": "( [ * x x * ] b b )", "log_prob": -9.944971458055079}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -85.24669429007918}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.36052644858137}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -93.97184140601894}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -92.97937394154724}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -84.89108381443657}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -90.52203111804556}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -89.71066222168156}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -91.04841407563072}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -87.72764317085966}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -85.82353247259744}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -82.94793605507584}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -104.81615674815839}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -88.92063421790954}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -18.835041789337993}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -88.0718439387274}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -9.942909142700955}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -82.62752532609738}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -90.1216377473902}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -90.98444679641398}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -18.636905001243576}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -88.66885251057101}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -20.882416363805532}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "* x x *", "log_prob": -4.107247211970389}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -91.06930453504901}, {"text": "( b b b )", "log_prob": -6.318262631073594}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -93.05016045697266}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -88.38510529353516}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -82.3879219139344}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -13.439795861952007}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -70.3044561969582}, {"text": "( [ ( a ) ] b b )", "log_prob": -8.43815752537921}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" y \" y x *", "log_prob": -8.403018035925925}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -90.42329406004865}, {"text": "* x y \" y \" y *", "log_prob": -9.145540704485029}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -97.53986932191765}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -93.26290071866242}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -80.34390486672055}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -90.3684481724631}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -95.77157999243354}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -92.68101344571915}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -82.90167038334766}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -91.78021152550355}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -94.92014492233284}, {"text": "( a )", "log_prob": -2.6866962626809254}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -91.24181227199733}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -85.3477034830139}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -80.81418252992444}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -87.31362993386574}]}, "epoch_65.pt": {"generated_sequences": ["* y \" y \" y y * * * ( a ) y \" * x y \"", "* y \" * x * ( a ) y ( a ) \" * ( a ) y * y \" * * x * ( a ) y * x ( b b b ) y \" * y \" * x", "* x * x x *", "( [ * y \" * y \" ( b b [ ( a ) ] ) y ( [ * * ( [ * ( [ ( a ) ] b [ * y \" y \" y \" ( a ) y ( b b b ) ( a ) ( a ) y * x * ( a ) y ( a ) \" ( b [ * y \" ( b b b ) y * x ( b [ * ( a ) x \" * x x * y ( a ) \" * y \" y \" * x", "* * y \" y \" * * * x * ( a ) y * x x * \" ( b b [ ( a ) ] ) y \" * x y \" ( a ) y * x x * \" ( [ ( a ) ] b [ ( a ) ] ) ] ) y ( a ) \" ( a ) y ( [ * x y \" * x x * y ( a ) \" ( b [ * y \" * ( a ) x \" ( a )", "* x x *", "* * y \" * x x * y ( a ) \" ( a ) * x x * y * ( a ) y ( [ * x y \" * * y \" ( [ ( b b [ ( a ) ] ) ] b ) x \" ( a ) ( a ) x \" * x ( a ) y * * x * y \" y \" * x x * y * x x * y * x x * \" y \" ( a ) y \" ( a ) y * * y \" ( [ * y ) y * y", "* x * ( a ) * y \" y \" * * x x * y ( a ) \" * x y \" ( a ) y * ( [ ( a ) ] b b ) y * ( a ) ( b [ * x y \" * x x * y * x y \" ( a ) x \" y x * y * x x * \" ( a ) y \" ( a ) y * x ( a ) y * x y \" * x x * y ( a", "* x x *", "* ( a ) y * * x * * x y \" * y \" ( b b [ ( a ) ] ) y ( a ) \" * x x * y ( a ) \" * x x * ( b [ * * y \" y \" y * * ( b b [ * * * ( a ) y ( [ * y \" * x * x * y \" ( a ) x * ( [ ( a ) ] b [ * ( a ) x \" ( b", "* x x *", "* y \" ( a ) y * x ( b b [ * y \" y \" * y \" y \" * x ( a ) x \" * ( [ * ( a ) y * x x * \" ( a ) y ( a ) \" * x x * y * x y \" * x x * ( b [ * x x * ] b ) x * x \" y \" y * ] ) x * x ( a ) ( a ) x \" * x y \" ( a", "* ( a ) y * x ( b [ * * x x * y * * * x y \" y \" * x x * y \" * * * * ( a ) * ( [ ( a ) ] b [ ( [ * x y \" * x x * ] b ) y * * ( a ) y * * x x * \" y \" y * x * y ( [ ( [ * y \" * x y \" ( a ) ( a ) ( a )", "( a )", "* x x *", "* ( [ * x y \" * ( a ) y * x * y \" * x ( a ) y * x x * \" ( [ ( b [ * x x * ] [ ( a ) ] ) ] ) y ( a ) \" y \" ( [ ( [ * y \" * y \" * ( b b b ) y * ( a ) y * x x * \"", "( b b b ) ] ) ] [ * x x * ] ) y * x x * \" ( a ) y ( a ) \" y \" ( a ) y * x ( a ) x * x ( a ) \" y \" * x y \" y * y ( a ) \" ( a ) y * x x * y ( a ) \" ( a ) y * * ( a ) x \" * x y \" y \" y * y ( [ * y \" * ( a ) y ( a ) \" y y", "* x * * x ( a ) y ( a ) \" ( [ ( a ) ] b [ * x y \" * x y \" ( a ) y * * y \" y \" ( a ) y * * ( a ) y * x y \" y * * x * x * ( a ) y \" * * ( a ) ( a ) x \" ( a ) y * * * y \" y \" ( a ) x ( [ ( a ) ] [", "( a )", "* x * ( a ) y * * ( [ ( a ) ] [ * x y \" y \"", "( a )", "* x y \" ( [ * x * * x \" y * ( a ) ( [ ( a ) ] b b ) * ( a ) y ( [ ( a ) ] b b ) \" * x x * ( [ * x x * ] [ * y \" * y \" ( a ) y ( b [ * * y \" ( a ) * x y \" ( [ * x ( [ * * ( [ ( [ * * y \" y \" ( b b b ) y ( a )", "* * x x * y * ( a ) y ( a ) \" * ( b b [ ( a ) ] ) y * x x * y \" * x y \" * x x * y \" * x y \" y \" * * x x * ( [ * y \" ( a ) ( b [ ( a ) ] [ * x y \" * x * * x x * y ( b [ * y", "( a )", "* x ( a ) x \" * x x * ( a ) x \" * x x * y ( a ) \" y \" ( a ) y * ( [ * ( b b b ) y ( a ) \" * * x y \" y * y * x * * x x * y * ( [ ( a ) ] [ * x x * ] [ ( b b ) ] ) y * * * ( b b [ * y \" * x * x x * y * ( a ) x \" *", "* x x *", "* * x x * y ( a ) \" * ( a ) y ( a ) \" ( a ) x \" ( a ) y \" y x * y ( a )", "* x x *", "( a )", "* * ( a ) * y \" * * ( a ) * * ( [ * x x * ] b b ) * ( a ) * ( a ) * x x * y ( [ * y \" ( [ ( b b b ) ] ) y * y \" ( a ) ( a ) ( a ) x \" * x x * y * ( [ * x x * ] a ) y * x * x x * \" y \" * y \" ( a ) y * * y", "* x * x x * \" * x x * y ( a ) \" ( a ) y * x x", "* x ( a ) y ( [ * ( a ) y \" y \" y \" * x y \" y x * y * ( [ ( a ) ] b b ) x \" * * x x * x \" * * ( a ) y ( a ) \" y \" ( [ ( [ ( a ) ] [ ( b b [ ( a ) ] ) ] [ * y \" y \" ( b b [ * y \" ( a ) y ( a ) \" ( a ) y", "( b b [ * y \" ( a ) y * * x ( a ) y ( a ) \" y \" * x ( a ) y * * * x ( [ ( a ) ] b [ ( [ ( [ * * ( a ) y * ( a ) y * * ( a ) y ( a ) \" ( a ) y * x x * \" ( a ) x \" * y \" * ( a ) y ( [ * y \" ( [ * x * y \"", "( b [ ( a ) ] b ) ( a ) ] ) \" ( a ) x \" * x y \" ( a ) y ( a ) * y \" ( [ * x x * ] [ ( a ) ] [ ( a ) ] b ) \" ( [ * x x * ] b ) y * ( [ ( a ) ] [ * x x * ] ) \" ( a ) ( a ) y * x y \" ( b b b ) ( a", "( b a )", "* y \" y \" y * * x x * y \" * x y \" ( b b b ) x \" * x y \" * * x x * y \" * * ( a ) y ( b b b ) \" * * ( a ) y * x x * \" ( [ ( a ) ] b b ) y ( a ) \" y \" y * ] b ) y ( a ) \" y \" y \" * ( b b ) y * x", "( [ ( [ ( [ * * x y \" * * ( a ) y ( a ) \" * ( a ) y ( b b b ) \" y \" x * x \" * ( a ) * y \" ( b b b ) * ( b [ * y \" y \" ( b b [ * y \" * * x * * x x * y ( b [ ( b b b ) ] b ) x * x x * * \" ( a ) y * y \" y", "* * x y \" y * x y \" ( a ) y ( a ) * y \" y \" y x * * ] [ ( b [ * x x * ] [ * x x * ] ) ] [ ( a ) ] ) ] [ * x y \" ( [ * x y \" * * * * y \" * x x * y \" y \" ( a ) y ( b b ) ( a ) \" * x x * * y \" y \" * * x x * y ( b b", "* ( a ) y \" ( a ) y ( [ * ( b [ ( b b ) ] b ) * x x * ] b ) y * x ( a ) y ( [ ( [ * x * x y \" ( [ ( a ) ] b b ) * x y \" y \" * * ( [ ( a ) ] b ) y ( b [ * y ] b ) \" ( a ) y ( [ * x ( [ * x x * ] b b ) \" * x (", "* x y \" * x x * y * ( b [ ( a ) ] ) * x * y \" ( [ * y \" * x * x * ( a ) x \" * y \" y \" ( a ) y * ( a ) y * x x * \" y \" ( a ) ( a ) y ( a ) * ( a ) x \" * x x ( [ * x ( b [ ( a ) ] b ) ] [ ( b [", "* ( a ) y * x * ( a ) y ( [ * * ( a ) x \" ( a ) y ( [ * x y \" ( a ) x \" y * ] b [ ( b [ ( a ) ] ) ] ) \" * x * x * y \" * x x * y ( [ * x ( [ * ( a ) y * x y \" * x ( a ) y ( b [", "* ( b [ ( a ) ] b ) * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( a ) ] ) y ( [ * x x * ] [ ( a ) ] ) ] b ) * y \" y \" y ( a ) x \" ( [ ( b b ) ] ) y ( a ) * * ( b [ ( a ) ] ) x \" ( a ) y \" y \" ( a ) y ( [ ( a )", "( a )", "( [ ( a ) ] b ) ] ) y * y \" ( b [ ( [ ( a ) ] b ) ] ) * y \" ( a ) y ( b [ ( a ) ] [ ( b b b ) ] ) \" ( a ) ( a ) y ( [ * * ( a ) * y \" y \" * x x * y ( b [ ( a ) ] b ) \" * y \" ( a ) ( a ) y * * ( a ) ( a", "( a )", "( a )", "* x * y \" * ( a ) y ( a ) \" ( a ) ( a ) y ( a ) \" * * y \" y \" y * x * * ( a ) y ( b [ ( [ ( a ) ] b [ ( a ) ] ) ] ) \" ( a ) y * * x x * y * y \" ( [ * ( a ) y ( a ) \" ( [ * x x * ] b [ * x * x x * y \" y", "( b b ) ] b ) \" y \" ( b b b ) y ( a ) \" * x x * y ( a ) \" ( b [ * x x * ] [ * ( a ) ( a ) ( b [ ( a ) ] ) y ( a ) \" * * * y \" y \" * * y \" ( [ * ( [ ( a ) ] [ * y \" ( [ * x * y \" y \" y ( a ) y ( a", "( a )", "* x * y \" ( [ ( [ ( [ * ( a ) y ( b [ * ( [ * x y \" ( a ) y * x ( b [ * ( a ) y * y \" * x ( a ) * y \" y \" ( a ) y ( a ) \" y"], "accuracy": 0.3, "train_overlap": 0.3, "res": [{"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -86.88242397998692}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -90.56253279570956}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -88.51415537460707}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -95.40052528434899}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -88.12297370657325}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* x y \" y \" y *", "log_prob": -9.910160800151061}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -100.9201893247664}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -98.44018624728778}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -93.68570313742384}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -93.88308879174292}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -94.9199848905555}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -96.25104706303682}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -17.207776133931475}, {"text": "( [ * x x * ] b b )", "log_prob": -11.930364787811413}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -83.8683745926246}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -84.51015252125217}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -94.97101871488849}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -93.03281210665591}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -83.75167649728246}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -90.38081886293367}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -89.30574710917426}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -91.58064559657942}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -89.52037719025975}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -86.94844899256714}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -84.40262611026992}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -108.1861248195055}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -88.33245939138578}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -20.096814099117182}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -86.53736293676775}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -11.455562364077196}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -81.3646841943264}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -89.48950814525597}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -91.52375767240301}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -18.6406043577299}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -88.25318074296229}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -21.78458579798462}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "* x x *", "log_prob": -4.466167669626884}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -91.92950666786055}, {"text": "( b b b )", "log_prob": -6.3584896777174436}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -91.25656214903574}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -87.00396816118155}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -83.03412968030898}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -13.802386459108675}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -68.57612576542306}, {"text": "( [ ( a ) ] b b )", "log_prob": -9.665767657192191}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" y \" y x *", "log_prob": -9.142762337025488}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -89.79763861920219}, {"text": "* x y \" y \" y *", "log_prob": -9.910160800151061}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -98.95412073723855}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -95.3140494604595}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -79.16462225897703}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -87.73365222197026}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -95.05034310696647}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -91.54230267216917}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -83.41602061598678}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -91.66088096564636}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -92.29021539026871}, {"text": "( a )", "log_prob": -3.1112242076778784}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -87.27452312689275}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -83.61709533067187}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -81.10984503585496}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -89.15290187689243}]}, "epoch_70.pt": {"generated_sequences": ["* x x *", "* x x * * ( a ) y ( a ) \" y \" y * y \" * y \" ( b b b ) * * x x * ( a ) * ( [ * x ( a ) y * * x ( [ ( a ) ] b b ) y ( b b b ) \" * * x x * y * y \" y \" * x x * x y \" * ( a ) y ( a ) \" ( a ) y ( b * * * x y \" ( b b [ * x x * x \" y \" ( b [ * x y \" y \" y * * y ( a ) \" ( a ) x \" * * y \" * y \" * x * * *", "\" ( [ ( [ * * y \" y \" y \" ( [ * x y \" ( b [ ( a ) ] [ * x * x y \" ( a ) y * x * x * * y \" * ( b [ ( a ) ] b ) y ( a ) \" * * x y \" * ( a ) y ( a ) \" ( a ) y ( a ) \" * y \" ( a ) x x * y * y \"", "( b b ) ] [ * * ( a ) y * * * ( b [ * x * x y \" y \" y *", "( a ) y ( b [ * x x * ] [ * ( a ) * ( a ) x \" * y \" y \" * * ( a ) y \" ( a ) * x ( a ) y * y \" * y \" ( [ ( [ * x ( a ) x \" ( a ) y * x x * \" ( b [ * * ( a ) y ( [ ( [ * x ( a ) y * * x * x ( a ) ( a ) y ( a ) \" y \" ( a ) x ( a )", "* * * x y \" ( a ) * y \" * x * y \" ( a ) y ( b b [ ( [ ( a ) ] b [ ( a ) ] ) y * y \" ( a ) y * x * * x x * y ( [ * ( b [ ( a ) ] ) \" y \" * x x * x x * y ( a ) \" * ( a ) x \" * y \" * ( a ) y ( b b [ ( a ( b [ ( a ) ] [ ( a ) ] )", "* y \" y \" ( [ ( a ) ] [ * y \" ( a ) y * y \" y \" * x ( [ ( a ) ] [ * y \" y \" * x x * y * x x * y * y \" ( a ) y ( a ) \" y \" y x * y ( b [ ( a ) ] b ) \" y x * \" * ( a ) y * x * y \" * x * x * y", "* x y \" ( b b [ ( b b ) ] [ * x ( a ) * * x x * y ( a ) \" ( a ) y * y \" y \" y * ( a ) y ( b [ ( [ * ( a ) y \" y \" * x ( b [ ( b [ * * x * ( b [ * ( b [ * x ( b [ * x ( a ) x \" ( a ) y * ( a ) y ( b [ ( a ) ( a )", "( a )", "* x ( a ) y * x x * \" y x *", "* x y \" ( a ) x ( a ) y \" y \" * * x y \" * ( b b [ ( a ) ] ) * y \" * ( b [ * * x ( a ) y * ( a ) y \" ( a ) * x y \" y \" ( [ ( a ) ] b b ) * ] ) x \" ( b [ * ( a ) * x * x x * y ( a ) \" * * ( [ * y \"", "( a )", "( a )", "( b [ ( a ) ] [ ( a ) ] ) y * * ( [ * x ( a ) y * y \" y \" * * * x x * x x * y ( a ) \" ( a ) y \" ( a ) y ( a ) \" ( a ) ( b b [ * * * * * x * y \" * ( a ) x \" y \" y \" ( a ) x y \" y \" ( a )", "* * x * ( [ ( b [ ( a ) ] [ ( b b [ ( a ) ] ) ] ) y * * * ( a ) *", "* x * * y \" y \" ( [ ( a ) ] [ ( [ * y \" y \" ] [ ( a ) y * x x * \" * * x x * y ( [ * x ( a ) y ( a ) \" ( b [ * ( a ) y * ( [ * y \" * ( a ) * y \" ( a ) y * ( a ) y * x * x y \" * y \" * x ( a ) y * * y ( a )", "* * y \" * x * ( a ) y * x ( a ) y ( a ) \" y ( a ) * ( [ * ( a ) y * x * x * * * x x * y * x x * \" y * ( [ y \" * x y \" * x x * y ( a ) \" * ( b b [ ( [ * x y \" ( a ) y ( a ) \" ( [ * ( [ * y \" * y \" y \" * y \" ( a ) y * * y \" * * x ( a ) y * ] b [ * * x x * * x x * x \" * ( b b [ ( [ ( b [ * y \" ( a ) y ( a ) \" y \" * x * x x * y * x x * * x ( [ * y \" y \" ( a ) y * x x * y * x ( b b b ) y * y", "( b [ * x ( a ) y * x x * \" * x y \" ( a ) y ( a ) * ( b [ * * y \" ( a ) y * x y \" ( a ) y ( a ) \" * y \" * * x x * y ( b [ ( b [ * x ( a ) y * y \" ( a ) y * x y \" ( a ) y ( a ) \" ( a ) x \" ( b [ * ( a ) y ( ( b b [ * * x x * y * y \" * y \" ( a ) y * * ( a ) x \" y x * y ( a ) \" ( a ) y * x ( a ) * ( a ) ( [ ( a ) ] b b ) y ( a ) \" ( a ) y ( a ) \" * x x * x * y * y \" ( a ) y * x x * ] [ ( a )", "* y \" * x x * y * y \" * ( a ) y * y \" ( b [ * ( [ ( a ) ] [ * y \" y \" ( a ) y * x ( a ) * ( a ) x \" y \" y \" ( a ) y * y ( a ) \" * ( a ) y ( a ) \" * * x ( a ) y * x y \" y \" y x * * y * y", "\" * ( a ) x \" * y \" y \" ( b b b ) y * ( [ ( a ) ] [ * * x y \" y \" y * ] b ) * * y \" * x x * y ( a ) \" ( a ) y * ( a ) * x ( a ) y \" * * ( a ) y ( a ) \" ( [ * x ( b [ ( b [ * y \" y \" y y \"", "( [ ( a ) ] [ * x x * ] [ ( a ) ] b b ) ] [ ( a ) ] ) ( a ) y * ( a ) y * ( a ) x \" ( a ) y * x y \" ( b b [ ( a ) ] ) y * ( b b [ * x x * y * ( b b [ ( a ) ] ) * ( b b ) x \" * ( a ) y * * ( b [ * x x * ] b ) \" y * ] ) * ( b b [ ( a ) ] ) ( b b ) ] [ * ( a ) y * x y \" ( a ) ( a ) ( a ) y ( [ ( a ) ] b b ) \" ( a ) y ( a ) \" ( b [ ( b b [ ( a ) ] ) ] ) y ( a ) y * x x * \" ( a ) x \" * x y \"", "( a )", "( a )", "* y \" y \" ( b b ) y * x y \" * x x", "( [ * y \" * x x * y * x * x ( a ) y * x x * \" ( a ) y * y \" ( a ) x \" ( [ ( b b [ * * * y \" * * x x * * ( a ) y ( a ) \" ( a ) x \" * ( a ) ( b [ * * x y \" * x ( a ) y ( [ ( b [ * y \" ( a ) x \" * * * ( a ) y ( a ) \" * x x * y ( b b b ) \" ( a ) y ( a ) \" y * * y \" y \" y x * \" y x * x \" ( a ) y ( a ) \" ( [ * y \" ( b b [ ( b [ * x x * ] b ) ] b [ ( b b b ) ] [ ( a ) ] ) \" y \" ( a ) y ( [ * y \"", "( [ * x y \" * y \" ( a ) ( [ ( b b b ) ] [ * x y \" ( [ ( a ) ] b b ) y * y \" * x x * y * y \" y \" y * \" y \" ( a ) y ( b b b ) \" * * x x * y * * * x x * y * * x x * y * x y \" * * ( a ) * ( a ) y * * x ( [ * y \" ( [ ( [ ( [ * ( a ) ( b b [ ( a ) ] ) x \" ( a ) y ( [ * ( a ) y * ( a ) y ( b [ ( [ * ( b [ ( a ) ] b ) ( a ) y ( [ ( a ) ] [ ( a ) ] * ( a ) y ( [ * x y \" ( a ) y \" * ( a ) y ( a ) \" y \" y \" * ( a ) ( [ ( a ) ] [ * ( [ * y \" * x x * y ( a ) \" ( [ ( a ) ] [ ( a ) ] [ ( [ * x * y \" ( a ) (", "( [ * x ( [ * * ( a ) y ( a ) \" ( a ) x \" * * x x * * * y \" y \" * * y \" * * x x * y ( b b b ) y ( a ) \" ( a ) * ( a ) y * x ( [ ( b b b ) ] [ ( a ) ] ) x \" ( [ * x x * ] b ) ( a ) y * x x * * ] b ) * y \" y x *", "( a )", "\" y \" ( a ) x *", "* x * * y \" ( b [ * x y \" * ( a ) * * x * ( a ) y ( a ) \" y \" ( a ) x \" * x * x x * x \" y x * x y \" ( a ) y * * x ( [ ( b b b ) ] ) y * x y \" y \" y \" * y \" y \" ( a ) y * y \" ( [ * ( a", "( a ) ] [ * x x * ] ) y * x x * \" ( a ) ( a ) y * x x * y * y \" * ( a ) y * x x * \" y \" * ( a ) y * ( b [ * ( a ) y * * y \" ( a ) y ( a ) \" ( a ) y * y \" ( a ) * ( [ ( [ ( a ) * y \" ( a ) y * * y \" ( a ) y ( [ ( a ) ] [ * x y \" ( a ) y ( b [ * x y \" y y \" * ] [ ( a ) ] b ) y ( a ) \" ( a ) y \" * * x y \" y \" ( [ ( a ) ] b b ) y ( a ) \" ( a ) y ( a ) * \" ( b b [ ( [ * x x *", "* * * x * * x * x * * * ( a ) x \" ( a ) x \" * x y \" ( a ) y ( [ ( [ ( a ) ] [ * x * ( a ) y \" y \" y y \" y \" * ( [ * y \" * * x x * y ( [ ( a ) ] [ ( a ) ] [ * y \" * * x x * y ( a ) \" * * ( a ) y * y", "( b [ * y \" * ( a ) y * y \" y \" * x * x y \" ( [ ( [ * ( a ) ( [ ( [ * x x * ] [ * x y \" ( a ) y * y \" ( [ ( a ) ] b b ) y ( a ) \" ( b [ ( a ) ] b ) y * x x * y ( a ) \" ( a ) y ( a ) \" * x * x * y * y \" * y \" * x x * y ( [ ( a ) ] [ ( a ) ] b ) \" * ( a ) ( a ) y ( b [ ( a ) ] [ * ( b b [ * * x y \" ( [ ( a ) ] [ * * ( b [ * y \" ( b [ * * ( [ ( b b b ) ] ) y * x x * * ( a ) * * x x * y * ( b b [", "* * x y \" y \" y x *", "* * x x * * ( a ) y * * x ( [ * x x * ] [ ( [ * ( a ) y * y \" ( a ) y ( a ) \" * * x x * y \" * y \" * * ( b b b ) y * * * x ( a ) * * y \" ( [ * x ( a ) y ( a ) ( a ) \" * * x * * ( a ) y \" ( [ * x * x * x ( a ) y ( a * x x * y ( b b [ * ( a ) y * x y \" * x y \" * ( a ) y ( a ) \" * x x * y * ( b b b ) y \" y \" ( a ) x \" * ( a ) ( b [ * x y \" y \" ( a ) ( a ) x \" ( [ * ( a ) x \" y \" * ( a ) * * * ( b [ * y \" * ( b b b )", "( a )", "( a ) y ( a ) \" ( a ) * ( a ) y ( a ) \" ( a ) y ( a ) \" * x ( [ ( a ) ] b [ * y \" y \" ( a ) y * y \" * x x * y ( a ) \" * x ( a ) y ( b b b ) \" * * * x x * ( a ) y ( b [ ( a ) ] b ) \" * ( a ) ( b [ ( b ( b [ ( a ) ] )", "* y \" * ( a ) y ( [ * * x x * ( a ) y * x * ( a ) y ( [ ( [ ( a ) ] [ ( a ) ] [ * * ( a ) ( b [ * * y \" ( a ) y ( b [ ( b [ * x x * ] b [ ( a ) ] ) * x x * y ( a ) \" * * y \" ( a ) y ( b [ ( a ) ] [ ( a ( a )", "( a )", "( a )", "* ( [ * x x * ] [ ( a ) ] [ ( a ) ] ) ( a ) y * ( a ) x \" * x x * y ( a ) \" * y \" ( a ) y \" * * x y \" ( b b b ) y * x x * y ( a ) \" * x ( a ) x \" y \" * ( a ) y ( [ ( [ * * x y \" * ( a ) x \" * x x * ( a )", "( [ * x * ( a ) * x * ( b b [ ( a ) ] b ) y * * ( a ) ( b [ * x x * ] b [ ( a ) ] ) ( b [ ( a ) ] b [ ( a ) ] b ) y * x * y \" y \" * x y \" * x * * * x ( a ) y * x ( a ) y ( b b b ) \" ( a ) x \" * x y \" ( a * x ( a ) y * y \" ( a ) x \" ( b [ * ( a ) x \" ( b [ ( a ) ] [ * ( a ) ( [ ( a ) ] b ) y \" y \" * ( a ) * ( b b [ ( a ) ] ) ( a ) ( a ) y ( [ * x x * ] [ ( a ) ] b ) ] [ * x ( [ * ( [ ( a ) ] [ * ( a ) *", "( [ ( a ) ] b [ * ( [ ( [ * * x ( b b [ * x y \" y \" y * y * x ( [ * * ( a ) y * x x * \" ( a ) y * y \" * * ( a ) y ( b [ * ( b b [ * x x * y \" * ( a ) y ( a ) \" * ( a ) y \" * * x x * ( a ) y ( a )", "* x * ( [ * ( a ) * ( a ) y * x *", "* * y \" * x y \" ( a ) y ( a ) * y \" ( a ) y * y \" y \" ( a ) x x * x * ( a ) y * x x * * y * x y \" * * ( a ) y \" ( a ) x \" ( [ * x ( a ) y * ( a ) x \" y \" * x * * * y \" * y \" * * ( b [ ( a * y \" y \" * x y \" * * * ( a ) y ( [ ( a ) ] [ ( [ ( a ) ] b ) x \" ( a ) * x x * * * x x * y ( a ) \" * x x * ] b ) y ( a ) \" * * x ( a ) ( a ) y ( a ) \" y \" y x * y * ( b b [ * ( a ) y * y \" * * ( b b [", "( [ * * * x x * ( a ) ] b ) ( a ) * x ( a ) y ( b [ * * x x * y * y \" ( a ) y ( a ) \" * y \" y \" * y \" * x ( [ * * ( a ) y * * x y \" * * x ( b [ ( a ) ] ) y ( b b b ) \" ( a ) y \" ( a ) * ( a ) y ( [ ( a ) ] [ ( [ ( a ) * y \" * x ( [ * y \" ( a ) y * * ( a ) x \" * x ( [ * y \" * x x * y \" ( b [ ( a ) ] ) y ( b [ ( a ) ] b ) \" y * y \" * ( b [ * y \" ( [ * * x ( [ ( b b [ ( a ) ] ) ] [ * * x x * ( [ * x x * y ( a ) \" * x x * x", "* * y \" ( a ) * x y \" * x y \" y \" * x x * * * x x * y * x x * \" y * x x * y * y \" * x x * y * * ( a ) ( [ * * ( a ) x \" * x ( a ) y ( a ) \" * y \" y \" * x * ( [ ( a ) ] b ) ( b b b ) ( a ) * * ( b b * y \" ( a ) y \" y \" * ( a", "* * * x ( [ ( b [ * * x * x ( a ) * * y \" ( a ) x \" ( b b [ ( a ) ] ) y ( b [ * x y \" * x ( a ) y ( b b [ ( a ) ] ) \" ( a ) y * x x * * ( a ) y ( b b [ * y \" ( b b [ * x * * x y \" * x x * ( a ) x \" ( a ) ( b b [ * * y \" ( a ) * x * y \" ( a ) y * x x * \" ( a ) y ( a ) \" * x ( a ) y * y \" y \" y * * x * y ( a ) \" y \" y \" ( b b [ * x ( a ) y * x x * ( a ) y \" y \" y \" ( a ) y * y ( [ ( a ) ] [ ( [ * x x", "( [ ( a ) ] b [ ( a ) ] ) ] [ ( a ) ] b ) y ( a ) \" * x x * y ( a ) \" * * ( [ * x y \" ( a ) y \" ( b b b ) x \" * x y \" y \" y \" ( a ) y * * x x * y * ( a ) y ( b [ ( b b [ * x x * ] b ) \" ( a ) y * x ( a ) y ( a ) * x ( a ) y \" ( a ) y * * * * ( a ) ( a ) x \" y \" * y \" y \" * ( a ) * x ( a ) ( a ) y ( a ) \" ( a ) y * ( a ) y * ( a ) * x ( a ) y * x x * \" y \" * x ( a ) x \" y \" ( a ) y * y \" ( a ) y ( a ) \" y *", "* x ( a ) x \" y \" * x * x y \" ( a ) y ( a ) \" y * * * ( a ) x \" ( a ) * y \" ( b [ * * x y \" ( b [ * x y \" y \" * * y \" y \" ( a ) y * x ( b [ ( a ) ] b ) ] b ) y * ( b b [ * ( a ) y ( a ) \" * * ( b b [ ( a * * * x x * y \" ( a ) x \" ( a ) ( a ) y ( a ) \" ( a ) y ( [ ( a ) ] b [ * * * * ( a ) * ( a ) y ( a ) \" * y \" ( [ * x ( b b b ) y ( b [ ( a ) ] b ) \" ( b [ * x * ] [ * x x * ] [ * y \" * y \" * x x"], "accuracy": 0.2, "train_overlap": 0.2, "res": [{"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -86.25804508946021}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -94.34474626678275}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -86.29502229226637}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -95.73025776899885}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -86.0269650776172}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* x y \" y \" y *", "log_prob": -9.188585978583433}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -99.13938090362353}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -96.15120135768666}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -90.31033525062958}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -92.2948252724018}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -93.89304236270254}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -96.15753484715242}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -15.721409130375832}, {"text": "( [ * x x * ] b b )", "log_prob": -11.65729364613071}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -85.31454717091401}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.4498482576455}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -92.88740497606341}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -95.60033210451365}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -85.60560129897203}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -87.42569311347324}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -90.30522822181229}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -85.6003300996963}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -88.7930656587705}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -86.27360538387438}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -80.55774708825629}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -107.40149743721122}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -86.63059745699866}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -19.877943326253444}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -83.84856456922716}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -10.85957796825096}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -84.6671767134685}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -88.99152038665488}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -91.91674762105686}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -18.763993598986417}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -85.37541891931323}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -21.716727390885353}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "* x x *", "log_prob": -4.588463946827687}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -90.75777062383713}, {"text": "( b b b )", "log_prob": -6.464207305805758}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -89.15911647042958}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -87.2576163506601}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -85.38305132411188}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -14.013387895247433}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -72.66225171217229}, {"text": "( [ ( a ) ] b b )", "log_prob": -9.447828516771551}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" y \" y x *", "log_prob": -8.704474813537672}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -88.7662985198549}, {"text": "* x y \" y \" y *", "log_prob": -9.188585978583433}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -96.49864199449075}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -92.67062308150344}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -79.17082078295061}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -90.66249434655765}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -92.4719183217967}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -93.10420068370877}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -80.87354575260542}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -90.75639384955866}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -93.21995175592019}, {"text": "( a )", "log_prob": -2.5935062513453886}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -98.94162575373775}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -85.82319152620039}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -81.56144867037074}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -88.09564747652621}]}, "epoch_75.pt": {"generated_sequences": ["( b b b )", "* x ( [ ( a ) ] b b ) ] )", "( a )", "( a )", "( a )", "( a )", "( b [ * ( a ) ( [ * y \" * ( b [ * x * y \" ( a ) y * y \" * * ( a ) y ( a ) \" y \" y x * \" * * ( [ ( a ) ] b ) y ( a ) ( a ) \" y \" * x ( b b [ ( a ) ] ) ( a ) y * ( a ) y * y \" y \" * x x * y ( b [ * x x", "* ( a ) y * x x * \" y \" y x * ( a ) \" ( [ ( a ) ] b [ * x * y \" ( a ) * x x * y ( a ) \" ( a ) y * ( a ) x \" * ( a ) * y \" ( a ) y ( a ) \" ( a ) y * y \" y \" * ( b [ ( a ) ] [ ( [ ( a ) ] [", "( a )", "* * x * ( a ) y * x x * \" ( b [ * y \" ( a ) y * x y \" ( a ) y * ( [ ( b [ * x x * ] b b ) ] [ ( a ) ] [ ( a ) ] ) y ( a ) \" y \" ( a ) y * ( b [ * x x * ] b b ) \" y \" ( [ * * x ( a ) y ( a ) \" y \" * y \" * ( [", "* x y \" * y \" y \" y x *", "* * x x * x \" * * ( b b ) y \" y \" * ( a ) y ( a ) \" y \" y x * x * y \" ( a ) y * x x * \" * x ( a ) y * x * x ( a ) y \" * ( b b b ) y * y \" ( [ * y \" * y \" y \" * x x * ( a ) y ( a ) \" y \" * y \" y \" y * y ( b [", "( a )", "* * x y \" y \" ( a ) y ( a ) \" * * * x y \" ( a ) y ( a ) x * ( a ) y ( a ) \" * x * x x * x x * ] b ) y \" y \" ( a ) y * ( a ) ( a ) x \" ( a ) ( a ) y * y \" * * x y \" * x x * y * y \" ( b [ ( a ) ] ) y *", "* * ( a ) y * x y \" y \" y x * y * x * * ( b [ * x ( a ) y ( a ) \" * x x * x \" y x * ( a ) y ( a ) \" y \" y * y \" ( a ) y * y \" y \" y x * y * x x * y ( [ * ( a ) x \" * x x * y * y \" ( a ) x \" ( [ * y \" * y \" ( a ) y ( [ ( a ) ]", "( a )", "* x x *", "( [ * * ( b [ ( [ ( a ) ] b ) ] ) x \" y \" y * ] b ) * x * y * * ( b [ * ( a ) y ( [ * ( a ) y * ( a ) y * x x * \" * x * ( a ) y ( [ ( b [ * x ( a ) y * y \" * x x * x ( a ) y ( [ * x ( a ) y ( [ (", "* * y \" * x ( b b b ) y", "* ( a ) y * x * x y \" ( a ) y * x ( a ) ( b b ) y ( b b ) \" y \" ( [ * x x * ] [ * y \" ( b [ * * * * ( a ) x \" y x * y * x x * ] ) * x x \" ( [ ( a ) ] [ ( a ) ] [ ( a ) ] b ) x \" * * ( b [ ( a ) ] ) y *", "( [ * * ( b [ ( [ * ( [ ( a ) ] b ) ( a ) y \" * * ( [ ( a ) ] [ ( [ * * y \" y \" y x * y * y \" * x x * y ( a ) \" y \" * x ( a ) y * * x y \" ( b [ ( a ) ] ) * x x * * ( a ) y ( a ) \" y \" * ( a ) y ( [ * x y \" * ( a ) y *", "* * x x * y * * y \" y \" y \" ( b [ ( [ * ( b b b ) x \" * ( a ) y * ( [ ( a ) ] b ) y \" y \" y \" y * ] b ) y * x x * \" ( a ) y ( [ ( [ * * * ( a ) y \" * x y \" ( a ) y * x ( a ) ( b b b ) x \" * * x ( a ) x \" ( a )", "* y \" y \" ( a ) y ( b [ * * x * x ( [ ( a ) ] [ * ( b b [ * * x y \" y \" y * * x x * ( b [ ( [ * ( a ) x \" y \" ( a ) ( b b b ) y * * ( a ) y ( b [ ( a ) ] ) \" * x x * y ( b b b ) \" * x y \" * x x * x * ]", "* x x *", "( [ * x * x x *", "( [ ( a ) ] [ * * x * y \" * y \" y \" ( [ ( a ) ] b ) y ( a ) \" ( [ ( b [ * y \" * x x * y * ( a ) y * x ( b b b ) x \" ( a ) y ( b [ ( b b b b ) ] ) \" y \" ( a ) y \" ( a ) ( a ) y ( a ) \" y *", "( a )", "* ( a ) x \" * x y \" y \" y x * ] ) y * * * ( b b ) y ( [ * x x * ] [ * y \" ( a ) x \" y ( a ) x \" ( b b b b ) y * x x * \" ( a ) * x x * y * x x * \" * ( a ) x \" y \" y \" y \" ( a ) x * y \" * x ( a ) x \" *", "* * * y \" * x * y \" y \" y \" y ( a ) * x * ( a ) y * x x * \" y \" y \" * x ( a ) y ( a ) \" * x y \" y * \" y \" * x x * ( a ) y * ( [ ( [ * x x * ] [ ( [ * x y \" ( a ) y * x x * \" ( [ * x x * ] b [", "( a )", "( [ * ( a ) y ( b [ ( a ) ] b ) \" y \" y *", "* x x *", "* x ( a ) y \" ( a ) y * ( a ) y ( a ) \" y \" * ( a ) * * ( [ ( a ) ] b ) * x x * y ( [ ( b b b ) ] b ) \" ( a ) x \" y ( b [ * y \" y \" * x x * ( a ) y * x ( a ) ( a ) y ( a ) \" * x y \" y \" ( a ) x \" * y \" ( a ) (", "( a )", "* * y \" y \" * ( a ) y ( a ) \" * ( [ ( a ) ] [ * * * x x * y * x * ( a ) y ( a ) ( a ) \" ( a ) * y \" y \" * y \" y * x x * y ( [ ( [ ( a ) ] b b ) ] [ * ( a ) y ( a ) \" * x * ( a ) y \" * y \" y \" * y \" ( a ) x", "( b [ * ( a ) y * ( b b b ) y * y \" y \" y x * y ( [ * x ( b [ ( [ ( a ) ] b ) ] ) y * ( a ) y ( a ) \" ( a ) y ( [ * * x ( b b b ) x \" y \" ( a ) y ( a ) ( a ) \" y * x ( [ * x x * ] [ * x x * ] b ) y ( [ * x y \" ( [ * *", "* * * ( b b b ) y ( a ) \" y \" ( a ) y * ( [ ( a ) ] b [ ( b b ) ] b b ) ] b ) x \" * ( a ) y \" * x y \" ( b b b ) y \" ( a ) x * y ( b [ * * x x * x \" ( a ) y ( a ) \" * y \" * ( a ) x \" * x y \" ( [ (", "( a )", "( [ * x ( a ) y * x x * \" * * x * ( a ) y * x x * \" y \" * * * x x * ( b [ * * x x * y * x x * x \" y \" y \" ( a ) x * x * y ( [ ( b b b ) ] [ ( a ) ] b ) ] [ ( b b ) ] [ ( a ) ] b b ) y * ( a ) y", "( [ ( a ) ] b )", "( a )", "* * ( [ * ( a ) y ( a ) \" ( b b ) y * y \" * * y \" y \" * y \" * x ( b [ ( [ ( b b b ) ] b ) y ( a ) \" y \" * ( a ) * x x * y * ( [ ( b [ * x * ] b ) y ( [ ( a ) ] [ * x ( a ) y * y \" ( [ ( b b [", "* ( b b [ ( b b b ) ] b ) * x x * y * ( a ) y ( a ) \" y x * y * * ( a ) x \" y \" y y \" ( a ) y ( a ) ( b [ ( a ) ] [ * ( b [ * x x * y ( a ) \" y \" y x * ] ) y ( [ * y \" ( [ ( a ) ] [", "* * x y \" * * x x * y ( a ) \" * y \" ( a ) y * * x x * \" ( a ) y * ( a ) y * ( [ * ( b b [ ( a ) ] ) y * x ( a ) y ( [ ( a ) ] b [ * x x * ] ) \" y * * ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] ) y ( a ) \" ( [ * x", "* * y \" ( [ ( a ) ] [ ( [ ( b b [ * ( a ) y ( b b b ) \" ( a ) x \" ( a ) y * * x y \" * * x * x x * ( a ) y * x ( b b b ) y \" ( a ) y * y \" ( [ ( a ) ] [ * * x x * y * x x * \" ( a ) y ( [ ( b [ ( a )", "( a )", "* x x *", "* x y \" ( a ) y * ( b b [ * ( b b [ ( a ) ] ) y * ( b [ ( a ) ] b ) y * y \" y \" y x *", "( b [ ( a ) ] )", "* ( [ ( b b b ) ] ) y * x ( [ * x y \" ( a ) y ( b [ * x * x * y ( a ) \" * x * y \" ( a ) * y \" y \" * x ( a ) y * * x y \" ( a ) * x * x y \" * x x * y * y \" * x * x x * y \" * x y \" y \" ( a ) y * * x ( a ) y ( a ) \" * x x *"], "accuracy": 0.36, "train_overlap": 0.36, "res": [{"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -87.45683371345513}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -90.05718842800707}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -85.44009285862558}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -97.3520870578941}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -83.05061216469039}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* x y \" y \" y *", "log_prob": -6.766442060063127}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -98.41282270129886}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -95.16569157424965}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -90.98259222588968}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -99.69758717273362}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -93.89331259287428}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -91.39021276851417}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -15.804133943762281}, {"text": "( [ * x x * ] b b )", "log_prob": -8.911462609932641}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -85.07844254773227}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -85.52767633530311}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -91.8028354375856}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -95.22286497676396}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -80.23511485682684}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -89.44044091031537}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -87.55975832301192}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -90.94770332830376}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -89.10344714458915}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -86.93934714462375}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -82.50628521651379}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -100.86902472318616}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -82.42661815608153}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -15.898485204932513}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -84.02449748053914}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -8.424886570937815}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -82.50555749618798}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -90.11725069250679}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -90.80431596629205}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.134414125655894}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -85.50302169885254}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -19.050614254374523}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "* x x *", "log_prob": -3.270896943169646}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -90.34991935032303}, {"text": "( b b b )", "log_prob": -4.467538163764402}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -90.57368179960758}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -84.77852970687672}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -81.03800082093221}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -11.03684342946508}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -66.52125155169051}, {"text": "( [ ( a ) ] b b )", "log_prob": -6.933228043228155}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" y \" y x *", "log_prob": -7.124338139023166}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -85.64246123234625}, {"text": "* x y \" y \" y *", "log_prob": -6.766442060063127}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -96.64899914179114}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -93.23093015138875}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -78.02337261487264}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -87.07656946161296}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -92.68018218060024}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -91.03374014652218}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -80.20716797770001}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -93.07956289013964}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -92.47532422823133}, {"text": "( a )", "log_prob": -1.7805075549986213}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -88.39699099803693}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -82.12931526088505}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -79.76168153944309}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -84.5703879192879}]}, "epoch_80.pt": {"generated_sequences": ["* x x *", "* * x x * y * x ( a ) y * x x * \" ( a ) y ( a ) \" * * ( a ) x \" * x x * y ( [ ( a ) ] b b ) \" y \" * x x * y ( a ) \" y \" y x * y * * x x * ( [ * * y \" ( a ) y * * x ( b b [ ( a ) ] ) y ( a ) \" ( [ ( a ) ] [", "* x ( [ * ( a ) y \" y \" y * ] [ ( b b b ) ] [ * x ( a ) y ( a ) \" y \" ( a ) y ( b b [ ( a ) ] ) \" * x * * y \" y \" * x ( a ) x ( a ) y ( a ) \" y \" ( [ * x ( a ) y * x y \" ( [ ( a ) ] b [ * x x", "* * x * y \" ( b [ * * ( a ) y * * * y \" ( a ) y * ( a ) ( a ) y \" ( [ ( b [ ( a ) ] b [ * x x * ] ) ] b ) y ( a ) * x x * \" y * ( b [ ( a ) ] ) ] ) y ( a ) \" y \" ( b [ * ( [ ( [ ( a ) ] [ *", "\" * x * x x * ( a ) y \" ( [ ( a ) ] [ ( a ) ] b b ) y ( b [ ( a ) ] b ) \" ( b [ ( [ * * ( [ ( a ) ] b [ ( a ) ] ) ( b [ ( a ) ] ) y \" ( [ ( b [ ( b b b ) ] ) ] b [ ( [ ( b [ ( a ) ] ) ] b ) ]", "* x y \" y ( [ * * y \" * x ( a ) ( a ) y ( a ) \" * * x y \" y \" ( b [ * y \" ( a ) y ( [ ( b [ * x y \" ( b [ * ( [ * x * ( b b b ) y ( b [ ( [ ( a ) ] [ * ( b [ ( a ) ] b ) * y \" * y \" ( a ) y ( [ ( [", "* x y \" * x x *", "( a )", "( a )", "* x * * ( a ) y * y \" y \" ( a ) y ( [ * x ( a ) y ( b b b ) \" ( [ * y \" ( [ * x ( a ) y * y \" * ( b [ * x y \" y \" ( a ) y ( a ) \" y * ( a ) ( [ ( a ) ] [ * y \" ( a ) y ( a ) \" y * y \" y \" ( [ ( b [ ( a )", "* x y \" ( a ) x \" y *", "( b [ ( a ) ] b [ ( a ) ] ) y * x * * ( a ) x \" * * * x * * x y \" * x \" y x * \" ( a ) y * ( [ * * * * ( a ) x \" ( a ) y * * y \" * ( a ) * y \" ( a ) y ( [ ( a ) ] b b ) \" ( [ * * x ( b [ * y \" y \" ( a ) y \"", "* ( a ) y ( [ * * x x * y * ( a ) y ( b [ * * ( b [ * * x x * y * ( a ) y ( [ * * y \" * x * x * ( a ) y * x x * \" * x x * y * x y \" * ( a ) y ( b [ ( a ) ] ) \" ( a ) x \" * x y \" y \" ( a ) y ( [ ( a ) ] [ *", "* x y \" * ( b [ ( a ) ] ) y \" ( [ ( b [ ( a ) ] [ * x ( b b ) x \" * * * y \" * * x x * * x x * y ( a ) \" * * x * x * * y \" ( a ) * * x * x * x ( b [ * x x * ] ) x \" y \" ( b [ * * x x * y ( [ * y \" y \" ( [ (", "* * ( a ) y * ( a ) y ( a ) \" y \" y \" * x ( b b [ * x ( a ) y * y \" ( a ) y ( [ * x x * ] b [ ( a ) ] ) ] ) \" ( [ * x x * ] [ ( a ) ] ) ( b b b ) * y \" ( b b [ ( b [ * ( a ) y ( a ) \" * x * x y \" ( a ) y ( b [", "( a )", "( b b b )", "* y \" y \" y * y * x * x x * y ( a ) \" ( a ) y ( a ) \" y \" * * * y \" * y \" * x ( b b [ * * x x * y * y \" ( b [ * * x x * y * x * x ( a ) y * x * * x ( [ ( b b [ ( a ) ] b ) \" ( a ) y ( [ ( a ) ] b b ) ]", "( a )", "( a )", "* ( b [ * y \" ( a ) y * y \" ( [ ( a ) ] b b ) y ( b b b ) \" ( [ ( b b b ) ] [ * x x * ] ) x \" * * x x * ( a ) x \" ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" ( a ) y ( [ * x x * ] b b ) y ( b [ ( a ) ] [ ( b [ *", "( a )", "( a )", "* * x x * y ( a ) \" y y \" * x x * x \" ( a ) y * y \" y \" * x ( a ) x *", "* y \" y \" * ( a ) y ( a ) \" * * ( [ * * * * * x x * y * x ( a ) x \" y \" y x * * x * ( a ) y ( [ * * x x * x \" ( a ) y * x ( a ) * y \" * y \" y \" ( a ) y * x x * * \" * ( b b b ) * ( a ) y * * x * * y \" *", "( a )", "* y \" ( a ) y ( a ) \" * ( b b [ * * ( a ) * * * ( a ) * ( a ) y ( [ * ( a ) y ( a ) \" ( b b b ) ( a ) y ( b [ ( a ) ] [ ( a ) ] ) \" ( a ) x y \" ( [ ( a ) ] b [ * ( a ) y ( b b b ) \" * y \" * (", "( a )", "( a )", "( b b [ * y \" ( a ) y ( a ) \" y y \" y x *", "* x x *", "* x x *", "( a )", "* x x *", "( a )", "( a )", "* x y \" * x x * ( a ) y ( [ * ( b b [ * x x * ] b ) y * x * x x * y ( a ) \" * * ( [ ( [ * * * y \" * * y \" y \" ( [ ( a ) ] [ * * ( a ) * x x * y ( a ) \" ( a ) y * ( a ) y * * x x * y * y", "( a )", "* ( a ) x \" * * x x * ( a ) y ( b b b ) \" ( [ ( b [ ( a ) ] b ) ] b b ) x \" * * x * * x * y \" * y \" * x x * y * x x * \" ( a ) y ( a ) x * \" * * ( [ ( a ) ] b [ * x x * ] ) y * x * x x * \" ( b [ ( a ) ] [ ( b [", "", "* x * y \" ( a ) ( a ) y * * x * y \" * x * x x * y * x * * y \" * ( b [ ( a ) ] b ) x \" ( a ) * x * * ( a ) y * y \" * x x * y * x * ( a ) y ( a ) \" ( b [ * y \" ( a ) * ( [ * x ( [ ( a ) ] [ * y \" * * y \" y", "* * y \" ( a ) * y \" y * x x * \" ( a ) y ( [ ( a ) ] [ * x x * ] [ * x ( a ) ( [ ( a ) ] [ ( [ * x x * ] [ ( a ) ] ) ] b ) \" ( b b b ) y * * x ( [ ( a ) ] [ ( a ) ] ) y ( [ * x ( b b [ ( a ) ] [ ( b [ (", "* x ( [ ( a ) ] [ * x ( [ * x y \" * * ( a ) y * y \" ( [ * x x * ] b b ) y ( a ) \" ( a ) y ( b [ * x y \" * y \" y \" ( [ ( [ ( a ) ] [ ( [ * x y \" * x x * y * * x x * \" * * x x * y * x * * y \" ( [ ( a ) ] b b )", "( b [ * x x * ] b ) * y \" * * x * x y \" y \" * ( a ) * ( b [ ( a ) ] [ * * x ( a ) y * x ( a ) y * ( a ) y * ( a ) x \" y \" * x x * x \" y x * y ( a ) \" * x x * y ( b b [ ( a ) ] ) \" ( a ) y ( b [ ( b [ (", "* ( a ) ( a ) y ( [ ( a ) ] b b b ) \" * * x x * y \" ( b [ * x x * ] b ) * y \" y \" ( a ) y * * y \" ( a ) y ( a ) \" y \" ( b b [ * ( a ) x \" * y \" ( b b [ ( a ) ] ) y * x y \" * * y \" * y \" ( a ) y ( [ ( b [ ( a )", "( a )", "( b b [ * y \" ( b [ ( [ ( a ) ] b [ * x * y \" * ( a ) ( a ) x \" * * x * y \" ( a ) * * x x * x \" ( b [ ( [ * y \" ( a ) y * y \" ( [ ( a ) ] [ * y \" * * ( [ ( a ) ] b [ ( a ) ] ) y ( [ * y \" ( a ) y \" ( a )", "* x x *", "* * y \" y \" * ( a ) y * x x * \" y x *", "* ( b b b ) y * x * ( a ) y ( a ) \" y \" * y \" * x x * y ( a ) \" ( a ) y ( a ) \" * * * y \" * ( b [ * y \" y \" * x x * ( [ ( a ) ] b ) y ( [ * ( [ ( [ ( a ) ] b b ) ] b b [ ( a ) ] ) \" ( a ) y ( a ) \" y \""], "accuracy": 0.44, "train_overlap": 0.42, "res": [{"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -83.73816412710585}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -91.89574932900723}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -88.51337337100995}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -96.03041936893715}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -84.23624880396528}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* x y \" y \" y *", "log_prob": -7.6221896694623865}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -99.03534838928317}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -96.76407014351571}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -93.51241840556031}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -93.03393045379198}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -94.00474228471285}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -94.15932650386821}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -14.75923639285611}, {"text": "( [ * x x * ] b b )", "log_prob": -9.596140750451013}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -82.33274599601282}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -79.95697706245119}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -91.11603483499493}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -95.61444373636914}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -82.36432667219196}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -86.79469346924452}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -89.5792397154728}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -86.83721006511769}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -87.95680083963089}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -84.89693608249945}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -81.05761959720985}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -103.67986637388822}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -84.45404045953183}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -17.505079977418063}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -81.89817339013098}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -9.882511880539823}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -82.6700292780879}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -89.68887781948433}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -91.02513363887556}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -17.809378112171544}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -86.58395362991723}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -19.369101450254675}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "* x x *", "log_prob": -3.890050558373332}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -89.1674398224568}, {"text": "( b b b )", "log_prob": -5.229233526624739}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -88.93623902421677}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -85.44962885911809}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -83.83008292331942}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -12.527855051273946}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -68.04693801238318}, {"text": "( [ ( a ) ] b b )", "log_prob": -7.480771477683447}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" y \" y x *", "log_prob": -7.474997295939829}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -85.7829576813383}, {"text": "* x y \" y \" y *", "log_prob": -7.6221896694623865}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -94.93668749797507}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -92.09490528175957}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -77.33672653883696}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -83.56567078706576}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -93.26380083311233}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -92.16370734275552}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -79.2515171370178}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -90.2294241466152}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -90.87932321440894}, {"text": "( a )", "log_prob": -2.393766544642858}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -92.62810375439585}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -83.19971361220814}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -78.35259704227792}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -84.13488010200672}]}, "epoch_85.pt": {"generated_sequences": ["* ( a ) y ( a ) \" y y \" ( a ) x x * y ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y * ( b [ ( b [ ( a ) ] b ) ] [ ( a ) ] ) x \" ( [ * * x x * x \" ( a ) x \" * x x * x * x x * y * x * ( [ * x ( a ) y ( b [ * y \" *", "* x x *", "* x x *", "* y \" * * * ( a ) y * ( b b [ ( a ) ] [ ( b [ ( a ) ] [ ( a ) ] ) ] ) * x y \" y \" ( b [ ( a ) ] [ * x * x * x y \" * x * x x * y * * x y \" ( a ) y * x y \" y * x * x y \" ( b b [ ( [ ( a ) ] b ) x \" y \" * x x", "* y \" * x y \" ( [ ( a ) ] b [ ( a ) ] ) y ( a ) \" y \" * x x * x \" y \" ( [ ( [ * x x * ] b b ) ] b [ * x x * ] ) y", "( a )", "( b [ ( b b b ) ] [ ( [ * x y \" y \" * * x x * y * x x * \" * x x * y ( b [ * ( b [ ( a ) ] b ) * * y \" * y \" ( a ) y * y \" y \" * ( [ ( [ ( b b b ) ] [ * y \" y \" ( [ * x ( a ) y \" ( a ) y ( a ) \" ( a ) y", "* y \" ( a ) y * y \" ( a ) x \" * x x * ( a ) y ( [ * x ( b b [ ( a ) ] ) \" ( a ) x \" * * x ( a ) y * * * ( [ * x x * ] [ ( [ ( a ) ] [ * ( [ ( a ) ] [ * * * x * ( a ) x \" * y \" * x y \" * x ( [ ( b [ * x (", "* ( [ ( a ) ] [ * x y \" ( b b b ) ( a ) y ( [ * * x x * y \" y \" * * x y \" * ( a ) x \" y \" ( a ) y * y \" * x * ( [ ( b b [ ( b [ * * y \" * * ( a ) y ( b [ * x * x x * y ( a ) \" * x y \" * x * ( b b ) y ( a ) \" ( a ) x \" ( b", "* y \" y \" * * * x * ( b b b ) y ( a ) \" y \" * * y \" * x x * * x ( [ * * x x * y ( a ) \" y x * y \" * ( a ) y ( a ) \" * x x * y * x * x * y \" * * x y \" y \" * ( a ) y ( a ) \" * x y \" * y \" ( a ) ( [ * y \" ( a ) y * x", "( [ * ( b [ * x x * ] b ) x \" ( a ) x * ( a ) x \" ( a ) y ( b [ ( b [ * x * x y \" ( [ * x x * ] b [ ( a ) ] b ) y * y \" * y \" y \" * ( b b b ) y * * ( a ) ( b b [ ( a ) ] ) y \" ( a ) y ( a ) \" * ( a ) y \" * x y \" ( [", "\" * * x x * y \" * y \" * x x * y \" ( a ) x \" y * ( [ ( b [ ( b [ ( a ) ] b b ) ] [ ( [ ( [ ( a ) ] b b b [ ( a ) ] ) ] b ) x \" y \" ( [ * y \" ( b [ * x y \" y * x x * * x \" * * * x y \" y \" y * y * x * y \"", "* ( a ) y * * x ( a ) y ( a ) \" y \" ( [ ( a ) ] b [ * x ( a ) y ( a ) \" ( b b b ) y * x * ( a ) y ( a ) \" y \" ( a ) x \" ( a ) ( a ) * x x * y * y \" y \" * y \" y x * y * * x x * y \" y \" * x x * ( a ) y", "* y \" ( a ) ( b b [ ( [ * x x * ] [ ( [ * x y \" ( a ) y ( a ) \" * x * y \" y \" y x * y * x ( a ) y ( a ) \" ( a ) ( a ) x \" y \" ( b b b [ ( a ) ] ) x * x * x * ] [ * x * x ( b [ * y \" y \" * ( a ) * y \" ( a ) y ( a ) \" ( a ) * *", "( [ * x y \" ( a ) ( b b b ) * x ( b [ ( b b [ * x x * ] b ) y * x ( a ) y ( a ) \" ( b [ * x * * x * y \" * x * * * * x \" * * y \" ( b [ ( b b b ) ] [ * y \" * * x x * y ( a ) \" y x *", "* x x *", "* x x *", "* x * * x * x y \" * x x * * y \" * * x y \" ( a ) ( a ) * y \" * y \" * * x x * y * * x x * x \" y * x x * y ( [ * x x * ] b ) \" * ( a ) y * x y \" y \" * x x * x * x \" y \" * ( [ * * * * ( a ) y \" ( a ) x \" y \" ( [ * * y \" ( a )", "* x y \" ( [ ( [ * * * x y \" y \" y * x * y * y \" ( [ * x * x y \" * * y \" * y \" y y \" ( a ) x a ) y * ( a ) y ( b b [ * * ( [ * x y \" * ( [ ( a ) ] [ * x x * ] b ) y * y \" * * * x x * y ( a ) \" y \" ( b [ (", "( b [ (", "( a )", "* x x *", "( a )", "* y \" y \" ( a ) y ( b b [ ( [ * x x * ] [ * * x ( a ) * ( a ) * x * x x * y * * y \" * x y \" * * ( a ) ( b b [ * ( a ) * y \" * y \" * ( a ) ( a ) x \" * x ( [ * x y \" * ( a ) y * y \" ( a ) * * ( a ) x \" y \" * y \" ( a ) y \"", "* y \" y \" * x ( a ) * x ( b b b ) x \" y \" * y \" * x ( [ * * x x * y * x y \" * y \" * ( a ) y * x y \" ( a ) * * x ( b [ * x y \" y \" y * y * x * y \" y \" * y \" * x x * y ( a ) \" y \" y * * * x y \" y \" y * y \"", "* y \" y \" y y * y \" y * y \" y x * x \" * y \" y \" * * x ( b b [ * ( [ ( a ) ] [ * * ( b b [ ( a ) ] [ * y \" * x x * x \" y * y ( a ) \" ( a ) y ( [ * * y \" * y \" * x x * y ( [ ( [ ( b b b ) ] [ ( [ * x x * ] [ * * y \" * y \"", "( b b b )", "( a )", "* x * x ( a ) y \" ( a ) y * x y \" y \" * * y \" ( a ) * x x * y ( a ) \" ( b b b [ ( a ) ] ) y ( a ) \" ( b [ ( a ) ] b b ) y ( a ) \" * * ( a ) y ( a ) \" * * ( a ) y * x ( a ) * x ( a ) y * * x ( b [ ( a ) ] [ * x x", "* x * ( [ ( b [ ( a ) ] b ) ] b [ * x * y \" * * x x * y * ( a ) y \" * ( [ * x * y \" ( a ) y * y \" ( a ) y * y \" ( a ) x \" y * * ( [ * ( a ) y \" * y \" ( a ) y \" y * ] b [ * x * * y \" * ( [ * y \" * ( a ) x \" y \" * y \" y \" *", "( a )", "* x y \" y \" y *", "( a )", "( a )", "( a )", "( a )", "( a )", "( a )", "* y \" * * x y \" ( b [ ( a ) ] [ * y \" ( a ) ( a ) y ( [ * x x * ] [ * x * ( a ) y ( a ) \" * ( a ) y ( a ) \" * x y \" ( a ) y ( b [ * * * ( a ) x \" * y \" * x x * y ( a ) \" * * * x * * x * y ( [ * y \" ( a )", "* * * x * x x * x \" ( b [ (", "* ( a ) y ( b [ ( a ) ] b ) \" * * x ( [ * x x * ] b [ * * ( a ) y ( [ * ( b b [ * x x * ] b ) x \" * * x * x ( a ) y ( a ) \" y \" * x ( a ) x \" ( b b b ) y * x x * \" ( [ ( a ) ] b [ * * x ( a ) y ( a ) \" y \" y", "* * x * y \" * * x ( b b [ * ( a ) y * x y \" y \" y \" * ( a ) y * x ( b b b ) x \" ( a ) x x * x \" * x * y \" ( a ) * y \" * x x * y * x x * x \" ( a ) y \" * * y \" ( b [ * ( b b ) y * x x * \" * * x x \" * * ( a ) y ( a ) \" y", "* x x * y ( [ * * x x * x \" * ( a ) y ( a ) \" ( a ) y ( a ) \" * x y \" y \" * ( a ) y * x * x y \" ( a ) x \" * x ( b [ * * x ( a ) y ( a ) \" * x ( a ) y * ( b b b ) y ( a ) \" y \" ( a ) y \" ( a ) y ( b [ ( [ (", "( a )", "( b [ ( [ * x ( a ) ( a ) ( [ ( b b [ * ( a ) y * x * y \" * y \" * x * ( b b [ ( b b [ * y \" * y \" * x \" ( [ * x x * ] b [ * * x * x y \" ( [ * * x y \" y \" ( a ) y * * x y \" y \" * * * x y \" ( b [ ( a ) ] b )", "* * x ( a ) ( a ) y * ( a ) y ( a ) \" y \" ( b b [ ( [ ( [ * x y \" * ( [ ( b [ ( a ) ] [ ( a ) ] ) ] b [ * x * x ( a ) y * x y \" ( a ) * ( a ) y * ( b b b ) y ( a ) \" ( a ) y * x y \" * * ( a ) y ( a ) \" * ( [ * ( b b [", "( a )", "* y \" * x * x x * y \" ( a ) * ( a ) y * ( b b [ * x y \" * x x * x \" * * ( [ * ( a ) y ( a ) \" * x * y \" ( [ * y \" * y \" y x * ( a ) x \" y x * ] [ * x ( a ) y \" * ( a ) y * * x y \" ( a ) ( a ) y * y \" * x y \" ( a ) y *", "( a )", "( a )"], "accuracy": 0.44, "train_overlap": 0.44, "res": [{"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -85.4633304693416}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -92.0404755093914}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -89.45240377650771}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -92.33990524888213}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -81.23793492936238}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* x y \" y \" y *", "log_prob": -6.8518617963418365}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -96.83956764111645}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -97.27140206005424}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -89.9522156046587}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -92.72236197936581}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -89.74516130702978}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -93.43565219354059}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -13.623776274384}, {"text": "( [ * x x * ] b b )", "log_prob": -7.596786786802113}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -83.28945335830213}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -79.87592206749832}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -90.3136011537863}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -91.29565415007528}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -82.59656388756412}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -84.48748900453211}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -85.60199941348401}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -89.19539553353388}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -86.55623122834368}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -84.29988419073925}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -81.05542977452569}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -105.42612487229053}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -87.32707986145397}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -17.790309202333447}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -82.73694737130427}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -8.316439467365853}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -82.28765482860035}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -86.07928049370821}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -87.0336343136587}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -19.016939405410085}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -87.6204217945633}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -17.69863415576401}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "* x x *", "log_prob": -3.1731920714955777}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -88.00600893446244}, {"text": "( b b b )", "log_prob": -4.309565838892013}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -85.99816908105277}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -86.63497604274016}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -82.26508409199596}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -10.444512890273472}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -65.5512350290519}, {"text": "( [ ( a ) ] b b )", "log_prob": -6.830980989179807}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" y \" y x *", "log_prob": -6.795930161140859}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -85.61077513571945}, {"text": "* x y \" y \" y *", "log_prob": -6.8518617963418365}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -92.39535094817984}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -89.90352074775728}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -77.77236952612293}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -83.92828620162618}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -89.64993695329758}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -89.84633651492186}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -81.26561999997648}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -87.15536499627342}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -90.36879600815882}, {"text": "( a )", "log_prob": -1.9812658565933816}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -86.75953953940189}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -82.36843528485042}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -77.23737539911235}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -83.91631275202963}]}, "epoch_90.pt": {"generated_sequences": ["( [ ( a ) ] [ ( a ) ] [ * * x x * y * * ( a ) * y \" ( a ) y * * * x ( b [ ( a ) ] b ) y * * * y \" * * ( a ) y ( a ) \" y \" y \" ( a ) * ( a ) x \" * ( a ) y * x ( [ * x ( [ * ( b b b ) * ( a ) x \" y * ( a ) y ( a", "( a )", "* * y \" y \" ( a ) y ( [ * ( a ) y \" * x y \" y \" y * ( [ * x x * ] [ ( a ) ] [ * * x y \" * * x * y \" * y \" * x ( [ * x x * ] [ ( [ * y \" ( b b b ) * ( a ) y * x * y \" ( a ) y ( a ) y \" ( b b b ) y ( a ) \"", "* x y \" * * x * x x * x \" y \" ( a ) y * ( a ) ( a ) y ( [ * x y \" * x x * * ( a ) y ( a ) \" * y \" * y \" ( a ) ( a ) x \" * x y \" * * x * ( a ) y * ( b b b ) y * x ( a ) y * x x * \" ( [ * * x x * y ( [ ( b [ ( a )", "* y \" y \" y ( a ) y * ( b [ ( a ) ] b ) ( a ) y ( a ) \" ( a ) y * * ( b b b ) y * * x x * \" y \" ( [ * x x * ] b ) y * x ( a ) * * ( a ) * ( b [ * x * y \" ( b [ * y \" * ( a ) ( b b [ * ( b [ * y \" y \" y x * ]", "( [ ( a ) ] b )", "( a )", "( b [ ( a ) ] [ * x y \" * x x * y ( a ) \" y \" * x ( [ * ( [ ( a ) ] b b ) y * y \" ( a ) y ( a ) \" * ( a ) x \" * * * ( a ) x \" * * x x * y * x x * \" * ( b b b ) ( a ) x \" * ( b [ ( [ ( a ) ] b ) ] ) x * ] [ ( a )", "( a )", "( [ * x y \" y \" y * y \" ( [ ( a ) ] [ * x * x * y * ( a ) y ( [ ( a ) ] [ ( b b [ * x ( b b [ * x x * ] ) ] b ) ] [ * x x * ] ) \" * y \" * x x * y * x x * \" ( [ ( a ) ] [ ( a ) ] [ ( a ) ] ) y * ( a ) * * * y \" y \" * x y \" y *", "* x x *", "* * ( b [ ( a ) ] b ) x \" * x ( a ) ( a ) * x ( b [ ( a ) ] [ ( b [ * ( a ) y * ( b [ * * x ( a ) y * ( a ) y \" y \" y * x y \" * * * y \" ( a ) * * * x x * y * x * y \" * y \" ( a ) x \" * x x * x \" * ( a ) y ( [ ( a )", "* y \" y \" y x *", "* ( a ) y ( a ) \" y \" y * y * ( b [ * y \" ( a ) y \" * x ( a ) y \" ( a ) y * x * * * x x * y * x y \" * x x * \" ( a ) y * y \" y \" y \" ( a ) y ( a ) y ( [ ( b [ ( a ) ] [ ( a ) ] ) \" ( b [ * y \" ( [ * x y \" * x", "( a )", "( a )", "* x y \" * x ( a ) y ( b b [ * x * * x y \" y \" * x x * y * * ( a ) y ( a ) \" y \" ( [ ( a ) ] [ * y \" y \" * ( b b b ) ( a ) y * \" y \" y \" ( a ) x y * * ( a ) y ( [ ( a ) ] b ) \" * x x * y ( a ) \" y \" * x y \" ( a ) x \" * *", "* x x *", "( [ * ( a ) x", "( b b b )", "* ( a ) x \" y \" * x x * y * x ( a ) y * x x * \" * x * x x * y ( a ) \" * x ( a ) y * * x x * \" * * * x ( b b ) y ( a ) \" y \" * ( b [ * * ( a ) x \" y \" y x * y ( [ * x x * ] b ) ] b ) \" * x * * x ( b [ * y \" y \" * * x x * x", "* y \" y \" * x ( [ ( b [ * x y \" ( a ) ( a ) y \" ( b [ ( a ) ] ) * ( a ) y * * y \" * x * ( [ ( [ * ( b [ * x x * ] [ * x y \" y \" y * * x y \" ( [ * x ( [ * * x * * x * x * y \" y \" ( a ) y * y \" ( [ * x y \" ( [ ( b [ *", "* ( b b b ) y * * ( a ) y * * x x * ( a ) y ( a ) \" y \" y * y * ( a ) y * ( a ) * ( a ) ( [ * * ( b [ * * x x * y ( [ * x ( [ ( [ ( [ ( a ) ] b b ) ] [ * * x y \" ( b b b ) y * x * y \" y \" y * x ( a ) y ( [", "( a )", "* x x *", "( b [ ( a ) ] b )", "* * x x * x \" * x * y \" ( a ) y * y \" ( a ) x", "( b b )", "( a )", "( a )", "( a )", "* ( b b [ * y \" y \" ( a ) * y \" ( a ) y ( b [ ( a ) ] b ) \" y * x x * ( [ * * y \" * * y \" y \" * x * x ( a ) y ( a ) \" y \" y * y \" ( a ) * x * y ( [ ( a ) ] b b ) \" y \" * x y \" * * x ( a ) y ( [ * y \" y \" ( [ ( [ ( [ (", "* x ( a ) x \" y \" y ( a ) y * y \" y \" ( a ) x x * y * * x x * y ( a ) \" * * x x * y * x ( b [ * x * x * * x y \" y \" * x x * y ( a ) \" ( a ) y * x x * y ( b b ) \" * ( a ) * y \" * ( a ) y ( [ * * * * x ( b [ ( a ) ( a )", "* * x x * y * ( a ) y * ( a ) y ( [ * * y \" * x y \" y \" y * y * ( a ) y * x x * \" * * x ( a ) * ( a ) y * x ( a ) x * \" y \" y \" * x * y ( a ) \" ( [ ( a ) ] b [ * * * x ( b [ * x ( [ * * ( [ * ( a ) y ( a ) \" * * y \" y \"", "* ( a ) y ( [ ( a ) ] [ ( b b [ ( a ) ] ) ] ) \" y y \" ( a ) * x ( a ) ( [ * x x * ] b [ * x x * ] ) * y * y \" y \" ( b [ ( b b [ * * * x x * x \" y \" ( a ) y \" y * ( [ * * * y \" * x x * x \" ( a ) y ( a ) \" ( a ) x \" * y \"", "* ( a ) y * * x y \" y \" y * * x x * x \" y \" ( b b b ) * x x * y * * x * x x * y ( a ) \" * y \" * * * x * ( a ) x \" * x x * y * ( b b [ ( [ ( b [ * ( [ * y \" * x x * y ( b [ * x ( b [ * x y \" * y \" ( a ) y", "( a )", "( a )", "* * * x * * x x * y * x * y \" y \" * x x * y ( b b ) \" ( b b b ) y ( a ) \" * x * ( a ) y ( a ) \" y \" y \" * y \" ( a ) * x y \" y \" ( a ) ( a ) y * * * x y \" * * ( [ ( a ) ] b ) * x x * y * ( a ) y * x ( b [ * y \" * ( [ *", "( [ * x ( a ) y * y \" y \" y * \" y * ( a ) x \" y \" * ( [ * x ( a ) y * y \" * * * y \" ( [ ( a ) ] b ) x \" y ( b [ * x x * ] b ) ( a ) y * x x * \" ( a ) y * * ( b [ * ( a ) y * x * x x * y * x * y \" y \" *", "( b [ * * x * y \" * x y \" * ( b b b ) y ( a ) \" * ( a ) y * * x ( a ) y * ( a ) ( b [ ( a ) ] ) y * x x * \" ( a ) x \" ( a ) y * ( a ) y ( a ) \" * * x x * y ( a ) \" y \" * x * y \" y \" ( a ) x * * ( [ * x y \" * * x", "* y \" * ( a ) * ( a ) x \" ( b [ * * ( a ) y ( a ) \" * * ( a ) y * x * * * x x * y ( a ) \" y * y ( a ) \" y \" ( a ) y * ( a ) y ( [ * y \" * x x * y * ( a ) y ( a ) \" * x y \" ( a ) ( a ) y * y \" y x * \" ( [ ( a ) ] [ ( a )", "( a )", "( a )", "* ( a ) * x x * * y * * x * ( a ) y * y \" y \" ( a ) ( [ * ( a ) * x y \" * x x * y ( a ) \" y * ] ) y ( a ) \" * x x * y * x x * \" ( a ) ( a ) ( b [ * * ( a ) y * ( b [ * * x * ( a ) y * y \" * x x * \" y \" ( a )", "( a )", "* ( a ) y * y \" y \" y \" ( [ ( [ * x ( [ * y \" * ( a ) * * * ( a ) ( b b ) y ( a ) \" y \" y \" ( a ) y * x y \" y \" y * x * * x x * * y ( a ) * x * \" y \" ( a ) ( [ ( a ) ] b ) * x * x * ( a ) y ( a ) \" * x y \" y \" ( a ) y", "* ( b [ * x ( a ) y ( a ) \" y \" y x * y * x x * \" ( a ) x * x * ] ) y ( a ) \" y * y * \" y \" ( a ) x x * x x * y * x * y \" ( a ) x \" ( [ * ( a ) y ( b b [ * x ( b b b ) y * * x ( a ) ( b [ * x ( b [ ( a ) ] ) y", "( a )", "* x * ( a ) ( b [ * ( a ) y \" y \" y ( a ) y ( a ) \" y * * x * y \" y \" ( a ) x y * * x x * y ( a ) \" y * * * \" * x ( a ) y ( a ) \" * x y \" * y \" y \" ( a ) y ( [ ( a ) ] [ * x * ] [ ( a ) ] [ ( b [ ( [ * y \" ( a ) y"], "accuracy": 0.42, "train_overlap": 0.42, "res": [{"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -88.43136847329151}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -91.57328236493049}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -89.65219431011064}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -95.0266405181028}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -84.07152006778051}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* x y \" y \" y *", "log_prob": -6.44731342967134}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -98.21436599406297}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -100.38866847677855}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -95.04971653665416}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -93.38498432651977}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -93.66310775943566}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -93.60480881969852}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -13.524924094468588}, {"text": "( [ * x x * ] b b )", "log_prob": -7.935309221735224}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -83.50870080391178}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.90501664881594}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -89.98895441187778}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -89.66280367091531}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -83.29558594805712}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -90.91249210029491}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -89.0610436576535}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -88.26004934594675}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -88.0844469240692}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -84.6042836937122}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -80.89719002020138}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -103.44779368657328}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -85.73017333925236}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -17.142734657070832}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -85.82985439135518}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -7.865354663823382}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -83.18853525315353}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -87.5164070053579}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -89.51193325847271}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -16.37683602925972}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -87.98513413360342}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -18.136195516912267}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "* x x *", "log_prob": -3.311735413968563}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -91.54686681217572}, {"text": "( b b b )", "log_prob": -4.759781168657355}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -91.69212988877553}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -85.51954657962779}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -87.6450046566606}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -11.466704870006652}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -65.38986610795837}, {"text": "( [ ( a ) ] b b )", "log_prob": -6.41312212041521}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" y \" y x *", "log_prob": -6.675702657958027}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -88.68993349232187}, {"text": "* x y \" y \" y *", "log_prob": -6.44731342967134}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -97.36717111883627}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -92.24637114675716}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -80.58175650745397}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -87.07665039361746}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -90.649491369928}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -90.68291115364991}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -79.41643416235456}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -89.09884291625349}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -94.02455391983676}, {"text": "( a )", "log_prob": -1.7654872264829464}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -88.08606111464906}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -87.18208147738187}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -78.36233704451297}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -84.59465273807291}]}, "epoch_95.pt": {"generated_sequences": ["( a )", "* * y \" y \" * x x * y * y \" ( [ ( b b b ) ] b ) y * x ( a ) y * ( [ * ( b [ ( a ) ] [ * y \" * x x * y * ( b b b ) y \" ( [ * ( a ) y ( a ) \" * ( [ * ( b [ * x x * ] b ) * x x * y * x x * \" * * * ( [ ( a ) ] b [", "* x x *", "* * y \" ( a ) y * ( a ) y ( a ) \" y \" * x x * y ( a ) \" * * * x x * y ( [ * * x ( a ) y ( a ) \" ( a ) y ( [ * ( a ) y * * y \" y \" y \" ( [ * * y \" ( a ) y * x ( a ) y * x y \" ( a ) x \" ( a ) y (", "", "* y \" y \" ( a ) y * x x * \" ( [ * * ( a ) ( [ * x x * ] b [ ( a ) ] ) y * ( b b [ * * ( [ * y \" * x ( a ) y * ( a ) y ( [ ( a ) ] [ * ( a ) y \" y \" * x x * y * x x * \" * y \" * x y \" y \" * * x * y", "( b b b )", "( b b [ ( [ * ( b [ ( a ) ] b [ * ( b b b ) y \" * x * * x ( a ) x \" y \" ( a ) y \" * ( [ ( [ * * * * x x * ( a ) x \" ( a ) y ( a ) \" * x * x x * y * * x y \" * y \" y \" y x * ( [ ( a ) ] [ * y \" y \" ( a ) y ( a )", "* x x *", "( a )", "( a )", "\" y \" ( [ ( a ) ] b [ * y \" ( [ * x x * ] [ * x * ( a ) ( a ) y * * x ( a ) y * \" y \" y x * ( a ) y * x ( [ * * x x * * x x * y ( a ) \" y \" * x * * x y \" * * x x * y * * * ( a ) ( a ) x \" *", "* x x *", "* y \" ( [ * ( a ) * ( b b b ) * y \" ( a ) y \" y \" * x y \" y \" y \" ( a ) * x x * y * y \" ( b b b ) y * x x * \" * * x y \" y \" ( a ) y \" * ( a ) y * x * y ( b b b ) \" ( a ) y * ( a ) y * * * * x y", "* x * * y \" * x ( a ) y ( [ ( a ) ] [ * x * * x x * y * ( [ ( [ * x x * ] [ * x * x x * x \" * x y \" * x y \" * * x y \" * x y \" * x ( b b b [ * * * * * x x * ( b [ * y ( b b [ ( b [ ( [ ( a ) ] [ ( a ) ] )", "( a )", "\" ( [ ( a ) ] b [ * ( [ ( a ) ] [ ( a ) ] ) ] [ * x x * ] [ ( b [ * x ( a ) y ( a ) \" y \" ( [ * ( a ) y ( b [ * ( a ) y ( a ) \" ( a ) y * y \" * x x * y ( a ) \" ( a ) y ( [ * y \" ( a ) y ( [ * x y \" ( a ) y ( b b", "\" ( b b [ * x x * ] ) ] [ * * y \" y \" y x * x y \" * y * * x y \" y \" y \" ( [ ( [ ( a ) ] b b ) y ( a ) \" ( a ) y ( b b b ) * \" ( b [ ( a ) ] b ) y * x x * \" ( a ) y * x * y \" * x x * y ( a ) \" y \" y ( [", "( [ * ( [ * ( a ) y * ( a ) y * y \" ( a ) y * ( b [ ( b b b ) ] b ) y * ( b b [ ( a ) ] [ * * x x * x * y \" y \" y \" * * * ( a ) * x x * y * ( a ) y * y \" ( b [ * ( b b b ) * x x * x \" ( a ) y ( b [ ( a ) ] b )", "* * ( a ) y ( a ) \" ( a ) y * x * x * ( b b b ) x \" ( a ) y ( [ * x ( a ) y ( [ ( a ) ] b [ * y \" * x y \" ( b b b ) y ( a ) \" * x x * y \" * x y \" y \" * x ( b [ ( a ) ] b ) x \" ( b b [ ( a ) ] ) y ( a ) \" ( a ) y ( a )", "* * * x * x ( [ ( b b b ) ] b b ) y ( b [ * ( b [ * y \" y \" y x * ] b [ * * x x * x \" ( [ * x x * ] [ * * y \" * * ( a ) y * x * x x * y * x ( b b [ * ( a ) y * ( [ * x x * ] [ ( b b [ * * y \" y \" *", "( a )", "( a )", "( b [ * y \" y \" ( a ) x \" * x ( a ) y * x x * \" ( a ) ( a ) x \" ( b b [ ( b [ ( [ ( [ ( a ) ] b [ ) ] [ ( a ) ] ) ] ) ] b ) y \" y \" ( b [ ( a ) ] [ * x * x ( b [ ( a ) ] ) y ( b [ * * x * ( a )", "* y \" ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * y \" * x ( a ) y * ( a ) y * x * y \" * y \" ( a ) * x * ( a ) x \" ( a ) y * x ( a ) y ( [ * ( a ) * ( a ) * x x * y ( b b b ) \" y \" * ( [ * ( a ) * ( a ) y ( a ) \" ( b", "* ( a ) ( a ) y ( [ * y \" * * y \" y \" * * y \" * ( [ ( a ) ] [ * x * y \" y \" y y * x * x * ( a ) y ( a ) \" * x ( a ) x \" y \" * x * x x * x * x \" ( a ) ( a", "* *", "* ( a ) y * * x ( [ * x x * ] [ * x ( b [ ( [ ( a ) ] b ) ] ) ] b ) y * x x * \" * y \" ( [ * * y \" y \" ( a ) y * * ( [ * ( b b b ) y * * x ( a ) y * x x * \" ( [ ( a ) ] [ ( [ ( a ) ] b b ) y * x y \" y \" * x ( a )", "( b b b )", "* ( b b b ) x \" ( a ) y * ( a ) y \" y \" ( [ ( a ) ] b [ * x ( a ) x \" * x * y * ( a ) y ( a ) \" ( a ) y * * y \" y \" ( [ * x * x x * y * x ) y * x * y * x ( [ ( b b [ * ( a ) y * y \" y \" * x y \" * x ( [ *", "", "* ( a ) y * * * x * x x * y ( [ * x x * ] [ ( b [ ( a ) ] [ ( b b b ) ] ) ] b b ) ] [ ( a ) ] ) x \" * x x *", "* y \" ( a ) y ( b [ ( a ) ] ) \" ( b [ ( a ) ] ) x \" y * ] b ) y * * x ( a ) ( a ) y ( a ) \" ( a ) y ( a ) \" y x * \" ( a ) * x x * y ( [ * x * x y \" ( b b [ ( [ ( [ * x * x x *", "( [ ( [ * x ( a ) y * * ( a ) y * x ( [ * x y \" ( b [ ( a ) ] [ * x y \" * x y \" y \" y * x \" ( a ) y * * x ( a ) x \" * x * x * x ( a ) y ( a ) \" y \" * x * x x * y \" * x x * y * * y \" y \" ( b [ * * x x * *", "* y \" * x x * y ( [ * x ( a ) y ( a ) \" * ( [ * x ( a ) x \" y \" y * ] [ * ( b [ ( [ (", "* * y \" * x x * y * ( a ) y * * x x * y * ( b [ ( b [ ( a ) ] [ * y \" y \" * x x * y ( a ) \" * x y \" ( a ) x \" y * * x x * x \" * y ( a ) \" ( a ) x \" * * x ( b b b ) y ( a ) \" ( a ) x \" y \" y * y ( a", "( a )", "* x y \" * ( a ) x \" * ( b [ * x y \" * * x * x x * y ( a ) \" y \" * x x * x \" ( a ) y * x x * \" * * x * * x x * x \" * ( b b [ * x * ( a ) y * ( a ) y \" ( a ) ( b b b ) y ( [ * ( [ ( b b [ * ( a ) y (", "", "( a )", "* y \" * x ( a ) y * x x * \" ( [ ( [ ( a ) ] [ ( a ) ] ) y ( [ * y \" y \" * * ( a ) y * * x ( a ) x \" y \" ( [ * x x * ] b b ) * ( a ) y ( a ) \" y \" * y \" * ( a ) x \" y \" * y \" y \" ( [ ( b [ * (", "( [ ( a ) ] [ ( a ) ] [ ( a ) ] [ * x x * ] ) x \" y * ] [ * * ( b b b ) x \" ( [ * x y \" * x x * y * * ( [ ( a ) ] b [ * * * x * y \" ( [ ( b [ ( a ) ] [ ( b [ * ( [ ( a ) ] b [ * ( a ) y * * ( b b [ * * (", "* ( b b b ) y * y \" y \" y x * \" ( [ * ( [ ( a ) ] b [ * * ( a ) y ( a ) \" ( [ * ( a ) y * y \" ( b [ ( a ) ] b ) y * x y \" * x x * y * * ( a ) x \" ( a ) y * x x * \" y x * \" ( a ) y * * y \" * y \" *", "( a )", "( a )", "( a )", "] [ * * x y \" * y \" y \" ( a ) * x ( a ) y \" y \" * x * y \" ( a ) x \" y \" * ( [ ( a ) ] [ ( a ) ] b ) x \" * x x * y ( a ) \" ( a ) y ( a ) \" y * * y ( a ) \" (", "* x y \" ( a ) y ( b b [ * ( a ) y * ( a ) y ( b b [ * x x * ] ) \" * ( [ ( a ) ] [ ( a ) ] [ * ( a ) y ( a ) \" ( [ ( a ) ] b b ) y ( [ * * x * ( a ) y ( a ) \" y \" ( a ) y ( a ) * x \" * ( a ) x \" ( [ *", "( a )", "( [ ( b b b ) ] b ) \" ( a ) x \" y * ] ) x \" x * y * ( [ * x ( a ) y ( a ) \" y \" * * ( [ * x x * ] b [ ( [ * x ( a ) x \" * x x * y * * x x * * x ( b [ * x ( a ) y * ( a ) ( a ) y * * ( a ) y * * x"], "accuracy": 0.34, "train_overlap": 0.34, "res": [{"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* * x ( a ) x \" * x ( a ) x \" ( a ) y * * x y \" ( b b [ * * x * y \" ( [ ( a ) ] b b ) y ( a ) \" y y \" ( a ) ( [ * * ( a ) y * y \" * ( [ * ( b b [ * y \" ( a ) y * ( a ) y ( a ) \" ( [ ( a ) ] b [ ( b b", "log_prob": -85.35275842191186}, {"text": "* y \" * * * x ( a ) x \" y \" * * y \" * y \" y \" * * * * y \" y \" ( a ) ( a ) y ( a ) \" ( b [ * x ( a ) y ( a ) \" y \" y * ] b ) x \" ( a ) y \" y \" * y \" ( a ) * * * y \" ( [ * y \" * x y \" ( a ) y * y \" * y", "log_prob": -89.90927370433928}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( b [ * y \" * x x * y \" * ( a ) y ( a ) \" y \" * x * x * x * * y \" ( [ ( a ) ] b [ ( a ) ] ) x \" ( a ) ( a ) ( a ) y ( [ ( a ) ] [ * ( b [ ( a ) ] [ ( b [ ( a ) ] b ) ] ) x \" y \" ( [ * y \" ( [ ( [ ( [", "log_prob": -86.02457242498349}, {"text": "* y \" ( b b b ) x \" y * * * * y \" * ( a ) y * * x ( a ) y * ( a ) * y \" * x x * y * x * ( a ) x \" * * x * * y \" ( [ * x * x x * y * y \" * y \" * y \" * x y \" * y \" ( [ * x x * ] [ * * x x * y ( a ) \" y", "log_prob": -94.19952780613676}, {"text": "* ( a ) y * x x * \" y \" * y \" * x y \" y \" ( [ ( a ) ] b b ) y ( a ) * y * ( [ ( b [ ( b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( [ * x y \" * y \" ( a ) y * x x * \" y x * y ( a ) \" y * ] [ * ( a ) y ( a ) \"", "log_prob": -81.72726687390241}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* x y \" y \" y *", "log_prob": -7.282807843061164}, {"text": "* ( b [ ( a ) ] [ * x y \" * ( a ) y \" * ( b b b ) x \" * y \" * * x * y \" ( b [ * * x ( [ * ( b [ ( a ) ] b ) ( a ) * y \" ( a ) y \" ( a ) x \" * y \" ( [ ( a ) ] [ * x ( a ) ( [ ( [ * y \" ( b [ * x ( [ (", "log_prob": -98.80297989424434}, {"text": "* * x x * x \" ( [ * ( b [ * * ( a ) y \" y \" y \" ( a ) y \" ( a ) y ( b b b ) \" ( b b [ * x * * x ( a ) y * y \" y \" y y \" * * ( a ) y * * x x * y ( a ) \" y \" ( a ) x x * \" ( a ) * x ( a ) y * x * ( a )", "log_prob": -100.68688389638555}, {"text": "* ( b [ ( a ) ] [ * x x * ] ) y ( a ) \" y \" y * y \" ( b b [ * * x x * * ( [ * x x * ] b [ ( a ) ] ) y * x * x x * * y \" * * x * y \" y \" ( [ * ( a ) y * ( [ ( a ) ] [ * y \" y \" ( b [ * * x x * * * ( b", "log_prob": -92.22604256198974}, {"text": "( [ ( [ ( [ ( a ) ] b [ * ( a ) y * x * x x * * y \" * * * x * x y \" y \" * y \" y \" ( a ) y * * * ( a ) y ( a ) \" ( [ ( b [ ( [ * x * * y \" ( a ) x \" ( [ * ( a ) y ( a ) \" * * x x * y ( [ * * x * x * x", "log_prob": -94.39315537185757}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* * * y \" * x x * x \" ( [ ( a ) ] b b ) y * x ( a ) y ( a ) \" * y \" y \" ( [ * x x * ] b b ) y ( a ) y \" * x ( b b [ * * * x x * ( a ) y ( a ) \" * * x y \" y \" * ( b b [ * * * * x ( a ) ( b [ * * y \" (", "log_prob": -90.08099608845077}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* * x y \" * y \" y \" ( a ) x * ( [ ( [ * x y \" ( a ) y ( a ) \" * y \" * * y \" y \" * y \" * x ( a ) x \" * x * x ( [ * * x ( a ) ( [ ( a ) ] [ * y \" ( a ) x \" * x x * x x * ] [ ( a ) ] ) y * ( a ) x \" * (", "log_prob": -95.86602003118605}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" ( a ) y ( a ) \" ( a ) x x *", "log_prob": -16.2380273254239}, {"text": "( [ * x x * ] b b )", "log_prob": -7.805121859244537}, {"text": "( b [ * x ( a ) y \" ( a ) y ( b b b ) \" ( a ) ( [ ( a ) ] [ ( b b b ) ] [ ( [ ( a ) ] b b ) ] ) y * x y \" * x y \" ( [ ( a ) ] b [ ( [ ( a ) ] b b ) ] ) ( a ) x \" * x * * * ( a ) y * x x * \" * y \" ( a", "log_prob": -81.90341644480941}, {"text": "* ( a ) y * ( [ * ( b [ * x x * ] b ) ( [ ( a ) ] b [ * * y \" ( a ) y * x x * \" ( [ ( a ) ] [ ( a ) ] [ * ( a ) * x ( [ * y \" ( b b b ) y ( [ ( a ) ] [ ( a ) ] [ ( [ * * y \" ( a ) y * * x ( b [ * x x", "log_prob": -83.03611646368518}, {"text": "* y \" * * * x * y \" ( [ ( a ) ] b [ * x x * ] ) * x ( [ ( b [ * x * x y \" y \" ( a ) y ( a ) * y * x x * \" y \" * ( b [ ( a ) ] [ ( [ * y \" * x y \" * x x * y * * * * y \" y \" ( a ) y ( b [ * y \" y \" y *", "log_prob": -88.47384577538469}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "( b [ ( b b [ * * * y \" y \" y y \" ( [ ( a ) ] [ ( b b [ ( b b [ ( a ) ] ) ] ) ] b ) y ( a ) \" ( a ) y * * x ( a ) y * * * ( a ) * x y \" * x ( a ) ( a ) * * ( [ ( a ) ] [ * ( [ * y \" * x * y \" * x * (", "log_prob": -90.03854447350022}, {"text": "( [ * x ( b [ * x x * ] [ ( [ * ( a ) y \" y \" ( [ * y \" * y \" y \" * y \" * x x * y * * x ( b b [ * x x * ] ) y ( b b b ) \" ( [ * * ( a ) y * x ( a ) y ( b b [ * x x * ] ) \" * y \" y \" * ( a ) y ( a ) \"", "log_prob": -81.49801552091958}, {"text": "* y \" ( a ) y * y \" ( a ) y * y \" ( a ) y * y \" ( b b b ) ( [ ( a ) ] [ * ( [ ( [ ( b b [ ( a ) ] ) ] b b ) ] b b ) y ( b [ ( b b b ) ] [ * * x y \" y \" y * y ( a ) \" * x * ( b b b ) x \" * x y \" ( b b", "log_prob": -87.71947840979556}, {"text": "* x y \" * y \" * ( [ * ( a ) y * * * x x * y \" * x x * y * y \" y \" * x x * * y \" y \" * x y \" * y \" ( [ ( a ) ] [ * x y \" * y \" * y \" * ( a ) * ( a ) y ( a ) \" * x ( [ ( b [ * y \" * x x * y ( [ ( a ) ]", "log_prob": -88.93615628703265}, {"text": "* * x ( [ ( a ) ] b [ * ( b [ * ( b [ ( a ) ] b ) ( a ) * ( a ) y * ( a ) x \" * y \" * x * y \" y \" * x x * y * ( a ) y ( a ) \" * y \" y \" y ( a ) y ( a ) \" ( a ) * * * ( b b b ) y ( b [ ( a ) ] [ * x *", "log_prob": -87.72296151696355}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" ( a ) x \" ( a ) y ( a ) ( [ * x ( a ) y ( a ) \" ( a ) y \" y \" * ( [ * y \" ( a ) y ( a ) \" * y \" ( a ) x \" * y \" ( [ * y \" * x * * y \" ( a ) y ( [ * y \" y \" ( a ) y \" * ( b [ * ( a ) y * ( a ) x", "log_prob": -85.98972495569615}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" ( b [ ( [ * y \" * y \" * x x * y * x y \" ( a ) y \" * ( a ) y * * ( [ ( a ) ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * y \" * ( a ) x \" * x * * * ( a ) ( b [ ( a ) ] [ * ( a ) * * y \" y \" ( b b b ) y *", "log_prob": -83.14854685819591}, {"text": "* ( [ ( a ) ] [ * x x * ] b ) y ( a ) \" * x x * x \" ( [ * x * * ( b [ ( b [ * x x * ] [ * x ( a ) y * * ( a ) y * ( a ) y * ( a ) x \" * x x * y ( a ) \" ( a ) y \" y \" y x * \" ( b b b ) y ( a ) \" * x *", "log_prob": -80.30855243091355}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "( [ * ( a ) * * ( a ) y * ( [ ( b b [ * x x * ] ) ] b b ) ( a ) y * * * x * y \" ( a ) ( a ) * y \" ( [ ( b [ * x ( b b b ) * x ( [ * x ( [ * x y \" y \" * x x * x * ] b b ) x \" * x ( b [ * ( [ ( a ) ] [", "log_prob": -105.13542725751176}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* ( a ) y * x x * \" y \" * y \" ( b [ * * y \" y \" y y \" * * * x y \" y \" * * y \" y \" * x x * ( [ * x ( a ) ( a ) y ( [ ( a ) ] b [ ( a ) ] ) \" y \" ( a ) y * * y \" ( a ) y * y \" y \" * y \" y \" y ( [ * y \"", "log_prob": -84.48796855157707}, {"text": "* y \" y \" y y \" y \" ( a ) y ( a ) *", "log_prob": -16.806259065459017}, {"text": "* * x x * y * * x ( [ ( a ) ] [ ( b [ * ( a ) y ( a ) \" ( [ * ( [ ( b b b ) ] [ ( a ) ] [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ * x x * ] [ * y \" * ( a ) y * y \" * x x * * x y \" * y \" y \" * x ( a ) y ( b b", "log_prob": -86.17524165957002}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( b [ ( a ) ] [ ( a ) ] )", "log_prob": -8.042699001729488}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "( [ * ( a ) y ( [ * * y \" ( a ) y ( a ) \" * x * x x * y ( a ) \" ( a ) y \" y \" * x * ( a ) y ( a ) \" * y \" * x x * x \" y y \" * x x * y ( a ) \" ( b [ * * ( a ) y * * x y \" ( a ) y \" * x ( [ * x x * ] [", "log_prob": -81.85156927912612}, {"text": "( [ * ( b b [ * x * y \" y \" ( [ ( a ) ] [ * ( a ) y ( [ ( [ * x x * ] [ ( [ * * ( b [ * * * x x * x \" ( a ) y * * x ( [ * x x * ] b b ) y ( b [ ( a ) ] b ) \" * x y \" ( a ) * ( a ) y * y \" * ( b b b )", "log_prob": -85.95414819027064}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* * y \" * ( a ) y ( b [ * x ( a ) x \" * ( b [ * * ( a ) y \" * ( a ) ( b b b ) x \" * x ( a ) y ( a ) \" ( a ) y * ( b b b ) y * ( b [ * * x x * y ( a ) \" * x * * * * * ( a ) y ( b b [ ( b b [ * x x * ]", "log_prob": -90.52960805798648}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" y \" ( a ) y * x x * x *", "log_prob": -19.76441018981859}, {"text": "( b b [ ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b [ * y \" y \" * x ( b b b ) y ( b [ ( [ * x y \" ( a ) x \" * * x ( a ) y * ( b [ * ( a ) ( [ * x * ( a ) y * ( a ) y ( a ) \" ( a ) x \" ( a ) y * x y \" ( a ) y", "log_prob": -85.36839581927052}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( [ * x y \" y \" y * ] b [ * x x * ] )", "log_prob": -16.04783893201966}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "* x x *", "log_prob": -3.6779294442385435}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" * * * * ( a ) y ( a ) \" ( a ) x \" * y \" ( [ ( a ) ] b [ * * x x * y * y \" * x x * x \" * ( [ ( b [ * ( a ) ( a ) y \" ( a ) ( a ) y ( [ * x ( [ ( b b [ ( a ) ] ) ] b [ ( [ ( b b b ) ] [ * ( a ) x", "log_prob": -88.81846151826903}, {"text": "( b b b )", "log_prob": -4.862041806249181}, {"text": "* * * x x * y * y \" ( a ) y ( b b [ ( [ * x * * ( a ) x \" ( a ) * y \" ( a ) y ( [ * y \" * y \" y \" ( [ ( a ) ] b [ * x x * ] ) x x * x \" * ( a ) y ( a ) \" * x y \" y \" y * x \" y * * x x * ( a ) y ( a )", "log_prob": -86.64441318641184}, {"text": "( [ * * x x * y \" y \" ( a ) y ( [ * ( a ) x \" y \" * * y \" y \" y x * ( a ) y * * y \" y \" ( a ) ( a ) y * x y \" ( a ) y * x ( [ * x x * ] b b ) y * x x * \" y \" * * x y \" ( a ) y * y \" y \" * x ( a ) ( [", "log_prob": -87.12082564475713}, {"text": "( [ * * * ( a ) * x x * ( a ) x \" ( b [ ( a ) ] b ) y ( b b b ) \" * ( a ) x \" ( a ) y ( a ) \" * x * ( [ * x ( a ) y ( a ) \" * x x * y \" ( a ) x \" y \" y * ] [ * x x * ] [ ( a ) ] ) y ( a ) \" * ( [ ( b", "log_prob": -85.05457808083156}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( b [ ( b b b ) ] [ ( a ) ] )", "log_prob": -10.8547266300302}, {"text": "* y \" ( b b [ * x y \" y \" ( [ ( [ ( a ) ] b b ) ] b [ ( b b [ ( a ) ] ) ] ) y \" ( a ) y ( a ) \" y * ] ) y ( a ) \" ( b b [ ( a ) ] ) x y \" y \" ( a ) x *", "log_prob": -63.940853241161676}, {"text": "( [ ( a ) ] b b )", "log_prob": -6.423649132571882}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" y \" y x *", "log_prob": -7.198394164559431}, {"text": "( [ ( a ) ] [ ( b b [ * ( a ) y * y \" y \" * y \" y \" y x * x * y \" ( b [ ( a ) ] [ * * ( a ) y * ( b [ * x x * ] b ) y * ( b b b ) x \" y \" * y \" y \" * x * y \" ( [ * y \" * ( a ) y ( [ * x x * ] b b ) \"", "log_prob": -84.50323489971925}, {"text": "* x y \" y \" y *", "log_prob": -7.282807843061164}, {"text": "* x * * * x ( b b [ * ( [ ( a ) ] [ ( b [ ( b [ * x * * x x * y * ( a ) ( [ * y \" * ( a ) * y \" ( [ * ( [ ( [ ( b [ ( a ) ] b ) ] [ ( a ) ] b ) ] b b ) y ( b [ * x x * ] b ) \" ( a ) ( b b [ * ( a ) x", "log_prob": -92.41561447946879}, {"text": "* y \" * ( a ) y * * y \" ( [ ( b [ * x y \" ( a ) y ( b b [ * ( [ * ( a ) y ( b [ * ( a ) * ( b b b ) x \" * x y \" ( a ) y * x x * \" * x * * x x * x \" * * x y \" * * x ( a ) y * x x * \" ( b [ * ( a ) ( b", "log_prob": -90.33641511734459}, {"text": "* ( a ) y ( a ) \" ( a ) y ( b b b ) \" * y \" ( b [ ( [ ( a ) ] [ ( [ * x x * ] [ * ( b b b ) * y \" y \" y x * y ( a ) \" y \" * x x * y ( a ) \" ( a ) y * x * y \" ( a ) * y \" * y \" y \" ( a ) y ( a ) y \" (", "log_prob": -77.96603242232231}, {"text": "* ( a ) y ( a ) \" ( b [ ( a ) ] [ ( b [ * y \" ( a ) y * * y \" y \" ( a ) y \" * x x * y ( [ ( a ) ] b b ) \" y x * y * x * ( b [ * y \" ( a ) y * * * x * x * y \" ( [ * x ( [ * x y \" y \" y * ] [ * y \" y \"", "log_prob": -86.639814839873}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "( [ * * y \" * * x x * x \" y \" * x ( a ) * x y \" ( a ) y ( a ) \" y * ( a ) y * ( a ) ( a ) y * x ( b b [ ( b b [ * y \" * * * ( a ) y * x * ( a ) y ( a ) \" y \" y ( a ) y ( a ) \" ( [ ( b [ ( [ * x * x (", "log_prob": -92.48453761130804}, {"text": "* * x * x ( a ) y * x * * ( a ) x \" * * y \" * x y \" * * x x * y ( a ) \" * x y \" * x x * y * x y \" * * * y \" * x * x ( a ) ( a ) x \" ( a ) x \" * x ( a ) y * ( a ) y * * * x x * y * x x * \" ( [ * x * (", "log_prob": -91.17063550409512}, {"text": "* y \" * ( a ) * y \" ( [ * ( a ) y ( a ) \" ( a ) y * ( a ) y * * ( a ) * y \" y \" y y \" ( a ) ( b b b ) y * * ( a ) y ( b [ * x x * ] b ) \" y \" ( b b [ ( a ) ] ) ( a ) y * * y \" * ( a ) y ( a ) \" y \" *", "log_prob": -77.95451601123204}, {"text": "* y \" * x x * x \" ( [ ( b b [ * y \" ( a ) ( b [ ( [ ( a ) ] b b ) ] [ ( b [ ( a ) ] [ * * * y \" y \" y ( a ) y * ( [ * * y \" ( a ) y \" y \" ( b [ ( a ) ] b ) y \" y \" ( a ) y * * x ( b [ ( b b [ ( a ) ]", "log_prob": -88.49936960163177}, {"text": "* y \" * x * y \" y \" * y \" y \" y y \" * ( b b [ ( [ * y \" * y \" y \" y y \" ( a ) y \" * * ( [ * x ( a ) y ( b b [ * ( a ) y ( a ) \" * * y \" * x y \" ( b b [ ( a ) ] ) y * x y \" ( a ) y * ( a ) x \" ( b b b", "log_prob": -90.42163096915465}, {"text": "( a )", "log_prob": -2.162076943088323}, {"text": "* y \" * y \" * * y \" * ( a ) x \" * x ( [ ( a ) ] [ * x ( a ) x \" y \" y * ] [ ( a ) ] ) x \" ( [ ( a ) ] [ ( a ) ] [ * x ( b [ ( [ ( b b [ * x * x x * x \" y \" y * ] ) ] b b ) ] [ * * x y \" * * x x * y *", "log_prob": -85.75777482255944}, {"text": "( [ * ( a ) x \" ( b b [ ( b [ * y \" * ( a ) y * x y \" y \" * x * x x * x \" ( a ) y ( a ) \" * ( b [ ( a ) ] b ) y \" * * x x * y ( a ) \" * y \" y \" ( a ) x ( [ ( [ * x ( a ) y ( [ ( a ) ] b b ) \" * x ( a", "log_prob": -83.29800253460417}, {"text": "* x ( a ) y ( a ) \" * * y \" y \" ( a ) y * x * x x * y * y \" ( [ ( b b [ ( a ) ] ) ] b [ * * x * ( a ) * y \" ( a ) y * x y \" ( [ ( a ) ] b [ ( a ) ] ) y * x x * \" * * * x ( a ) y ( b b b ) \" ( b b [ *", "log_prob": -75.35876722433022}, {"text": "* * * x x * y ( a ) \" y \" * x x * y * ( a ) y * ( b [ ( [ * y \" * x x * y ( [ ( b b [ ( b [ * y \" ( a ) * x y \" y \" y * y * x x * \" ( a ) ( b [ ( a ) ] b ) y \" y \" * * ( [ * x x * ] [ * y \" ( a ) y (", "log_prob": -83.01338831422618}]}}, "ArithmeticLogic": {"best.pt": {"generated_sequences": ["( if not cond then val else val )", "if cond then ( ( if cond then ( ( ( val + if cond then if not not cond then val else val else if cond and not cond and cond then ( if cond then if not cond then val else ( if not not cond and cond and cond and not cond and cond and cond then val else val * val ) else ( if not not cond then val else if cond and not not not cond and cond and not not cond and cond and cond and not not cond and not cond and not cond and cond", "val * val", "val * val", "val * val + if cond then val", "val", "( if cond then ( ( ( ( if not not cond and cond and cond and not cond then if not cond then val else val else ( ( ( ( ( val * val * val + ( ( ( val ) * if cond then val else if not cond and cond and cond then ( ( val + val ) + ( if not cond and cond then if not cond then if not not cond and not cond then if cond then if cond then val else", "val", "val", "( val ) * val + val", "val", "val", "if not cond then ( val ) else val", "val", "( ( val )", "val", "( val ) * val", "if cond then val else val * val * ( val )", "val + ( ( val ) * val * ( ( if cond then val else ( val * ( if cond and cond and cond and cond then ( if cond and cond and cond and cond and not cond then val else ( ( val ) * val * ( val * if cond then ( ( ( ( if cond and cond then if not cond and not not cond and cond then ( val ) else ( val ) * ( if not cond then ( val ) else val ) )", "val", "val", "( ( if cond then if cond then if cond and cond and not not cond and cond and not cond then val else val else val else ( val ) )", "val", "val + if cond then if cond then val else if cond then ( val * val ) ) else val + val", "if not cond then val else val", "val * val", "if cond then if cond then if cond then if cond and cond and not cond and not cond then val else val else if cond then val else if cond then if not cond then if not cond and cond and cond then if cond then if cond then ( val ) else val else val else if cond then val else ( val ) + val ) else ( ( ( val ) ) ) * val", "if cond then ( ( val + val * if not cond then ( if cond then if cond and cond then val else val else ( if not cond and cond and not cond and cond and cond then val else val ) else ( if cond then ( ( val ) ) else ( if cond then ( if cond then val else val ) * val ) else val + ( val ) ) ) ) ) ) ) + val ) else ( if cond then if cond then (", "val", "if cond then val else ( ( val + val )", "val * if cond and not cond and not not not cond and cond then if not cond then val else val else val", "val + ( ( ( ( if cond and cond then ( if cond and cond and not cond then val else val ) else val ) else if cond then ( if not cond then val else if cond then val else ( ( if cond then val else if cond then ( val ) else if cond then val else val + if not not cond and cond and cond and not cond and not cond and cond then val else val + val + if not not not cond and cond then ( if cond then ( if not", "val * if not cond then if cond and cond and not not cond and cond and not cond and not cond and cond then ( val + ( if not cond and not not not cond and not cond and not not cond and cond and cond then ( ( if not cond and cond and cond and not cond and cond and cond and not cond and not cond and not not not cond and cond and cond and not cond and cond and not not cond and", "if cond then val else val * ( val ) + ( val * val + ( val ) ) + ( if cond then ( ( if cond and cond then ( if cond then val else val ) else ( if cond then val else val ) else ( val ) ) ) )", "val", "( val ) + val", "( val ) + ( ( ( val ) + val )", "if cond and not cond and not not not cond and not cond and not cond and not not not not cond and not cond and cond then val else if cond and not not not cond then val else if cond and cond and cond then if not not not cond and cond and not cond and not cond then if cond then if not cond then ( ( val ) ) else val else ( val ) else val else if cond and not cond then ( val * ( val * if cond and cond", "val", "val", "( if not not cond then ( val ) else ( val + if not cond then if cond then val else val else ( val + val ) else ( ( val ) ) * val )", "if cond then val else ( val ) + val", "( if not not not not cond and cond then val else ( val * val )", "( val )", "if cond then val else ( if cond then val else if cond and cond then ( if cond then if cond then val else val else ( if cond then ( val * ( val * ( val ) ) * ( if not cond then val else val * val + val ) + val ) ) else val )", "val", "val + ( ( if cond then if cond and not cond and cond and cond and cond and not cond and cond and not cond then if cond then if cond then val else val else val else ( val + if cond then if cond and cond then ( ( if cond then ( val + if cond then val else val * ( ( val * ( val * ( ( val + ( if cond then ( ( val + if not not cond then val else val * val ) ) * if cond then", "val", "( if cond then if cond then ( if not cond then val else val ) else ( val ) ) else if not cond and not cond and cond and not cond then ( if not cond and not cond and cond and not cond then if cond then ( val * val ) else ( if not cond and cond and cond and cond and cond then if not not not cond then val else ( val ) else val + val ) else val else ( (", "( val ) + if cond then ( ( val ) ) else val + ( val ) + val )"], "accuracy": 0.58, "train_overlap": 0.5, "res": [{"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -23.223624911581283}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -16.396522700597416}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -73.5085889355978}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -88.01682423331658}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.308707608288387}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -17.963249887674465}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -83.16494473998318}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.43800260440912}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -71.04595047060866}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * val * val", "log_prob": -7.067684668232687}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.391316800669301}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -77.29380740883062}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -85.01935267372755}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -78.93811053666286}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -86.22281993585057}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -46.33238489885116}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -82.96947494093911}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.23428408714244}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -63.98870073336002}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.0642575895763}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.40720424609026}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond and cond then val else val", "log_prob": -7.714888474845793}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -85.38970710229478}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -80.66113269305788}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -41.95889242913108}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -72.50578305893578}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not not cond then val else val", "log_prob": -7.592912528547458}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -29.436634839337785}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -89.41146617184859}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -12.814180250250502}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -92.43908705853391}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -94.02715863945195}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -96.80605832772562}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -15.970541753224097}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.967181427957257}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -89.69434699200792}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -79.11034474574262}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -92.282597073121}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -86.44018486322602}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -82.21155385189923}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -79.84464383657905}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -32.90553440662916}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -80.3366523849545}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -18.610387486522086}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -80.66996572585776}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -83.5634842030704}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -14.938390230556251}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -87.15989666996757}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -84.74750304804184}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -86.48682412289781}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -79.22766747552669}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -63.11643258485128}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -9.243600255285855}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -79.29615534626646}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -23.973900354874786}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -13.92901367705781}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -81.9258986908535}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -85.17492703383323}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -88.31521834852174}, {"text": "if not cond then val else val + ( val )", "log_prob": -10.277362996333977}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -53.896910114533966}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -73.78409942128928}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -82.63444555399474}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.855755106749712}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -15.509006715277792}, {"text": "( val )", "log_prob": -3.9757382022216916}]}, "epoch_0.pt": {"generated_sequences": ["s ( if val cond then ( ( ( ( val else ( then val cond ( no cond then ( ( if cond and if cond cond and val ) + ( val cond then if cond and l t not cond then if cond and cond and cond and cond then val cond and cond then val if not not cond ( then else not not cond and cond not cond then ) else ( ( val else ( ( if not cond then if else val else if and not cond not not cond val ( if not ( ( ( ( val else ( if not cond then then t ( val else ( val cond ( val ( and cond and cond and ( ( ( ( if cond if then val val ) else val + n cond and cond then cond and cond then val ) + ( ( if not cond then ( ( * val val * ( if cond cond then val val else val else val ) + val cond cond cond and not cond then if cond then if not not a then", "val ) cond then ( + val not cond and cond and not not cond and not cond then val ) else val val else ( if cond then val cond not cond and cond not cond and cond and cond then ( val + val if cond not not if cond val else if else if not val else ( cond and not cond and then cond then val else ( val else ( if cond then ) else val cond cond and not val ( val ) ( if not cond val ( not cond not not cond then if ( and cond and cond then val else and + * ( cond then ( val not * ) ( not ( if cond not cond not cond then val ) ) ( val else ) + ( if if cond val ) + ( cond then val else if cond and cond and cond then cond then val * + else if cond then val else val ) ) ) else ( val cond and not cond not cond f", "if not val cond not cond then ( if cond and cond and cond then ( ( cond and cond then ( ( if not cond and cond and cond and cond not not cond else ( ( ( ( ( if cond and ( if not cond ( val else ( if * val ) cond and n cond then ( val cond then if cond then ( val cond val + ( ( + val v val ) not if + cond cond not not cond cond and and cond not not not cond ( cond then val if not not cond and cond and + cond then ( val then if cond and not + val cond ( val * val if val else ( and ( ( val cond ( ( if ) cond then if cond * cond n not cond and cond if not cond then not cond + val val else if if ( * cond then cond and cond then", "( cond val not cond en cond and not cond cond if not not not cond co ( * cond then val s d not co if cond ( val + val + ( ( cond cond then val else hen ( if not n val not not if not cond val else cond then val al if cond then * ( if else val cond * if cond cond ) cond e val else val cond and cond then val ) val * if ( val else l el if cond then", "and cond then val else val cond then val * if cond then if not cond and cond then val ( if ( ) * val cond cond then ) ) ) val else val val if i cond then val cond * val * val else ( ) else val else el if cond ) + ( val ( then cond if cond and if cond and not not not not cond and not cond if val * if cond then else if ( ( val ) else if cond then if cond and if cond then ( if not cond then if cond then ( ( ( ( val then ( ( val if and cond and cond ) then val else val else ( if val cond then c then and ( if cond and cond cond then if cond and val ) * not and cond and not cond ( val ( val + ( ( ( if cond then then val else if ( ( cond then if not not ( not cond if if not then if not cond val * val val else and cond", "( if else if cond val ( if cond and not cond cond then ( if not cond then val * cond then val val cond and cond not cond then if cond and val * ( val not else if not cond if l cond and cond and cond and cond then if cond if cond then ( cond then val + else if cond and not not cond val ) else ( val else cond then ( ( ( if cond and cond then val not else val * val else ( if not val ) not cond then then if cond and cond d val else val if and cond then val ) l cond then not cond then and cond not not cond and cond cond not not not val ( val if cond val else val else and not cond cond cond and cond if not cond and", "( val else ( ( cond not not cond and ( val ) ) else cond not cond then if val not cond then ( val else + val cond ) ( ( val ) else else ( val cond then val ) else cond cond if * val ( val * ( val ) val else cond and cond then val cond if cond cond and not cond val + if + * val + val then ) + val cond and cond and cond then ) ) ) else ( ( n not ( val cond then val cond + if val if cond then val cond and n ( val else val cond then if not cond then co not ) * cond then if not val else if not not cond then ( cond then then not not ) + val * cond cond not cond ) cond if not cond and cond", "if cond then val if cond then cond and cond cond then if cond and not not cond if not not cond and + val and cond cond cond val ) ) * and cond ) else else val else val else cond and ( ( cond cond and cond then cond and cond then if cond then else val and cond then if not cond and cond cond cond not not cond if cond then if if cond then val ) ) val val ) ) + if cond and not cond then cond ) * ( val else ( val ) if not not not cond then val ) ( else else if not cond then val ) ) else if cond and cond and not not not cond cond cond ( if ( * ( ( val * val ( val ( ( ( val else ( val else * if cond then val ) ) not cond else ( not then", "cond and cond cond and if not cond val t not cond cond not cond cond then val not ( val else if cond and cond and not cond and * val else ( ( * ( then ( not ) ) ( if cond cond then if cond val ) ) ) ) * val else val ) * val else if cond and cond then val * ( ( + cond then and cond then val ) + val ) ( ( val cond then else if cond cond and cond ( * if ( if cond and if cond not val not cond then if not cond then ( co cond cond then ( * ( then then not not not not cond then if cond and cond then if cond then if cond and cond then val ( val ) not cond and cond cond val cond and cond not not cond not ) else if not cond then val cond and not cond then else if not val not cond then val else ( ( val else if not cond * val else val ) + val ( not cond then *", "if cond cond then if cond and cond and not cond and cond then if + if cond and cond and ( val cond and not cond cond ( ( val else cond val then cond then if cond then if cond then val * cond and cond not not not not cond and cond and cond and en not not cond cond val val + if cond and + if cond then if cond and not not cond val el cond then if cond cond then * val val ( and cond then if ( ( val val else cond then ( cond and cond val else if cond then if cond cond and not not not cond and cond and cond then ( val not cond and cond and cond then if cond c val else * ( val ) else ( if cond val + val val ) + val cond en cond and cond then if not not not not cond", "( ( val ) else cond then val cond then val else cond cond then and cond then ( if cond and cond cond if then if + cond and not cond val else val cond then no cond cond not cond and cond then not val val not f ( ( val val ( val ) not cond val * if if cond and cond cond then val else ( ( ( ( then no not cond cond cond cond and not not not val + if cond and then else val ( not cond and cond then ( ( ( else ( ( val cond then val d not not else al cond and not cond ( if cond cond then if cond and cond then val cond ( ( ( if not not cond cond cond and cond ) else if val else ( ( if cond and cond not cond cond then val ) else if n cond and not not cond then not cond and cond v * if not", "( if else if ) else val cond then then if cond and not cond and not cond then val + and cond then ( if cond then val ) cond then ( val else val ( val else if cond not cond and not cond then val cond then cond and cond and cond and and cond and cond and cond then val + val cond val val else if cond then cond f not cond and not ( ( ( val ) + ( cond cond not not not cond and ( if if not not cond cond and cond ( if not cond and e cond and ( val * if cond val * ( ( val cond no not val else and not not cond ( if cond and ( cond cond and cond then if cond then ( ( val else and cond then if not if not not cond val else val * ( ( ( cond then ( not + cond and not cond then * else val not cond and ) * val not cond then if", "( val * val else if not cond then val else val else val ) ) ) val ) else val else val + ) cond not cond then val * if ( if cond and cond then ( cond then if not cond then val ) ) el cond and cond if cond then cond and ( ( val else ( if else and cond then cond and not and not not ( ( ( val * if not + val ) ) * ( cond val else ( not cond and cond then cond ( val * val ) ) if cond and cond then ( ( if cond and val val cond cond cond then ) cond and not cond ( val else val not cond then val ) ) then not cond and cond and cond then if cond and not not cond and cond val then val ( val * ( val else ( val cond cond and then cond cond not cond then if cond cond then if cond then val ) ) ) cond if cond ( if cond then if cond and cond then val ) * if cond cond then n ( else", "( if val ( val else cond then if cond and ( val val not cond then val ) val else ( val not not cond then cond and not cond ( ( else cond ) not if cond if not cond and cond and not not else val and cond cond then ( val * ( val * val ) else cond then if val else not cond and cond and then ) val * ( if not cond if cond then if val cond then val else val ) ) val else ( ( val cond ) ) ) + val else and cond then val then val if cond else if cond t cond val else not cond and cond then val if cond and cond then if cond then val if cond ( ( val ) not cond ( cond", "if cond val f if cond not cond and if cond and cond not cond and not cond cond and cond and cond then val else ( not cond and not cond then val ) not not cond then ( val ) else val not cond cond and cond val * if cond then cond then else if cond and cond val then if not not cond then cond not * cond then ) else and cond and not cond then ( val ( val else and not cond then val * val ( val cond and not cond if if not cond and not cond then cond * val else val else val else val else if cond then val ) else ) + val if cond then val else ( val ) cond and not not cond cond then not cond then val else val * val ) + not cond not cond * ( if val ) else val en ( not cond ( if cond if not cond and cond then if cond cond and", "val ) else cond not cond then val cond then if if cond then ( ( val else ( ( * val * val else ( ( else if not cond then val else val ( cond and nd ) cond and cond and cond cond and not cond then cond else val ) ) else if cond then val ) * * ( val else val else cond if cond and if cond cond if cond + val ( ( ( not cond and not not cond and cond and not not not cond and o val ) if cond then if cond not ) then if not cond and cond and cond then ( ( val else if val else ( val else ( ( if cond then else if not cond then not cond cond then val val not cond and cond and cond then + if cond and else ( ) else if cond val * ( not not not not cond and not cond then + else ( ( if not cond not val else cond then ( ( ( se cond then ( val * (", "if cond ( if cond val * val else val val + and not cond s if cond then if cond then if not cond and not cond then + val ( if cond and not ( not ( ) not cond then ( ( not cond then val ) else cond then val ) else ( val ) ) ) not not not if cond then and cond then cond then not if cond ( ( if + val else val val else if cond cond then val ) cond and cond then if cond then cond not not if cond cond and cond then ) cond then if not cond then val cond then val if then val else not not + val * else if cond cond and cond ( val * then cond and not cond then val * and cond if cond then not not ( not cond and cond then cond then ( val * ( ) val ) val ) cond not val and val ) ) else val ) if val + if not cond then", "val else if cond and cond and + + if cond then val else ( cond s val ) cond ) val else val else cond if cond then val val and not cond then d cond val else val cond and ( if cond and cond cond and val ) not not cond and cond then if not cond then cond then ( then ( ( val else val cond else if cond if if cond and cond ) * ( ( val ) and cond cond not cond cond then if ) ) else val + ) en ( ( cond then ( if cond cond then val ) else if cond then cond cond then * if not ) cond val not cond cond then + val + if cond then not val cond and cond then val else val else if ( val * ( if cond then val ) + cond and not val + else ( ( val * if not cond cond not not cond and not if cond and cond if not cond then no not not cond and cond", "if * if not not cond and cond ) else and val cond ( ( * val val if val + ( val val s val else ( ( ( cond then if not cond then val if not else if cond then if cond and * if cond and cond then ) else ( if not not cond l no cond then ( cond if o not not not not not cond then ( not ( val if cond and cond ( val * cond then if cond and cond and not not cond and cond and val + val val ( ( cond then ( if s cond ) + * val * else val else if not not cond then if not cond val not val if not cond then cond then if cond then cond then cond not and not cond and cond then ( ) ) and cond and else ( if cond val val if cond en cond cond and cond then", "val cond val ) * val else val cond then not cond and cond and cond and cond then if cond val else ) ) else if val else val val ( ) else cond and if cond not cond and not not cond and cond then not cond else val ) * val ) ) if then + cond ( val ) not cond and cond not cond val cond ( ) cond then if cond then ( ( val then ( ( val ( ( nd if cond cond and not cond and cond then if not cond then val val * ( val + val ) if and val else if cond and cond and cond and ( ( else if if not not cond ) ) ) else val else ) else val * ( and and cond not not cond then then if cond and not cond and cond and cond and cond cond then if not val else cond then ( * if not val cond then ( val ) else val if if val else val else val ) ) else if and cond + val else + ) + val", "val if if not val ) else val ) ) cond ( ( cond then val ( if not cond cond and * then if not cond then val then if cond and not cond and not cond then ( cond cond then if not cond then val ) val else cond cond then val else ( val * val else ( if then ( ( ( val and not not cond then not not cond and not cond then val cond cond then then if not cond val ( val ) ( val else ( not cond then not cond and cond and cond and cond then val ) ) * val else not ( val else cond then ( val val ( then ( + val else and val + ( if cond then val ) cond then if else val + ( if cond cond then cond ( if ( ( ) cond then then val * if cond then cond and cond then val not cond and not not not cond then ( if cond cond", "( val ) else n cond then val then val ( ( if cond and cond l cond ( not h not and cond and not not cond and not cond cond * if cond and cond not cond then * ( val val ) else val ) else val cond and cond * val else a ( ( val else and cond not ( val ) else val else val ) else if cond then val not not cond cond and cond then * val ) * val val else ( if cond cond cond then val else ( val else val not not not cond and cond val else if not cond if else if val else if cond then val ) val else if cond cond else val ) ) + ( ( val ) ( if cond and cond val else ( val * if cond then ( ( if cond then ( ( ( if and cond then val * if not cond and then val else val", "( not ( + ( not cond and cond and cond val cond and cond then else ( if not cond then cond and cond ( ( if cond ( if not cond then val * val ) else ( if not cond then ( ( if cond el if cond and not cond ( if cond then val not * ( ) then if ( if cond then if cond and not cond and cond and not not cond and not not cond if ( if not not cond then if cond ) ) val + if + if * not cond and not cond and cond and cond and cond then val ) if cond and cond cond ( if cond not cond and not cond and cond then cond cond and cond cond and not cond then ( not val * then ( val not cond then then val not cond if val * not cond and if cond then if not and cond cond ( ( if val ) not val else val val else val if cond then if", "* val ) not cond and cond and cond then ( else ( if val val cond then if if cond ( ( cond then val ) ) val then ( val cond then ( val cond and not not not cond and cond and not then val val not cond and cond d cond cond then if not cond cond and not ( ( val if not not not not not cond cond and cond and not not cond then if cond cond ( val * val else if cond not not cond cond and and * * val ) else ( cond and cond then val else val else val + val then val cond and not not then val else and cond and cond and not cond then val * val + val else val ( val else if cond then if cond cond and not ) c cond and else val cond ( if cond then ( ( + if cond not cond then if cond val else cond then if cond then ( cond and cond then val val ( cond then if not", "cond then if cond ( val else ( val not cond and cond and cond and cond cond then if not not val else ( ( ( ( val ) ) val cond and cond and ( if cond then not cond cond then cond then val ( cond and then cond cond then else cond not cond if cond not not cond ) else cond cond and not cond cond and cond then ( cond and ) ) if not not cond then + if cond cond if not not cond and ( not not not cond not not not cond then val else if not and t not cond cond then if cond if cond cond then val ( ( * if cond then not cond not cond and not cond cond then ( if cond then if cond and cond and cond not ( if cond and cond then val + val * val else val else val * cond cond", "val cond and + val * if cond then if cond and + cond and if cond val ) ) ( and cond cond * + ( if cond then if + if cond then if cond and not not not + val cond and val ) ( not ( val cond not cond then val else else e not cond cond and not ( if ) ) ) cond and cond then val cond ( val not not cond then val else if * val + if cond cond cond and val else ( and val + ( not cond and val cond then then if not not not cond if cond and cond then * and cond and ) + not not and cond then val not val else val else val else val else if not cond and not cond then val ) ( if if cond and not not cond then cond and not not then else if not val ) cond if not (", "not cond and no cond not cond and cond then cond el cond then if not not cond then val else ( val * if cond then if cond val if i cond not not not cond then if not val ) else ( val * val ) ( if cond if and cond and cond cond val cond then ( cond and cond then ( if cond then cond cond then if not cond then val else val * val ( if cond then val ) ) ( if ( cond and cond then if cond then val else else * val else ( ( val if not cond and not ( if not not not cond if cond and cond then val else cond cond and if not cond then val else if not not not cond and not not cond and cond then ( if cond not cond then ( ( val else ( else ( val else + if ( then if cond then if then n not cond then ( cond and cond", "( if not val else val ( else val not cond * if cond cond then cond and cond and not cond then val + val co not cond and + val ) else cond and not cond and cond then if and cond and not not cond if not cond ( if cond then if cond then val + if ( ( then not cond and not if not cond then val * ( val ( val * val val not not + val not cond val * not cond val else val cond and not then not cond and cond and n not cond and cond and not cond then if cond and not not cond then cond cond then val else val else val + ( if val not not cond and cond cond and cond and cond then val if cond then cond and cond then if not cond cond cond then if cond ( if cond then val + ( val ) if cond then ( not cond and cond and", "val cond and ( f cond and cond and if cond cond then val ) * val t if if cond then if cond then val else ( ( if val cond then ( val val v en val else if cond then cond then cond then val * then ( ( val ) cond then not cond and cond then then cond then val val ) ) else if cond then if cond then ( else val cond then if not not cond if not cond and cond val val if cond and then val else cond cond not cond and cond then val else cond if then not not not not not s val else if cond and cond not not not ) ( if cond cond then val else if cond then val ) ) ) else if val * val + if cond and cond ( if cond not not cond ( val * and not then val ) else * val ) ( ( * val and else if cond cond then ( if cond then val * val", "val ) + ( val ) ) val if cond then ) val * ( if not cond and cond then ( val else ( if ( if cond + val else cond and cond cond not not val ) if not val cond and cond and cond and cond and not then not if if cond and cond e if v cond if cond and cond and cond and cond and not ) * then if + ( val + val + if cond val else ) cond not not cond then ( ( val ) val ) else cond and cond and cond then ( val else if cond ( + if not not cond cond then val not cond and cond ( val else val val cond then if cond and not cond then if not else el cond and not not not cond ( cond and cond and cond and not cond cond ( ( if ( ) else val ) val else if cond and not hen l cond and ( if not not not cond", "not cond and not val else then if not cond then if cond and cond then if cond then ( ) else if then i not cond ( val ) ) ) cond not cond then val * then ( if not cond and cond then ( s not cond and ( * if cond cond cond and cond then val * val ) ) if cond and not cond and cond if cond not cond then not cond no ( * val + if cond then not not and cond and cond then if cond then val + val else * val * if cond ( cond val else val * val else if not cond if cond not cond then ( if not not not cond and cond then if val val else ( val else if not if cond ( ( if cond then val else ) ) else ( if not not cond then if * ( val if cond then if not not not cond cond cond then not not + val ) + ( and cond then val cond ( ( if cond not cond and not", "if cond * val + ) ) ( if not ( val then cond then val + cond and cond val + val cond cond and cond and e cond then val cond and cond if cond not cond and then if not cond then cond and cond and cond and val ) cond then ) cond then if then val * else val cond cond then val + if cond and cond and cond + if not cond * val cond cond ( ( val if not cond then ( and * cond and if if s ) ) else ( if cond then if cond and val else if not ( if not ) else val then val if cond if cond cond cond then ( + val else cond cond not then if cond then ( and cond then if ( val ) + cond then val cond cond and cond not cond then ( not not cond and cond then ( ( ( val then not cond and cond", "val else if then ( if not not not ) ( then val cond cond then val cond * val + if if cond not val ) * ( val + cond cond and cond and cond then ) not cond val not cond val ) ) val cond and hen ( cond and not and not cond then val val ) else ( cond then if and cond then ( val else ( d ( val else val ) else ( ( val * else if cond then ( if cond not if not + val ) not cond then if cond then if cond then ( val cond then val ) else * cond then and not cond ( if cond then ( ( val * ( val ( val then val not cond cond then if cond then val ) ) ( if not cond and not cond cond and ( if cond and cond ( and ) ) else ( if cond then ) then val else val else ( ( ( (", "val ) else cond ) ) else ( ( val ( val cond then cond then cond then if cond then val ) + ( val + val + ) ) ) else if cond then val * cond cond and ( ( ( ( val else val else if not cond then val ) and not cond if not not cond cond and cond ( val else not not cond cond cond then val * not cond ( cond cond and not not cond then val else ( ( if cond then ( val if cond ( ( val else * val else ( val and cond cond + if if not cond cond then then val ) + val a cond then not cond then if cond cond then val if cond not * val ) else val val cond not not cond then if cond and cond cond and not cond then if if cond and not cond then ( ( ( ( if cond val ) then val ) cond then if val ) else val ) cond else val not not cond cond then ( if cond and cond then ( if cond val ) )", "( val cond and cond and cond ) else ( if val ) ) + if * ( val * val else val else val ) else ( val + val not else if ) + cond then ( cond and not cond then val then val + val ( cond and cond and cond then if en cond then val val ) ) * val else val else val not cond then val cond and cond and ) + cond then val else * val not cond and not not cond and cond then if cond and not cond then val else ( if ( if d if cond then if cond then then if cond ( val * else if cond and cond if not not not not cond then val cond if cond if cond val ) else if cond and cond then val ( val val ) ) else ( val else then if not * val * val + ( se * ) else val cond then ( ( + val else if cond and * else if cond and not not not se if", "not not cond and ( ( and cond and cond ( ( val val not val cond then else ( val else cond then not not cond cond then not else not cond and val cond cond and cond and cond and cond cond * else if not val ) if cond then val ( val ) cond and not cond and cond then if t else cond and cond else val o if cond and not not cond and cond + cond if ( ( if cond val ) ) else ( v then ( ( ( val else val cond cond if cond and cond not cond then val if cond if cond and not cond ( val + cond and cond then ( val + not cond and not cond and cond if cond then and cond then val * ( val cond then cond then and cond and cond val ) * ( cond then ( ( val + if", "( cond then val ) + val else val no val not if cond and cond and cond then val not cond then if val ( if if cond val s cond val + cond cond and cond and cond and cond and cond and cond and not val + cond and cond then ( ( cond cond and cond then if ( if not cond then val else val ) ) else if not cond then if not cond and cond and else if cond then ( ( ( no not cond and cond then ( else val else cond cond then val ) ( val ) val not cond and not cond then val ) else ( val else not cond and cond if cond ( and cond then ( val else cond and cond if not not cond and not cond and cond then cond if cond val else cond then if not cond if not if + ( val else cond and cond a cond then", "val ) ( not if cond then else * val ( if * ( ( val else val ) ( ( if cond cond then * val val val if cond + val ) not cond cond * ( if cond and cond then if else * val ( ( + val + if cond cond then if cond and and cond and not not * val + val not cond cond * cond then if cond then val else if not cond en not cond val val * ( cond and not not cond then cond ( ( val then ( ) * val else + cond ( and cond and not + val ) if cond and cond and cond and val cond then and nd cond cond not else val + val val ) else ( if cond then ( + if ( val ( val else if cond not not cond then val val * ( val else cond then not cond cond t ( val ( if not cond", "val ) ) ) then val ) ) + val cond cond then if not not cond and cond cond then ( cond ( ( + ( if cond and cond cond then cond and cond a cond then cond and + val else ) ) cond if * if not cond then cond and if cond val cond then if then cond and not val else ( ( not val + f val else val else else if not cond and cond ( if cond and not t val else val * ) val else if not not ( ( if val * ( val ) + cond then val else val val + val val + val else not val * if cond cond then if not not not cond then val ) ( if cond and cond not not cond and cond cond and cond cond cond * cond then val ) d ( ( not cond then if then ( val cond then else if cond then (", "then ( val else val else if cond and cond ( ( ( not cond cond then val cond then if and not cond then val else val else l val * else not not cond and cond and cond and then if not cond cond ) cond cond not cond ( val if not not if and cond cond not cond then ( if cond val ) else if cond val else val else + ( else val * if not cond and cond and cond ( if cond ( else not not cond then cond and cond then val ) else val ) else val not ( then val ( val ) * val * if cond and cond then val else val else if if then val else v cond val else if cond then ( val else val + if cond if cond then val cond then cond then val * val else val ) else ( if cond cond cond and cond c cond and cond then ( ( val + val", "( if val ) * ( val cond val else val * cond then val val ( if cond ( ( ( if cond if cond cond if not else if cond and if cond then if not not cond and cond then val not cond then if cond then if not not not cond l and cond not not cond if cond and ( val ) ) ) cond and cond and cond then val else val else cond and if not cond then ( if not cond cond ) cond val ) not cond and if not cond and ) val else if not cond and then ( cond val else ( val if not cond cond and not cond and cond then ( if not cond not cond then if val * val else cond if not not cond then val if cond then if cond not cond then if val not val * val val then ( cond then h cond then val else * ( ( not not if cond then cond and not cond then val ) ) ) if cond", "val val not n val ) else val else c val cond and if cond and cond then if val not cond if cond then if not cond then if not then val else ( if cond if cond cond not cond then if cond then val c then ( ( ( val ) * ( cond then val cond not not cond then val then ( then val ) else else if not not not cond and cond then ( if cond then val else else val * ( cond and cond else val not cond cond ( ) val + cond and cond and val ) else not ( if not cond if ( if cond and cond and cond and cond and not cond then if else val else ( ( cond and not cond if val else cond and ( cond then cond then cond then ( if cond if cond val else if val + then if cond not cond then val else ( cond and if", "if not cond then ( val else then val v cond then if not cond and * if cond if not not cond and cond and cond and not not if not cond then val ( if cond then if cond val * cond ( val * val ( val + if cond then if not then val else if cond and cond then val else ( val else if else ( ( if cond cond else val else if cond ( if cond and cond then val else val else ( if cond then ) else cond and cond and not cond not cond then ( ( val not cond not cond val val ) + ( if cond then val not cond and val else if cond then ) else ( if cond else then ( else val else val else then val if cond and then val ) ) else cond then * val else if not then ( ( ( if cond if not cond not cond then val ) ) else ( val * if not", "( val + val if not cond then val ) ) ) * val else and cond then val * val then val ) else val else ( ( if cond then val not if cond not cond and then ( cond val else if not cond and cond and cond else if cond val * ( val * val ) ) else if then if not cond and cond and cond and cond then ) if cond cond cond al val ) i cond then ) else cond and + val ) + + val not not cond and cond then if cond then ( if cond + if cond if cond then if not cond ) then val not cond if cond val ) ) cond then val * cond then val ( if cond then val + and cond and not not val val cond then ) ) val ) ) else val * if cond and cond and + val if cond then ( not not cond and cond then val else and if ( val * ( val cond then val cond then", "cond then ( if cond and if not cond ( val val then if not cond ( ( if and not cond then ( val * val val * ( cond and not cond cond and then cond then and not cond + val ) ( + val if cond then ( val not cond and * ) if cond ( val * ( ( if if cond and not cond and else if not else ( val ) + ( val not cond then not not cond and not not s val cond and cond val + + if cond and cond then cond then + ( else if not cond then ( val ) ( val and else ( if cond else * if cond cond and not cond then ( val not en val else cond ( ( ( val else if cond then if cond and cond val * if cond if cond and cond then and cond and cond and not cond then ) ) if if cond then val else val cond and val * then ( val and", "val * val cond else then ( if not cond and cond then cond and cond then * val ) not cond not cond then ( cond then ( then ( val ) ) else val * val val ) else val else * if if cond not if cond and cond * if cond and ( val else val else if cond then and cond cond cond then if cond and val ( if cond not * ( ( if cond cond not cond then ( ( ( * val ) if not if + cond then then if not cond cond then val val + val ) ) not not cond then val ) ) else val ) val val * ( v ( ( val ( val if cond then cond else val else cond then not cond then if cond then + cond not cond ( val and not cond then val else if cond * val + then if not cond then ( val else and cond then val + val else else ( val", "( if not not cond then val ) not cond cond cond cond val else n not val val else val else ) then ( val ) else ( else val + val ( ( ( ( ( if not cond and not cond val else not + ( if cond cond and val + + if cond then ( if cond cond f not not not if cond cond and not cond and then then cond ) ( if not cond ( cond not val else else cond d ( val else if cond cond val ) else ( val ) + val val else if cond cond then if cond then val v val else val + ( if val ) else if cond then if cond and cond and cond then if cond and cond and cond not cond cond then val val ) ) ) not not cond then ( if val else if cond and not cond then ( ( if cond then en if cond then if cond and cond and", "val if cond and not cond ( ( ( ( if cond ( then val if val ) else al + ( val ) ( val else if cond cond then val else val cond if cond and + if cond if cond else if not cond then cond then val ) else not cond then val else if else val else if + if ( and not cond val ) else if cond then val * se cond then val ) else if ( if not not cond ( ( ( then else val * and not cond then if cond ( ( val val else * ) ( ( se cond + not cond and cond then if cond then not cond then ( ( o val * if not cond and not cond then val ) else val then val + f cond then if cond and val not not cond and not cond then val ) cond and if cond then if cond not val ) ) else val + if", "( if cond not cond and cond cond then val else val cond then if not not not then val else val ( val if val ) ( then if not not a if cond then val else val else cond and cond and cond then val val cond and cond then val ) else cond then ( if cond and cond and not cond then cond and cond and cond not cond and cond and cond if el ( ( val * val else if val else not cond cond ) + if else val else val else + ( if val ) not cond then ( if not cond and not c not cond val cond and not not cond then if cond cond then cond then val else if cond and cond then val cond and cond then val val else ( + val else if not not not cond cond then val + val ( val + val + and and if not * val else val cond else val and not cond then then ( cond val ( cond then not", "then val ) ) if cond then no cond then cond and not and if then val + ( cond if cond then val * if cond cond then cond and not cond then ( val if not val and and e cond and not cond then ( ( if cond not ( ( if cond cond if cond and not cond then val ) else if ( val not ( val else ( val + if cond and val + cond and val ) ) else ( if not not + cond cond and not cond and not cond and cond cond cond then val else if not cond not not cond cond cond else val else if cond el ( ( if cond and cond then if cond then ( if not cond and not if val else if ( ) else val cond a not cond and not not cond then if cond then if val ) * if not cond and cond and not else val ) ) not cond and cond then if not not not cond and cond then val else else if not"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "val", "log_prob": -9.135708212852478}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -43.49902284145355}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -34.770426988601685}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -134.81545627117157}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -143.88544631004333}, {"text": "( val )", "log_prob": -12.023423433303833}, {"text": "val * val", "log_prob": -12.945923209190369}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -25.087689459323883}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -36.20941519737244}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -135.84557473659515}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -141.94620567560196}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -128.8039470911026}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val * val * val", "log_prob": -16.496508598327637}, {"text": "val * val", "log_prob": -12.945923209190369}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -22.676109671592712}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -133.61283266544342}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -138.4433234333992}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -143.2582876086235}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -141.18682157993317}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -83.434530377388}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -138.02419078350067}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -144.3861721754074}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -107.14468777179718}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -139.2109169960022}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -128.1671639084816}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if not cond and cond then val else val", "log_prob": -18.752007365226746}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -135.960768699646}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -131.52623426914215}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -71.61248564720154}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -120.60914105176926}, {"text": "( val )", "log_prob": -12.023423433303833}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if not not cond then val else val", "log_prob": -18.181039929389954}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -54.47865617275238}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -148.42809104919434}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -25.77698850631714}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -153.68656486272812}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val + val", "log_prob": -13.03981637954712}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -154.84229117631912}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -152.2685718536377}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -28.508532404899597}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -28.34766948223114}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -143.56518357992172}, {"text": "val * val", "log_prob": -12.945923209190369}, {"text": "val + val", "log_prob": -13.03981637954712}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -133.64097505807877}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -149.04842299222946}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -137.43815112113953}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -133.9367332458496}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -133.57290887832642}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -61.79376047849655}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -142.66394478082657}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -35.92526817321777}, {"text": "val + val", "log_prob": -13.03981637954712}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -131.28927832841873}, {"text": "( val )", "log_prob": -12.023423433303833}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -140.15346282720566}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -30.17989706993103}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -143.27312874794006}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -135.6239711046219}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -142.33852511644363}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -134.0648363828659}, {"text": "val * val", "log_prob": -12.945923209190369}, {"text": "( val )", "log_prob": -12.023423433303833}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -119.222012758255}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -22.03373420238495}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -134.898397564888}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -47.989028453826904}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -27.749218583106995}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -138.73279744386673}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -142.60352820158005}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -148.577879011631}, {"text": "if not cond then val else val + ( val )", "log_prob": -23.356640458106995}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -88.81968677043915}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -126.03735476732254}, {"text": "val", "log_prob": -9.135708212852478}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -137.78889673948288}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -26.349738895893097}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -33.60495561361313}, {"text": "( val )", "log_prob": -12.023423433303833}]}, "epoch_10.pt": {"generated_sequences": ["val ) * ( val ) else if cond then ( val ) else val ) else if cond then ( if cond and cond and not cond then if cond then if not cond and not not cond and cond then val else ( val else ( ( val ) else if cond and not cond then ( val * ( val * val ) else val ) + val ) ) else ( if cond and cond then if not not not cond and cond and cond and cond and not not not cond val", "( if cond then ( ( ( val ) ) else val ) ) + if cond then ( if cond then val else val ) else val else ( ( val ) * ( ( val ) ) * val ) * val * val ) * ( val ) + if not cond then if cond then ( val ) else val * ( val ) * if cond then val else val * ( ( +", "val ) val + ( if cond then val else val else if cond then val * ( if not cond then ( ( if cond and cond and cond then val else val ) else val ) ) else ( ( val )", "if cond then val else if not not not not cond then val else if not cond then val else if not cond and cond then if cond then ( val ) else ( ( val + ( val ) else ( val ) ) + ( ( val + ( val ) ) ) ) + ( ( val )", "if not cond then val else val else val else ( ( val * if not cond then ( ( if not not cond then val else ( ( if cond then ( val ) ) ) else ( val ) + if cond and cond and cond and cond and cond then if not cond then if cond then val else val and cond then val else (", "val * if cond then val else ( val + val + ( if not cond then ( if not cond and cond and cond and not cond then if not not cond then if not not not not not cond then ( ( ( val ) ) ) else if not cond and not cond then val else if not not cond then ( val ) else ( val ) else ( ( if cond then val * val else val ) )", "if not not not cond and cond then val else val * ( val ) ) * val * val * if cond then ( if cond then val else if not not cond and cond then val else val + val", "val ) val )", "( if cond then val else val else ( ( ( if not cond then val else ( if cond and cond and cond then ( ( if cond then val else ( val else val ) * val ) ) ) ) ) + ( if not cond then if not cond and cond and not cond then val else ( val * val + if cond and cond and cond then if not cond then val else val ) else ( val * ( (", "if cond then if cond and cond then val else ( val else val * if not not cond and cond then ( val ) else ( if cond then val else ( val * if cond then (", "( if cond then val else ( val else val + if cond then ( if cond then if cond and not not cond then val else val ) else val else ( val ) else ( ( val ) else ( if not cond then if not cond then if cond and cond then ( if cond then if cond and not not cond then ( if cond then ( ( val ) else val * if not cond then val * if cond then val else if cond then if cond then val else ( val * ( ( ( ( ( val +", "val if not cond and cond then val else val ) else ( ( ( val ) else val ) ) else val * val", "if cond and cond then val else if not cond then ( ( val ) * if cond then val else if cond then ( if cond and cond then ( ( val * ( ( ( ( ( val else if cond then if cond then if cond and cond and not cond then val else ( if not cond then val * if cond and cond then val else ( val + val ) ) else ( if cond then ( if cond then val else if not not", "( ( val + if cond and cond then if cond then ( ( val ) * ( ( val ) else val * ( if not not cond and not cond then if cond then val else val ) else val else ( ( val * ( val ) + ( if cond then if cond then if not cond then if cond and cond then if cond", "val val + ( ( if not cond and not not cond and cond then ( val ) else val * if not cond then val else ( if not cond then if not cond then val else if cond and not not cond and cond and not cond and not cond and cond then val else ( ( val ) ) else ( if not cond and not cond and cond and cond and cond then ( if not cond then val else val else ( ( if not cond then if cond then if cond then if not not cond and cond then ( val ) * if not cond then if not cond then val ) else val * if not not not ( if cond then ( val ) else ( if not not not cond then val ) else if not cond then ( val else if cond then val + val else val ) else val ) else ( val + val ) ) * ( ( if cond and cond and not not cond and cond and not cond then if cond and cond then val else ( ( if not cond then if cond and cond and cond then val else ( val * val ) else val + ( ( val ) ) * val ) else if cond then ( ( val val * ( ( if cond then val * val * val", "val ) ) ) else if not cond and cond and not not cond and cond and cond and cond and cond and cond then ( if cond then val else ( ( ( ( ( val ) + val ) else ( ( if cond then ( val ) ) else val ) * if not cond then val else val else val else val ) * ( val ) else val else if not cond then if not not cond and not cond then ( if cond and not not not cond and cond and cond and val * if not cond and cond and cond then ( ( ( if cond and cond then ( ( if cond and cond then ( val ) else ( val * ( val + val ) * ( ( if cond then ( val ) else if not not not cond and not not cond and cond and cond and cond and not cond and not not cond and cond and cond and cond and cond then ( ( ( if cond and cond and cond then val else ( val * val ) ) ) ) ) ) ) ) else ( if not ( val * if cond and not cond then ( if cond and cond then val * val else if cond then if not cond then if not cond and cond then ( ( ( if cond then ( ( val ) else", "( val + if cond then ( val else val ( if cond and cond then if cond then if cond then val else ( val + val ) else if cond then val else ( if not cond then if cond then if not cond and not cond then val else if cond and cond then val else if cond and cond and cond then if cond then val else val else val else val ) else val + val )", "if cond then val else ( ( val ) ) * val ) ) + if cond and not cond and cond then val else if cond then val else if cond then ( val else if not cond then ( if cond then val else if cond and cond then if cond and cond and not cond and not cond then ( ( if cond then val + val + ( if cond and cond then if cond then ( val else if not cond then val else val * if cond and cond and not not not not cond and cond and not cond", "val + if cond then if not not cond then ( val ) else ( if not cond then val ) else if not cond then val else val ) else val", "val ) ( val + if not not cond and cond and cond and cond then ( val ) * ( val ) else ( if cond then if not not not cond then val else val else if cond and cond then val else ( if cond then if cond and not not not cond and cond and cond and cond and cond then if not not cond and cond then val else ( ( val * ( ( val * if not not not not cond then if not not cond then ( ( if not not cond then ( val ) else ( if cond and cond then val + if cond then ( if not cond then", "val ) val * ( val ) ) else ( val * ( if cond then ( val ) else val + ( val else val ) ) ) + val * ( ( val * if not not cond and cond then if cond then val else ( if not cond then val else val ) else val * val ) else ( if not cond and not not not cond and", "val else ( if cond then ( val * val * val * val * val ) ) * val * if not cond then ( ( ( ( ( if cond then if cond then val else ( if cond then val else if cond then ( ( if cond then val else val else if cond then val else val * val", "val ) else val else ( val + val ) ) else ( ( ( ( if not cond then val else val", "val * val * ( if cond and cond then val else val * if cond then val else if cond and cond then ( ( if cond then val else val * ( val ) else val ) ) ) * ( if not cond then if cond and cond then val else val ) else val )", "if cond then if not cond then ( val ) else ( if cond then val else ( val + ( if not cond and not cond and cond and not cond then if cond then ( if cond and cond and not cond and cond then val else val else val else ( ( val ) + ( if cond then ( val ) else val ) else ( val ) ) ) ) * val * ( ( ( ( ( val ) ) ) * if cond then ( if cond then", "if cond then if cond then val else if cond then if cond then ( val ( val )", "( if cond then ( if not not cond and cond and not cond and not cond then ( val ) else val ) else if cond and cond then val else ( val ) * if cond then if not cond then", "val ) ) * if cond then ( ( ( if not not not cond then val else val else if cond then val else ( if cond then if cond and not cond then val else val else if val * ( val * val", "val + val ) + if cond then val else ( ( ( val ) ) ) ) ) ) ) + if cond and cond then if cond then val else if cond and cond then ( ( ( ( if not cond then val else val ) else ( ( ( if cond then val * if cond then val else ( val * ( val * ( val * val val ) * val + if cond then ( if cond and not not cond and cond then ( if not cond and cond then ( ( val ) else ( val else val * ( val + val ) else if cond then val * ( val ) ) * val ) )", "val val * val ) if cond then if cond then val else ( val + val + ( if cond then ( if cond then ( ( ( ( if cond then val else ( ( if not not not not cond then val else ( if cond then then ( val ) else and cond then ( val ) + val ) ) * if cond and cond then ( if not cond then if cond and cond and", "if cond then ( ( ( if cond then val else ( ( if not cond then if cond then ( val ) else ( if cond then val else if cond then val else if not cond then if not cond then ( ( if cond", "if not cond then if cond then ( ( val + ( if not cond then val else if cond then if not cond then val else ( if cond then if cond then if cond then val else ( ( val else ( val ) ) ) ) else ( ( val ) ) else val ) + ( val + ( ( ( if not cond then val else if cond and cond then val else ( val", "val ) + if cond and cond then if not cond then val else if cond then val else val else ( if cond then ( if cond then val else if not not cond and cond then val else ( ( if cond then ( val ) else ( if cond", "val val * ( val * if not cond and cond then ( ( if not cond then val else val ) ) ) else val + ( val ) + ( val ) ) ) else val * val * val ) else ( ( val * val * ( ( ( if cond then if cond then ( ( ( ( val ) ) else val ) ) ) * if not cond and cond and not not cond and cond and cond and cond and cond then val else ( if not cond and cond then val )", "( if not cond and cond and cond and cond then ( val + if not not not cond then val else val * ( if cond and cond and not cond and not cond then if cond then ( val else val ) else val * ( ( ( if cond then ( ( ( if cond then if cond then ( if cond then val else", "( val ) else if cond then ( if cond then if cond if not cond and cond and cond and not cond and cond and cond and not not cond and not cond and not not cond then ( ( if cond then val else if not cond and cond then val else ( if cond and cond then val else ( if cond then ( val + val * ( ( ( ( if not cond then val ) ) ) else val ) ) ) else ( val ) else val * val ) ) + val * val + ( val * ( val", "( val * val * if not not ( val * ( val ) else val + val + ( val + val ) else val + ( val + if cond then ( val else ( ( if cond and not not cond then ( ( if cond then val else if cond and cond and cond then if cond and cond and not cond then ( val else val * ( val else val ) ) ) else val + if cond and cond and cond and cond then val else ( val * ( ( val * if cond then ( val ) ) else val ) ) + if not not not cond and cond then val else ( val * val * val * ( ( val ) ) ) ) if cond then ( ( if cond then val else val else ( if not cond then ( ( val * ( if cond then val + ( val * if cond then val else ( if cond then ( val ) else val ) ) ) else ( val * ( ( if cond then if cond then if cond then val else if cond then val else val else val else ( ( ( val ) * ( ( if cond then if cond then val else ( ( ( if not cond then ( val + if cond then ( ( if cond then val ) + ( ( (", "val ) ( if cond then ( ( ( ( if cond then if cond then if cond and cond then val else val ) else if cond then ( val else if cond then if cond then if cond then val else ( val else ( ( val ) ) ) ) * val * ( if not cond and cond then ( if cond then val else val else ( if cond then ( val else ( if cond then ( ( if cond then val else ( if not cond then if cond then if cond then ( ( val ) else if cond then if cond then if cond then val else if cond then ( ( val + if not cond then ( val ) + ( if not not cond then val * ( if cond and not cond then val else if cond and cond then ( val else ( ( val + if not cond then ( val else val ) else if cond then ( ( val ) ) ) else val ) ) ) + val + if cond and cond then ( if cond and cond then val ) else ( val ) else ( ( if cond then ( ( if cond then if cond then val else val else val ) ) else val ) ) * ( if cond then if cond then ( ( val * val * val else if cond", "val val + val else if cond and cond and cond and not cond then ( val )", "val ) * val if cond then val else ( if cond then if cond then val else val * ( ( ( if cond and cond and not cond and not not cond then if cond and cond and cond and cond then if cond and cond and cond then val else val else val * val ) else if not cond then ( val else val ) ) else val ) + ( if cond and cond then val else ( ( ( ( if not cond then val else ( val + ( ( val ) * ( if not cond then if cond then if val else ( ( val + ( val else val ) * ( ( ( ( if cond and not cond then val else val ) ) * val ) + ( ( val * if cond then ( ( ( val ) ) ) ) ) else val + if cond then if cond then ( if cond then ( val ) else val ) else val ) ) else if cond then ( ( ( ( ( val ) + val * val +", "val ) val ( if cond then val else ( val + ( ( val + if cond then if not cond and cond then ( ( ( ( ( val ) + if cond then if cond then ( ( ( if cond then ( ( if not not cond then if not not cond then ( val + if cond and not not cond and cond and cond and not not not cond then val else if", "if cond and cond then if cond then if cond then if cond then ( if cond then ( val else ( ( ( val + val * ( val * if not cond then val * val else if cond and not not cond and cond and not cond then if cond and cond and not cond and cond and cond and not not not cond and cond and and not cond and cond then if cond then ( if cond then if cond then val else val else if cond then ( if not not not not not cond then ( val * if cond then val else ( val ) else ( ( ( val + if cond then val * if cond then if cond then if cond then if not not cond and cond then ( if not not cond and cond then if cond then if cond and cond and not cond then if cond and cond then val else ( val ) else ( if cond and cond then if not not cond and cond and cond then val else val * if not not cond then val else ( ( if cond and cond and cond and cond and cond then val else val else else ( if cond and not cond and not cond then if not cond then ( val + if not not not not cond then val * val ) else val else val + val if", "if cond then ( if cond then val else ( val ) * ( if not cond then if cond and cond and not cond and not not cond and not cond then ( ( ( ( if not cond then val else ( val * ( ( val ) ) ) * ( if cond then val ) ) * val else if cond then ( if not not cond then ( ( if cond and cond then", "( ( val ) + ( val ) val * ( if cond then if cond then val else val ) else ( val ) + ( val * val * ( ( val * ( val ) + if not cond and cond then if cond then val else ( if not cond then ( if not not not cond then val else if not cond and cond then ( if not cond then val else if cond then if cond and cond and not cond and cond then val else val else val + val ) * val else if cond then ( val ) ) * ( ( if cond and cond and not not cond and cond and not not cond and cond then val else val * ( ( ( ( ( ( val + if cond then val ) * ( val * if cond and cond then val else val ) + val ) ) ) * val * ( if not cond then val ) ) ) * ( ( val * val + val * val ( ( if cond then ( val * if cond ) else val ) * if cond then val else val * val else val ) )", "if not cond then val else val * val else val * ( if cond then val else ( val * val * if not cond then ( val ) * ( val + ( val ) else ( val ) ) + ( if not cond then if cond then val else if cond then (", "val val * ( val cond then ( if cond and cond and cond and cond and not cond val else if cond then ( if cond and not cond and cond then ( ( ( ( ( if cond and cond then ( if cond then val else ( if cond then ( val *", "val * val * ( if not not cond and not not cond and not cond and cond and cond then val else if cond and cond then val else val + val * ( ( if cond then if cond then if not cond then ( ( if cond and not cond and cond then if cond then val else if cond then val else val else if not not cond", "val ( if cond then val else ( if not cond and cond and cond and cond and cond then if cond and not cond and cond then if cond and not cond then val else ( ( val ) else val ) + if not cond and cond and cond and cond and not not cond then val * val * if cond then ( ( if cond then ( ( val * ( val ) ) else val ) ) * ( ( if not not cond then if cond and not cond and cond and not", "if cond then if val else if not cond then val else ( ( val ) ) else val + if cond then val ) ) * ( ( ( val + if not not not not cond and cond then val else val ) else ( val * if cond then val else val ) else val else val * ( if cond then val * ( val * ( val * ( ( ( ( val + val ) ) ) ) * val ) * ( val + if cond then ( val ) else", "( ( val ) ) else if cond and not cond then if cond and not cond then ( val ) else if cond then if cond and cond then val else if cond then val else val ) else if not cond then ( val"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "val", "log_prob": -6.005712985992432}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -28.491857602261007}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -21.58482074737549}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -87.86296306550503}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -95.15598313324153}, {"text": "( val )", "log_prob": -7.831739574670792}, {"text": "val * val", "log_prob": -7.727946162223816}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -16.8450795263052}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -24.804603308439255}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -92.84051105752587}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -92.41033978201449}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -80.37665961496532}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val * val * val", "log_prob": -9.523079514503479}, {"text": "val * val", "log_prob": -7.727946162223816}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -14.150155229493976}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -89.67315268144011}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -93.1137246247381}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -87.50347512960434}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -100.13584429398179}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -54.40552168339491}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -94.35654688067734}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -99.60572561994195}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -69.20287984795868}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -91.79637040011585}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -84.70249149948359}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if not cond and cond then val else val", "log_prob": -12.354205876588821}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -91.73764481022954}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -87.64131672121584}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -48.19392659235746}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -79.35201016999781}, {"text": "( val )", "log_prob": -7.831739574670792}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if not not cond then val else val", "log_prob": -12.09777993708849}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -34.384061174467206}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -98.21982354670763}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -16.89571427181363}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -100.79302693903446}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val + val", "log_prob": -8.327137053012848}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -106.04500338435173}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -105.16677985340357}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -18.902898589149117}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -18.47331145592034}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -96.67419962398708}, {"text": "val * val", "log_prob": -7.727946162223816}, {"text": "val + val", "log_prob": -8.327137053012848}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -86.48347622156143}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -99.60825241357088}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -92.25396664999425}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -88.35310924611986}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -87.21301132254303}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -41.59687393158674}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -89.86967654153705}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -24.720880514010787}, {"text": "val + val", "log_prob": -8.327137053012848}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -92.12692797370255}, {"text": "( val )", "log_prob": -7.831739574670792}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -93.78641229122877}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -20.501779024489224}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -96.78900126367807}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -90.75693291798234}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -96.59444766305387}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -86.46721114963293}, {"text": "val * val", "log_prob": -7.727946162223816}, {"text": "( val )", "log_prob": -7.831739574670792}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -72.1533811558038}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -14.731730949133635}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -89.66625637561083}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -31.080137949436903}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -17.14943601656705}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -94.08359449729323}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -91.60619232058525}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -98.3608527444303}, {"text": "if not cond then val else val + ( val )", "log_prob": -16.154761269688606}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -60.39864981174469}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -80.60581851564348}, {"text": "val", "log_prob": -6.005712985992432}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -91.98230532743037}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -17.33128632977605}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -20.479836743324995}, {"text": "( val )", "log_prob": -7.831739574670792}]}, "epoch_100.pt": {"generated_sequences": ["val cond and not cond and not cond and cond and cond then if cond then val else if not cond and not cond and cond then ( if not cond and not not cond and not cond and not cond and cond and cond and cond and cond and not cond then val else ( ( val ) ) else val else ( if not not not not cond and not not cond and cond and not cond and cond and cond then if cond then if cond and cond then ( if not cond then val else if cond and", "if cond then ( ( val * if not not cond and cond and not cond and cond then if not cond and not cond and not cond and cond then val else ( val ) else val * val + ( val ) ) else ( if cond then val else val + val ) + ( if not not not not cond then if cond then val else if not cond and cond and cond then ( if cond then val else if cond and cond then ( val ) else val else ( if not not cond and cond and cond and cond and", "val * val * val * val + ( val )", "val + val", "val + ( ( if not cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then val else ( ( val * val * if not cond and not not cond and not not not cond and cond and not not not cond and cond and cond and cond and not cond and cond and not cond then val else if not cond and cond then ( ( val * val + ( ( if not cond then val else", "( if not cond then val else val ) ) + if not not cond and not cond then val else val * ( val ) * val )", "val + if cond then ( val ) else ( ( ( val ) ) + if cond then if cond then ( ( ( val + ( if not not cond then if cond then val else ( val ) * ( val ) + ( val * ( val + if cond then val else ( val ) ) + val ) ) + ( val * val ) ) * ( ( ( val ) ) + if cond then val else val * val ) ) else val + val + ( val ) )", "if not cond and cond and cond and not cond then val else ( val + val + ( ( ( ( val ) * if cond then val else val ) ) ) )", "( val ) + if not cond then val else ( ( if not cond and cond and cond and not not cond and not cond and cond and not not cond and not cond and cond and cond and cond then if not cond then if not cond then val else if not cond and not cond and not cond and not cond and not cond and cond then val else val else if cond then val else val else ( if not cond and not cond and cond then ( val + if not cond then ( ( ( ( val + if cond", "( if cond then val else ( val ) )", "val * ( ( ( val ) ) * val * val + val ) * ( ( if cond then ( if cond then if not cond then val else ( val ) else if not cond then ( val ) else val * if cond then val else val ) ) ) * ( if cond and cond then ( val ) else val + if not cond and cond then val else if cond then val else if cond then ( val * val * ( val ) + val ) else", "val * ( val * ( ( if cond then if cond and cond and cond and not cond and cond then val else val else val * val * ( ( val * if cond then if cond and cond and cond and not cond and cond then if not not cond then ( val ) else val else val else ( if cond and not cond then val else val else ( if cond then val else val + ( val ) ) * if cond then val", "( val ) + val * val", "val + val + val", "( ( val ) )", "( if not cond and cond and not cond and not cond and cond cond and cond and cond and cond then val else val + val ) * val + ( val )", "if cond then val else if cond then val else ( val )", "( val + val + if cond then ( if not cond then val else val + val ) )", "if cond and cond then ( val ) else if not cond and cond and cond and cond and cond and cond then val else val", "val * val", "val", "if not cond then ( if cond then val else if cond then val else ( if cond then if cond and cond and not cond and not not cond and not cond and cond and cond and cond and not not cond and cond and cond then val else if not cond and cond and cond and cond then val else ( val * val ) + val + val + ( ( val ) * val + ( ( if cond then val else val * if not cond and cond and not cond and not cond and cond and", "( ( ( val * ( ( if not cond and cond then val else if not cond then val else val ) ) + val ) )", "val + if not cond and not cond and cond and cond and cond then val else ( ( val + val ) ) * ( val )", "( val )", "if not cond and cond then ( val + ( val * ( val ) + val * if not cond and cond and cond then val else val * ( val ) * val * val )", "val * if not not cond then ( val ) else val * val + val )", "val + if cond and cond then if cond then val else val else ( val )", "val + if cond then ( val + val ) else val + val", "( val )", "val", "if cond then ( val ) else ( val ) else val else ( val )", "( ( ( val * ( if not cond then val else ( ( val ) ) ) + if not cond then ( ( val + ( val * val ) ) + ( val * if cond then if cond and cond then ( ( val * ( if cond then ( if cond then val else val else val ) else ( val * if not not cond and cond and not cond and cond and cond and cond and cond and cond and not not cond and", "if cond then val else val * val * val * val * ( val * if cond and not not cond then val else val * if cond then if cond then ( val ) else val else if cond then if not cond and cond then if not cond then ( val + if cond then val else if cond then val else val * ( val ) * ( ( if cond then ( if not cond and cond and cond then if cond then if cond then val else if not cond then val else ( if cond", "val * val", "val", "val * val + ( val ) + val ) + val ) * val + ( val )", "val", "( val )", "val", "( val )", "val * ( ( val ) + if cond then if not not cond and cond and cond then ( val * val + val ) else if cond then if not not not cond and cond and cond and cond and not cond and cond and cond and not cond and cond then val else ( if cond and not cond and not cond then if cond then if not cond then val else val else ( ( if not not not cond and not cond then val else val ) ) else ( ( val ) ) * val + val ) * ( if not not cond then ( ( val", "val", "( if cond and cond and cond and cond then val else ( val ) * if cond and cond and cond and cond then ( if cond then ( (", "val", "( if cond then val else val ) + if not not cond and cond then if cond then val else val else val ) + ( val * ( val * if cond then val else val ) * if cond then ( ( ( val ) ) ) * if not cond then ( if cond then val else if cond and cond and cond and not cond and cond and cond and cond then val else ( ( val * ( val * ( ( val ) ) + val + val ) + val * val * if cond and", "val + val * if not cond and cond then val else val", "( ( ( ( val * if not cond then val else val + val + val ) ) * val ) else val * ( ( val * val ) ) * if cond then val else ( val ) ) + val + ( ( if cond then ( ( ( val ) * ( ( ( val ) ) + if cond and cond then if not not cond and cond then if not cond and not cond then ( ( if cond then ( if cond then if cond then val else if cond then ( if not cond then ( ( val ) )", "val * val * ( val ) * val ) * ( ( val ) ) )", "val"], "accuracy": 0.54, "train_overlap": 0.38, "res": [{"text": "val", "log_prob": -2.3527609687298536}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -22.550330012774793}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -16.46016786340624}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -77.55106316343881}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -87.50634010636713}, {"text": "( val )", "log_prob": -3.8868752897251397}, {"text": "val * val", "log_prob": -4.278757976833731}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -10.95583547197748}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -19.74642670911271}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -85.70368180255173}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.6718848348828}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -75.19526308419881}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val * val * val", "log_prob": -6.430764615477528}, {"text": "val * val", "log_prob": -4.278757976833731}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.409142222895753}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -79.89046250021784}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -87.1210521098692}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -80.66320893878583}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -92.0376028228784}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -46.85859748191433}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -85.3854690429871}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.9840474446537}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -64.91880627875798}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -86.30717823031591}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.06422987516271}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if not cond and cond then val else val", "log_prob": -8.21212434861809}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -86.61766688516946}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -80.68068384262733}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -41.8530842512846}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -73.32724264659919}, {"text": "( val )", "log_prob": -3.8868752897251397}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if not not cond then val else val", "log_prob": -8.498021053266712}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -29.30811797239585}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -92.00628684309777}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -11.855559646792244}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -92.67789966543205}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val + val", "log_prob": -4.284119367832318}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -98.67959107307252}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -97.73579476532177}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.069099155953154}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -13.541412822320126}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -90.12939968478167}, {"text": "val * val", "log_prob": -4.278757976833731}, {"text": "val + val", "log_prob": -4.284119367832318}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -81.70873756762012}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -94.3411381302285}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.91036399255972}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -83.27286878338782}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -82.59655662876321}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -34.149891548615415}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -83.70069452203461}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -19.18475257686805}, {"text": "val + val", "log_prob": -4.284119367832318}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -78.94419228524202}, {"text": "( val )", "log_prob": -3.8868752897251397}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -84.55023128580069}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.342238374927547}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -88.10573406511685}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -86.10017331142444}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -86.08306876604911}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.8416387156467}, {"text": "val * val", "log_prob": -4.278757976833731}, {"text": "( val )", "log_prob": -3.8868752897251397}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -61.6430001250701}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.052336900087539}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -83.53823095920961}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -26.617656833434012}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -13.420139925263356}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -84.21275119681377}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -86.73064264643472}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -89.86308288120199}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.182187613565475}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -50.48997592338128}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -72.85007120238151}, {"text": "val", "log_prob": -2.3527609687298536}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -84.68207312887534}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -13.456880482903216}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.042711203568615}, {"text": "( val )", "log_prob": -3.8868752897251397}]}, "epoch_105.pt": {"generated_sequences": ["( ( if cond then ( ( val * val * val + ( val + val ) ) else val ) * val )", "( if not not cond then ( val ) else val + ( val ) * val + val * ( ( ( val * val ) * ( if cond then ( ( ( val + val * if not cond and cond and cond then ( val + val ) else ( if cond then val else val ) * val ) * if cond then if cond then val else val else val + ( val ) + ( val ) ) * if cond then val else ( val ) ) ) * val * if cond then", "if cond and cond then if cond then val else ( val * val )", "if cond and cond and cond and cond and cond and cond then if cond then val else if cond then val else ( if cond and cond then if cond then val else val else if cond then val else ( val ) + val ) else if cond then ( if not cond then ( if not cond and cond and cond and not cond and cond then ( if not not cond and cond then if not cond and not cond then if cond and cond then if not cond then val else val else", "if not cond and cond then ( ( val * val ) + if cond then ( ( val ) ) else ( ( ( val * val ) ) * if cond then val else val * ( ( val * ( if cond then val else ( if cond then val else val ) * if not not not not cond and cond and cond and not not cond and not cond and cond and not cond and not cond and cond then ( val ) else ( if not not cond then if not", "( if not cond then ( val + ( if cond and cond and cond then val else val ) )", "val", "( ( val + ( val ) )", "if cond and cond then val else val * ( if cond then val else val )", "val * ( val )", "( val )", "if cond then val else val", "( if cond then val else val ) + if cond and not not not cond and not cond then if not not cond then if cond and not not cond and cond and not not cond then val else val else val else val else ( if not cond and not not cond and not cond and cond and cond and not not cond and cond and not not cond and cond and cond and cond and not not cond then if cond then val else if cond then if cond then val else val else", "val", "val", "val", "( ( ( if cond then if not cond then val else val else ( ( ( val + val + if cond then if cond and cond then ( if cond then if cond then if cond then ( if cond then ( if cond then ( ( val * ( ( val ) ) * val ) ) else if cond and cond and not not not cond and cond then ( ( val * val ) ) * if not cond then if not cond then val else val else val else", "( ( val ) + val * ( if not cond then ( ( if not cond then if not cond then val else val else if cond and not cond and not cond and cond and not cond and cond and cond and cond and cond and cond and not cond and cond then val else ( val ) ) else if not cond then ( ( if cond then ( ( ( if not cond then ( if not cond then val else val ) else if cond then ( val )", "val", "if not cond and not cond then ( if not cond and cond then ( if cond then if not not cond and not cond and cond then val else val else val ) else if not cond then if cond then ( ( ( if cond then if cond then if cond and cond then val else val else val ) else val else if not not cond and cond then val else val ) ) else val else if not not cond then if cond then val else val else val else if cond then", "val val ( ( val + val * if not not not not cond and cond and not cond then if cond then val else val else val * val", "if cond and cond and cond then ( val + if cond then if cond and cond then if not cond and cond and not cond then if not not not not cond then if cond then val else ( if cond then val else if not not cond then ( ( if not not not cond then if cond then if not not cond then if cond then val else ( val ) else ( val + val * val + ( if cond and cond then val else ( if cond then val else val )", "val", "val * ( val )", "( val * ( if cond then ( val * if not cond and not not not cond then val else ( val )", "val + if cond then ( if cond and cond then if cond then if cond then ( val ) else val else ( ( if not cond then val else val * if cond then val else val ) + val ) ) else if cond then if cond then val else ( if cond then ( val ) else if cond then val else val ) else ( val * val ) * if not not cond and not not cond and cond and cond and cond then ( if cond then val else if", "( if cond and cond and cond then val else if not cond and cond then ( if cond and cond then ( if not cond and cond then ( if cond and cond and cond and not not cond then val else val ) else val else if cond then val else if cond then if not cond and cond then val else ( val ) else ( if not not cond and not cond and cond then if cond then if cond and not not cond then ( val ) else ( val * val ) else val else val else if cond then", "val * val", "( if not cond then ( if not cond then val else ( ( val * val * ( val ) * ( if cond and cond then val else ( val ) ) ) ) else val else val ) else val else if cond then ( val + ( if cond then val else val ) ) ) * ( ( if cond then val else ( ( ( if not cond then if cond then val else val else if cond then val else val ) * ( val + ( if", "val", "( ( ( val * if not not not cond and cond then if not cond then val else ( if not cond then ( ( val + val ) else if cond then if cond then if cond then ( ( val * val * if not cond then val else ( val ) ) ) else if cond then val else val else ( val ) else if cond then ( val ) else val * val + ( val * val ) ) ) else if cond and cond then ( if cond then if cond then", "if not cond and cond and cond and cond and cond then val else val", "val", "( if not cond then ( ( val ) + val ) else if cond then ( val * if cond then if cond and cond and cond then if cond then val else if cond and cond and cond then ( val + val ) else val else if cond then if not cond then ( if cond then ( val * ( if cond and cond then if cond then if not cond then if not not cond and cond and cond then val else val else ( ( ( val + if if cond and not cond and", "if cond then if cond and cond then val else ( if cond then val else val + val )", "val", "( if cond then ( if cond and not cond then val else ( val ) )", "( val )", "val + ( val ) * ( if not cond then if cond then ( val ) else ( val ) else ( val )", "val", "( ( val )", "( ( ( if cond then val else ( if cond and cond then ( val ) else ( val * val * if not cond then if cond and not cond then if cond then val else val else ( ( val + if cond then ( if cond and cond and cond then val else if cond then val else if cond then ( ( val ) ) else val + ( ( if not cond and cond and cond then val else ( val * if cond and cond then val else", "( if cond then if cond and cond then if cond then val else if cond then if not not cond then val else val else if not not cond and cond then val else val else if not cond and not not not not not cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and not cond and not cond and not cond and not not cond and cond and cond and not not cond and cond and not not cond and cond and cond then if cond then if cond then val else", "( ( val ) + if cond then val else val * ( ( val ) )", "if cond then if cond then val else ( if cond then val else ( ( val ) + val ) * val )", "val", "if cond then if cond and cond and not cond and cond and not cond and not not not cond then ( ( val ) ) else val", "( if cond then if cond and cond and cond and cond then if cond then if cond and cond then val else if cond then val else val else ( val ) else val else ( ( val + val )", "val + ( ( ( ( val ) ) * val )", "if cond then val else if not not cond and not cond and cond and cond then if cond and cond then if not cond then ( if not cond then val else val ) else if not cond and not not not cond and cond then ( val * val ) else ( ( val ) ) + if not cond then if cond then if cond then ( if cond then val else val + if not not not cond then ( if cond then val else ( val ) * if cond then if cond then if cond"], "accuracy": 0.38, "train_overlap": 0.34, "res": [{"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -23.223624911581283}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -16.396522700597416}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -73.5085889355978}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -88.01682423331658}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.308707608288387}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -17.963249887674465}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -83.16494473998318}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.43800260440912}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -71.04595047060866}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * val * val", "log_prob": -7.067684668232687}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.391316800669301}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -77.29380740883062}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -85.01935267372755}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -78.93811053666286}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -86.22281993585057}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -46.33238489885116}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -82.96947494093911}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.23428408714244}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -63.98870073336002}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.0642575895763}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.40720424609026}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond and cond then val else val", "log_prob": -7.714888474845793}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -85.38970710229478}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -80.66113269305788}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -41.95889242913108}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -72.50578305893578}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not not cond then val else val", "log_prob": -7.592912528547458}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -29.436634839337785}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -89.41146617184859}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -12.814180250250502}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -92.43908705853391}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -94.02715863945195}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -96.80605832772562}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -15.970541753224097}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.967181427957257}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -89.69434699200792}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -79.11034474574262}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -92.282597073121}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -86.44018486322602}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -82.21155385189923}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -79.84464383657905}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -32.90553440662916}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -80.3366523849545}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -18.610387486522086}, {"text": "val + val", "log_prob": -4.490218682214618}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -80.66996572585776}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -83.5634842030704}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -14.938390230556251}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -87.15989666996757}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -84.74750304804184}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -86.48682412289781}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -79.22766747552669}, {"text": "val * val", "log_prob": -4.6047844854183495}, {"text": "( val )", "log_prob": -3.9757382022216916}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -63.11643258485128}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -9.243600255285855}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -79.29615534626646}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -23.973900354874786}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -13.92901367705781}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -81.9258986908535}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -85.17492703383323}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -88.31521834852174}, {"text": "if not cond then val else val + ( val )", "log_prob": -10.277362996333977}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -53.896910114533966}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -73.78409942128928}, {"text": "val", "log_prob": -2.1250440515577793}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -82.63444555399474}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.855755106749712}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -15.509006715277792}, {"text": "( val )", "log_prob": -3.9757382022216916}]}, "epoch_15.pt": {"generated_sequences": ["( val ) val val", "val + ( ( if cond then ( val", "( if cond then val else val ( ( ( val ) ) + ( if not cond then if cond then ( if cond then if not cond and cond and cond then ( val ) else ( if cond then val ) else ( if cond then if cond then ( ( ( val + ( ( if cond then val else ( if not cond then val else if not cond then ( val * val * ( val ) ) ) else ( val * val * val * ( val ) + val ) ) ) + ( if cond then ( ( if not not not cond then ( val ) else val * val * ( ( if", "( if cond then val else val * val val val + ( if cond and cond then if not not cond then ( if not not cond then val else val * if cond then val else ( ( if cond and cond then val else val + val ) ) else val + val else val + ( ( if cond then ( val ) else val * if cond then val else val ) else if cond then ( ( if not cond then ( ( ( if cond then val else ( ( val ) * if cond then ( val + val * if cond and cond and then val + ( if not cond and cond and cond", "( val ) ( ( ( if cond and cond and cond and cond then if not cond and cond then val else if not cond and not cond and cond then ( val ) else ( val * if not cond then ( val * ( if cond then val else val ) else if not cond then ( val * if cond then val else if cond then val else ( if not not cond then val * val else if cond then if cond and cond and cond then", "val ) ( if not cond and cond then val else ( val ) * val + val )", "( ( if cond then if cond and cond then val else val", "( val * if cond and not cond and cond then val else val", "if cond then val )", "( ( if cond then ( ( ( if cond then if not cond and cond then val else if cond then if not not not cond and not cond and cond then ( val * ( val + ( val * ( val * if cond then val else val", "val ( ( val )", "val ( val ) * if not not cond and not cond and cond and not cond and cond and not not not cond and cond and cond and cond and not cond and cond and cond and cond and cond and cond then ( val ) else val + if cond then val else ( val ) + if not not cond then ( ( ( ( ( ( val ) + val * if not not cond then if cond then if cond and cond then if cond then val else val ) else if not cond then if cond then val else if not not", "( if cond then if not cond and cond then if not not cond then ( val ) ) else if not cond and cond then ( val * val + if cond then if not cond then val else if cond then if not not not cond then val else ( val ) else val ) * val + ( if not cond then ( val ) else ( if cond then val else val ) else if", "val ( val + val + val + if cond and cond then ( val * val ) else val + ( ( if cond then if cond then if cond then val else val else if cond then val else val else ( val ) ) * if cond then ( ( val", "if not cond and cond then if cond and cond then ( ( val + ( val ) * ( ( val + val ) else if not cond and cond then if cond then val else ( if cond then val else if not cond then (", "if not not cond then if not cond and not cond and cond and not cond and cond and not cond and not cond then ( val ) else val * if cond and cond and not cond then ( ( val + ( if cond then val else val ) * val else ( ( val * ( ( if", "val * if cond then ( ( if cond then val else val", "( if cond then ( val * if not cond and cond and not not cond and cond and cond then if cond and cond then if cond and cond then val else val else if cond then val * ( ( if not cond then if cond then val else val else", "val ( ( val ) * if not cond then ( val ) else val )", "val ) else if not not not cond then val else ( if cond and not not not cond and cond then val else val else if not cond then if not cond and not not not cond then val else val else if cond then ( ( val ) )", "val ( if cond then ( val * val ) else val ) else ( if not cond then val else ( if cond then val else ( ( val ) ) )", "val * val if not not not not not not not not cond and not cond and not not cond and not not not cond and cond and not not not cond and cond then ( ( if not not not not not not cond and cond then if not cond then val else val else if cond then val else val else val else if cond then ( val * ( val + val * val ) )", "if not not cond and cond then val else val * val * if cond and not not cond and cond then if cond then if cond and cond and cond then val else val else val else if not cond then val else val else if cond then ( val + val * ( ( if cond then val else ( ( if cond then if cond then if cond then if cond then if", "( val val * ( if cond then if not not cond and not cond then val else ( val ) else if cond then if cond then if not not cond then ( ( val ) + ( val )", "( ( val ) else if not not cond and not not not not cond and not cond then if cond and cond then val else val else val else val )", "( if cond then val else ( if cond then if not not not not cond and cond then ( ( val ) * if cond then val else", "if cond then val else val * if cond then val else ( ( val * if not cond then if cond and cond and cond and cond then val else", "if cond then if cond then val else val", "( val val val ( ( val ) * ( ( if not cond then ( val ) else if not cond and cond and not cond and cond then val else if cond then ( val ) else if not cond then if cond then val else val else val + val", "val ( val val * ( val ) ( if cond then val else val ) * if cond and cond then ( val + if not cond and cond and not cond and not not cond and cond and not cond then val else val ) else ( ( val ) * if not cond and cond and cond then val else val ) else if not cond then ( ( val ) else val )", "( val * if not cond and cond then ( val ) else if not cond then val else ( val + if cond and cond then ( if cond and not not not cond then ( val + ( ( if cond then val else val * val * ( val )", "val if not cond and cond and cond then val else ( val )", "val * if not cond and cond and cond then ( ( if cond and cond and cond and cond and cond and not cond and cond and not not", "val * val ( val * if cond then val else val * ( ( val ) )", "val * ( if cond and not cond and not cond and cond then val else if not not not cond then if cond then if not not cond and cond and cond and not not not cond and cond and not cond and not cond and cond then if", "( ( if cond then val else val * if cond then ( val ) ) else val * ( ( val ) * val ) * ( ( ( ( if not cond then ( val + if cond then if not cond then val else ( ( val * val ) + val if cond then if cond then if cond then if not cond then if not cond and not cond then val else if not cond then if not not cond and cond then val else val else val else val else if cond and cond then val else val else val else val", "val + val ( val + if cond then val else ( if not cond then val else val ) * if cond then if cond then val else ( ( ( if not not not not not cond and not cond and not not cond and cond and cond then ( ( val ) ) * val * val ) * if not not not cond then ( if cond and cond and cond then if cond then val else val else if ( ( val ) ) * ( val ) else ( val ) * val )", "val * ( if cond then val else if not cond then if", "val else val val ) * val ( val + ( val ) + val + if cond then val else ( ( if cond then val else val ) + if then val + ( val", "val if cond and cond and cond then ( if cond then ( ( if cond then val else ( if cond then val ) else ( if cond and cond then if not cond and cond then if cond then val else ( ( val * ( val * if cond then ( val ) else ( ( val * if cond then if not cond then val else ( val + if not not not cond then ( val ) else if cond then ( if not not cond and cond and cond and cond and cond and cond then if not cond and cond and cond and not cond then val else val ) else if not not cond then ( if", "if not not cond then ( val ) else if cond then if cond then if cond and not cond then val else ( ( ( val + ( if not cond then ( if cond and cond and not cond and cond and cond and not not cond and", "( if cond and cond then val else ( val * if not not not cond then ( if", "val + if cond then if not", "( if cond and cond then val else ( if cond then val else if cond and not cond then val else if not not cond then val else ( ( ( val ) ) else val", "if cond then val else ( if not cond then ( val )", "val * if cond then val else val * ( if cond then ( ( if cond then if not cond then ( if cond and cond then ( if cond then val else ( val + ( if cond and cond and cond then val else ( if not cond and not cond then if cond then val else (", "if cond and not cond then val else if not cond then ( val * val + if cond then if not not not cond then ( ( (", "val val ( val * val * val ) ) )", "val if cond then val else ( val ) else ( if cond and cond and cond then if not cond then val else if cond then ( ( ( val + if cond then val else ( ( val ) ) else if cond and cond and not not not cond and cond", "if cond and cond and not not not cond and not cond and cond then if cond and not not cond and cond and cond then val else val * if cond then val else val else val + val ) * ( if not cond and cond then ( ( ( ( val ) ) ) else ( if cond then ( ( if not cond then ( ("], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "val", "log_prob": -3.7657498717308044}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -27.71828766167164}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -20.25637691654265}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -83.47014174610376}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -94.1280922498554}, {"text": "( val )", "log_prob": -5.648064464330673}, {"text": "val * val", "log_prob": -5.953378692269325}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -15.406020447611809}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -21.755982391536236}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -88.8044821638614}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -90.78599057998508}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -79.16614332143217}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val * val * val", "log_prob": -8.466954067349434}, {"text": "val * val", "log_prob": -5.953378692269325}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -12.876811117865145}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -87.6598274903372}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -90.25379849784076}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -87.68950375169516}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -97.54590605013072}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -54.16387240309268}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -93.55993940122426}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -99.63703077938408}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -69.00399488583207}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -87.70908923633397}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -80.46745614334941}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if not cond and cond then val else val", "log_prob": -9.655017973855138}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -91.80656446423382}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -87.222983175423}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -48.48848569020629}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -76.71791322249919}, {"text": "( val )", "log_prob": -5.648064464330673}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if not not cond then val else val", "log_prob": -9.119392924010754}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -32.18652225565165}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -101.33996728993952}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.384970653802156}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -99.91329288482666}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val + val", "log_prob": -6.350108832120895}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -104.2536434084177}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -102.22173472307622}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.940461419522762}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -17.64103379100561}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -99.70944285113364}, {"text": "val * val", "log_prob": -5.953378692269325}, {"text": "val + val", "log_prob": -6.350108832120895}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -85.81572000868618}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -100.32005016505718}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -90.7190234893933}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -88.64952715486288}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -87.50636588223279}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -38.732856444548815}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -93.65705426968634}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -22.199777006171644}, {"text": "val + val", "log_prob": -6.350108832120895}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -92.7672054618597}, {"text": "( val )", "log_prob": -5.648064464330673}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -94.61255743075162}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.946955024264753}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -95.03612491115928}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -92.93500978406519}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -95.43730873428285}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -85.85320101305842}, {"text": "val * val", "log_prob": -5.953378692269325}, {"text": "( val )", "log_prob": -5.648064464330673}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -68.54812591895461}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -12.258458130061626}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -91.48310080263764}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -29.08199891075492}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -16.351805336773396}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -90.01558659505099}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -91.60314975678921}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -97.24123615212739}, {"text": "if not cond then val else val + ( val )", "log_prob": -12.705191995948553}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -60.26529624406248}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -79.07899007108063}, {"text": "val", "log_prob": -3.7657498717308044}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -92.26785678975284}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -16.60464371368289}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -18.520460304804146}, {"text": "( val )", "log_prob": -5.648064464330673}]}, "epoch_20.pt": {"generated_sequences": ["( val * val ) + if cond then if cond then val else val", "( val ) else if cond then ( if cond and cond and cond then ( if cond and cond and not cond then if cond and not cond and not cond and not not not cond and cond and not cond then if not not not cond and not cond and cond then val else val else ( ( val * val + ( if", "( val ) + ( ( val ) ) ) ) else val + val ) + if not cond then ( ( ( ( val ) ) else if cond and cond then val else val ) ) else ( val + val ) else if not cond then ( if cond and cond then val else if cond and not cond and not cond and not cond", "val * val * ( if cond then if cond and not not cond then ( if cond then if cond then val else val else if not cond then val else if cond and not cond then if cond and not not cond and cond then ( ( val * val ) else val * val * ( if not cond then ( if cond and not cond then ( val + ( ( ( ( ( ( ( ( val + val ) ) * val ) ) else val * val ) + if not cond", "( val )", "( val * if not cond then val else if cond then val else if cond then val else if not cond then if cond then if cond then val else val else if cond then if not cond and not cond then if cond then ( if cond then if cond then ( val * val * if not cond", "( val * if cond then val else val ) ) * if cond and cond and not cond then if cond then if cond and not cond and not cond and not not not not cond then val else if", "if cond and cond and not not cond and not cond and cond and cond then if cond then ( if not not cond then ( val ) else if not cond then ( ( ( if not cond then val else ( ( val ) * val ) ) * if not not not not not cond and cond and cond and cond and not cond then ( val ) else if cond then if cond then val else if cond then ( if cond then ( ( if cond and not not cond and cond then if cond then val else val else ( if", "( val * val * ( ( val + ( if cond then if not cond then ( if not cond then ( val ) else val else val ) ) ) ) + if cond and cond then val else ( val * ( ( ( val ) else val * ( ( val + ( ( val * if cond and cond then if cond then val else if cond and", "val + if cond then val ) * val", "val", "( val ) ) else ( if not not cond then if cond then val else ( if cond then ( val ) else ( if not cond then if cond then if cond then if cond then ( ( ( if cond then if not cond and not cond and not cond and cond then val else val ) + if cond and cond and cond then if cond then ( if not cond then if not not not cond", "( val ) else val )", "val", "( val ) + if cond then if cond then ( ( val ) ) else if not cond then if not not cond then val else ( val else val ) ) ) else val * ( val", "val", "if cond then val else if cond and not not cond then if cond then val else val else val * val else ( ( if cond then if not cond then if not cond then val else if cond then ( ( if not cond then val else ( if cond then ( val ) * val ) else ( if not not not not not cond and cond and cond then val else val + (", "( val ) ) else ( val + ( val + if cond and cond then if not not cond and not cond then if cond then if cond then if cond and not not cond and cond then ( val + ( val * if cond then ( ( if cond then val ) else ( if not cond then ( val ) ) else val ) else val * val", "val else val", "val ) else val + ( if cond then val else ( if not cond then ( if cond then ( if cond then ( val ) else ( if cond then if cond and cond and not not cond then if not not cond and cond then val else if not not cond and cond then val else if not not not not not not cond and cond then if cond then val else ( ( if not cond then val else ( val * ( ( ( ( ( ( val + if cond and cond then ( ( ( ( val * if", "val ) else val", "if not not cond and cond then if cond then val else ( if cond then ( val * if not cond and cond and cond and cond then if cond then if cond then if cond then ( if cond then val else (", "( ( val + ( ( ( ( ( ( ( val ) + if cond then val * val else val ) ) ) + ( val * ( if cond then val else val ) * val ) * val else if cond and cond then val else ( if not cond then val else ( val + if cond then val else val ) else ( ( val ) ) * if cond then if cond and cond and not not cond and not", "val * ( val )", "if cond and not cond and cond and cond and not cond and not not not cond and not not cond and cond and not cond and not cond then ( if cond then if cond and cond then if cond then ( ( if not cond then if cond then ( val ) else val + if not cond and", "val ) * ( if cond then if not cond then if not cond then if cond then if cond then ( val ) else ( val ) else if cond then ( if not not cond and not cond and cond then val else if not not not cond then val else ( ( if cond then if cond then if not cond and not cond then ( if cond", "val + val", "val", "if cond then ( val ) else val + ( ( if cond then ( ( ( ( ( ( ( ( val + val ) )", "val", "( val * if cond then ( ( val ) ) else val", "val", "( ( val + val * if cond then ( val ) + val * ( ( ( val * ( ( ( ( ( val * if cond then ( val ) else val + ( val ) ) + if cond and not cond then if cond and not cond then ( val * if cond then if not cond and cond then val else val else if cond then if cond then ( val * ( ( if cond then val else", "val", "if cond and cond and not cond and not cond and cond and cond and cond and cond and cond and not not not not cond and cond and cond then val else if cond and cond then val else val else if cond then val else val else val * ( val ) ) + val", "val", "val * val + val and ) else if cond and cond then if not cond then if cond then ( if cond and cond and not cond and not cond then ( val * if cond and cond then if cond then ( if cond then if cond then val else ( val + if cond then if cond and cond then if cond then if not not cond then val else ( ( ( val + ( if cond then if cond and", "val ) else if cond then val else ( if cond then if cond then val else if cond and not cond then ( if cond and not not cond then if cond then val else ( val ) else if cond then val else if not not not cond and not cond and cond and cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and not cond and not cond", "val + val * ( if cond then ( val )", "val )", "if cond then if not cond then if not cond and cond then val else ( if cond and cond then if not not cond and cond then ( if cond and cond then ( val + if not not cond and cond and cond and cond then ( val * val ) else if cond then if not not cond then ( ( val + ( val * ( val * val ) * if not cond then val else if cond and not", "val * ( val ) ) * val", "val ) else val", "( val + val else if cond then ( ( val + val ) + val ) ) * if not cond then val else if not not not cond and cond then if cond then val else if cond and cond then val else val else if cond then if cond and cond then ( val ) else if cond and cond then val else if cond then ( if cond then ( val * val + if", "val * val * ( then if cond then val else if cond and not not not cond then if not not cond then ( val ) ) else val ) ) else ( val * val ) ) )", "if not cond and cond and cond then if not cond then val else val else if cond and cond then val else if cond then if not not cond and not not cond and not cond then if cond then if not cond and not cond then", "if not not cond then val else val else if not not cond and cond and not cond and cond and not cond and cond then val else if cond then ( if not cond then val else val else if cond then val else if not cond then val else val * ( ( val * val * if not not not cond then ( if cond then val * val ) else ( if not cond then val else if not cond then if cond and cond", "val ) ) * ( ( val + if cond then val else val ) * val + val", "val ) ) else if not cond then if not cond then if cond then val else ( if not not cond then val else if cond then ( ( ( val ) ) + val * val ) else ( if cond then if cond then val else ( val ) else ( ( val * if cond", "( val )"], "accuracy": 0.24, "train_overlap": 0.24, "res": [{"text": "val", "log_prob": -5.659466654062271}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -29.626620316528715}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -21.198655404150486}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -82.41764717176557}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -94.38386617507786}, {"text": "( val )", "log_prob": -8.047503327950835}, {"text": "val * val", "log_prob": -7.8482648292556405}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -16.323508883127943}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -23.428468441590667}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -88.35896955104545}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -90.27467291802168}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -78.78704540710896}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val * val * val", "log_prob": -10.27300035301596}, {"text": "val * val", "log_prob": -7.8482648292556405}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -15.07971974951215}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -86.54810705594718}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -91.24126077350229}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -87.89364344161004}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -94.87597997952253}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -55.84517099382356}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -91.02860112860799}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.86293528135866}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -70.06518353149295}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -88.46099640289322}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -79.47841137973592}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if not cond and cond then val else val", "log_prob": -11.88117105141282}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -90.95947681320831}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -86.80627750838175}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -50.26653125276789}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -77.11578716337681}, {"text": "( val )", "log_prob": -8.047503327950835}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if not not cond then val else val", "log_prob": -11.167058352846652}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -33.87298247870058}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -99.66969478409737}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -17.163985368562862}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -99.83830199670047}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val + val", "log_prob": -8.41421630140394}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -103.26999102532864}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -104.02451028535143}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -19.002799729816616}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -18.4765867870301}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -97.89810073049739}, {"text": "val * val", "log_prob": -7.8482648292556405}, {"text": "val + val", "log_prob": -8.41421630140394}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -85.14225864596665}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -99.91579948272556}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -90.57267863163725}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -87.43771931529045}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -88.85336340684444}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -40.6396749811247}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -92.85106946481392}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -24.015672112815082}, {"text": "val + val", "log_prob": -8.41421630140394}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -89.39428303390741}, {"text": "( val )", "log_prob": -8.047503327950835}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -93.28785120043904}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -20.84211277088616}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -93.62557257525623}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -90.2664248617366}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -94.81900691613555}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -83.78735932195559}, {"text": "val * val", "log_prob": -7.8482648292556405}, {"text": "( val )", "log_prob": -8.047503327950835}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -67.73693278618157}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -13.992245710687712}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -91.6584947090596}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -31.167752338806167}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -18.296044141752645}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -88.60286383004859}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -91.88316254876554}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -97.98988987598568}, {"text": "if not cond then val else val + ( val )", "log_prob": -15.361213622847572}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -58.842680846340954}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -78.65159829659387}, {"text": "val", "log_prob": -5.659466654062271}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -90.50562115525827}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -17.895929946331307}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -20.794359877938405}, {"text": "( val )", "log_prob": -8.047503327950835}]}, "epoch_25.pt": {"generated_sequences": ["val * ( if cond then val else ( if not cond then val else if cond then val else val ) ) ) * val ) else val + ( if cond then if not cond and cond and cond and cond then if cond and not cond then val else val else val else val else ( val * if not cond and cond then if not not cond then ( val + if cond then if cond and cond then ( if cond then if", "val + ( ( val + ( ( ( val + val ) + val + val * val * ( ( ( val * val + if cond then val else ( val + if not cond then val else val ) ) + ( if not cond then ( val * val ) ) + ( if not cond then if cond then ( val * ( if not not not cond and not not cond", "if cond and cond and cond and cond and cond then val else ( val ) else val else if cond then if cond and not cond then if cond then ( val + ( if cond and cond then val else ( val + if cond then val else val ) * val else val ) else val ) ) + ( ( ( val + ( ( if not cond and cond and cond and cond and cond and not cond then ( val * val ) ) ) ) else val + if not cond and cond", "( val + val * if not not cond and cond then val else if not cond then ( val + ( val * ( val ) ) + val + val ) ) ) else ( if cond then ( val * val ) else if cond then if cond then val else val else ( val + if not cond and cond then ( val ) else val ) * ( if not cond and not not cond then ( val ) else val * val ) else val ) * ( (", "( ( val * ( if cond then val else if cond then val else val * if cond then ( val ) + val + val ) ) * ( if not cond then val else ( if not cond then val else val + ( if cond then (", "if cond then ( val ) else val", "( ( val ) )", "val )", "val * val + ( val ) * ( val ) * val ) * val ) ) + val", "( val * if cond then val else if cond then val else val * if cond then if cond then val else ( ( val + val + ( val ) + if not cond and cond then if not cond then ( val * if not cond then ( val + if not cond then val", "if cond and cond and cond then val else val", "if cond then val else if cond then if cond then if", "( ( if not cond and cond then val else val ) ) * ( if not cond then ( if cond then if cond then val else val ) else ( ( if cond then val else if not cond then ( val ) else val * if not cond then ( val ) else ( ( val + val + val * val ) + if cond then val else val", "( if cond then val else val ) else val * ( ( if cond then ( val * if not cond then ( val * if cond then val else ( val * if cond then val else val ) ) ) else val else ( ( ( val + if cond then val else val", "val if cond then val else if not cond and not not cond then ( val ) else ( ( ( if cond and cond then val else if cond then ( if not cond then if cond", "if cond then if not not cond and not cond then ( val ) else if cond then val else val else if cond then ( ( ( ( val * val ) + ( val ) ) ) ) * val * val + val ) * val * if cond and cond then if cond", "val ( if cond and cond and cond then val else if cond then val else val else if not cond then if not not not cond then if not cond and not cond and cond and cond and not not cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and not cond and not cond and cond and not cond and cond and cond then val else ( val ) else ( if cond and cond and not cond then if", "( if cond then val else val", "if not not cond and not not not cond and cond and cond and cond then if cond then if cond then if cond then ( val ) else val else val else ( ( if cond then if cond then ( val ) else ( if cond then if cond then if not not cond then ( if not cond then val else if cond and cond then val else val else val else val else if cond then if cond and not not cond then val else ( val ) )", "val ( ( ( ( if cond then ( val + val ) * ( ( ( ( val ) ) * val * ( ( val * ( if cond then ( if not cond and cond and cond then ( if not cond and cond and cond and not not not cond then ( ( val ) else val * ( val ) + val * val + ( val * ( ( if cond and not cond and", "val if cond then val else ( val ) * val ) else val * if cond and cond and cond then val else val ) else val else val + if cond then val else val + ( ( ( ( if not not cond and cond then ( val * val ) * if not cond then ( if cond then val else ( val ) * ( ( val ) ) else ( if cond then val else ( ( if cond then if cond then val else if cond", "val if cond then if cond then if not cond and cond then val else val else val else val * ( val ) else val ) * ( ( val ) + ( if not cond then if not cond and cond and not not cond then if not not cond then ( val ) else val ) else val else val else ( if cond then val else val ) * ( ( val * val * ( val ) * val + if not cond then ( if not cond and cond and cond", "( ( val * ( val ) ) else ( val ) ) ) * val + if cond and not not not cond and not not cond and cond and cond and not cond and cond and not cond and not not not cond and not cond and cond then ( if cond then if cond then ( if not cond then if not cond and cond and cond then ( ( if cond and cond then if cond and not cond then if not not", "if cond then val ) * if cond then if cond * ( ( val ) else val + ( if cond then if not not cond and cond then val else val else val ) else val * ( if cond then if not not cond and cond and cond and not not cond then ( val + val + val * val ) * ( val * if cond", "( if not cond and not cond and cond and cond then val else ( val ) ) )", "if not cond then if cond then val else val ) else val + if cond then ( ( ( ( if cond then ( val ) else val * ( val + ( val ) * ( if cond and not not cond then val else val * val * if cond then ( if cond then ( val * if cond then if not cond then val else if cond then if cond", "if cond then if cond then val else if cond then val else val ) else ( if cond then val else val * ( ( val ) * if not cond then if", "( ( ( if cond and cond then if cond then val else val else ( ( val ) * val * ( ( if cond and cond and cond and cond then ( ( if cond and cond and cond and", "( ( if cond then if not cond and not cond then if cond then val else val else if cond then if cond and not cond and cond then val else val else val else val else val * if cond then val else if cond then ( ( if not cond then ( if cond then if cond then if cond then val else if cond then ( val else ( val ) ) else val ) ) else", "if cond then val else if cond then val else ( val * val + if cond then val else val ) * ( ( if not cond then if not cond and cond then if cond and cond then ( ( ( ( val * val + if not not not cond and cond and not cond and cond and cond and cond and cond and cond and not not not cond and cond and not cond then ( val * ( val + val * val ) else ( ( if cond", "val * val ) )", "( if not cond then val else if cond then if not cond and not not cond and not not cond and not not cond and not not not cond and cond and not not cond and cond then ( val ) else val * ( ( ( if cond and cond then if cond then ( ( ( ( ( ( ( val + ( val ) * val + ( if cond then", "( if cond then ( val ) else", "val val else ( val * if not cond then if cond then if cond and cond then if cond and cond then if not cond then if cond then ( val * if cond and cond and cond and cond then if cond and cond then ( val ) else val else if not not cond then val else val else if cond then if cond then ( if cond then if cond then if", "val val", "val ( if not cond then val else val + ( if not not cond then val else val ) )", "val + if cond then if cond then if cond and not cond then val else val else val else val ) else val", "if cond then if cond then if cond and cond then ( val * if cond and cond and cond then val else val ) else if cond and cond then val else val else if not not not cond and cond then ( if cond and not cond then ( val ) ) else ( val ) * if cond then if cond then if cond", "if cond and not not not cond then if cond then val else ( val * ( val ) ) ) ) ) else if not cond and not cond then val else ( val ) * ( val ) ) ) + if cond then if not cond then ( ( if cond then val else ( if cond and not not not cond then if cond then ( if cond and cond then", "if + if cond then if not cond then ( val * if cond and cond then val else ( if cond then val else ( if not cond then val else if cond then ( ( val + val + val ) ) ) + val * ( val ) ) * if cond then if not cond and cond then val else", "( ( if not cond then ( ( val ) * val * ( val ) + ( if cond then if cond and not cond and cond and not cond then ( val ) else if not not not cond and not not not not not cond and not not not cond and cond then if cond then ( val ) else if cond then if not cond then if not cond then val else ( (", "val ( ( if not cond and cond then ( ( if cond then if cond then val else val else if cond then ( if cond then val else val ) + ( if cond then val else val ) ) * if not not not cond and cond and not cond and cond then ( if cond then if not not cond then val else ( if not cond and cond then if not cond and not not cond then val else val else ( val * val * if not cond then val else ( ( val * if cond then val else if not cond and", "if cond then val else if cond then val else val ) else val", "if cond then val else val else val )", "val val", "( ( ( if cond and cond and cond and cond and cond and not not cond then val else if cond and not cond and cond and not cond then if not cond then val else", "val + ( val + ( ( ( if cond then val else val * if cond then ( val + val ) + ( if cond then ( if cond and cond then ( if cond then val else val ) ) else if cond and cond and not not cond then if cond then val else", "val ) * val", "( val + ( ( ( val ) ) )", "( if cond and cond and not cond and cond and cond and cond then val else ( val ) else val"], "accuracy": 0.06, "train_overlap": 0.04, "res": [{"text": "val", "log_prob": -4.680946320295334}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -27.420961691765115}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -20.818545726826414}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -81.30761825246736}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -93.7069902382791}, {"text": "( val )", "log_prob": -6.919862270355225}, {"text": "val * val", "log_prob": -7.073388107120991}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -14.945956410840154}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -22.461639573331922}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -88.70743962703273}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -91.6759926895611}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -79.6643040413037}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val * val * val", "log_prob": -9.410790752619505}, {"text": "val * val", "log_prob": -7.073388107120991}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -13.177251935005188}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -84.29313106415793}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -91.34249264979735}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -86.21746527124196}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -94.40122437570244}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -55.12889260286465}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -93.30585576826707}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -99.48608490126207}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -69.54007007321343}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -90.04688152950257}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -81.01163766626269}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if not cond and cond then val else val", "log_prob": -10.402885682880878}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -90.99820883153006}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -85.64420142490417}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -49.1845773588866}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -79.35902029648423}, {"text": "( val )", "log_prob": -6.919862270355225}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if not not cond then val else val", "log_prob": -10.579808417707682}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -33.294454141985625}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -97.87653820123523}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.710417093709111}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -98.45626370422542}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val + val", "log_prob": -7.15889298915863}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -102.7573080714792}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -102.25883322488517}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -17.711701319552958}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -18.048940237611532}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -95.02801100024953}, {"text": "val * val", "log_prob": -7.073388107120991}, {"text": "val + val", "log_prob": -7.15889298915863}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -85.4763059639372}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -97.60154093010351}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -89.9358347216621}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -86.28427034197375}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -88.55493487836793}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -41.04721945011988}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -91.11645768210292}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -21.887806984828785}, {"text": "val + val", "log_prob": -7.15889298915863}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -87.20122866961174}, {"text": "( val )", "log_prob": -6.919862270355225}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -94.74684374034405}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -18.50131753529422}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -91.13748073158786}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -92.32361735310405}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -94.18231198121794}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -86.05576606048271}, {"text": "val * val", "log_prob": -7.073388107120991}, {"text": "( val )", "log_prob": -6.919862270355225}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -67.42649725498632}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -13.025393296033144}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -89.98248221864924}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -30.078753989189863}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -16.894524971954525}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -88.74081090046093}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -91.81425661407411}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -93.95439713820815}, {"text": "if not cond then val else val + ( val )", "log_prob": -14.283550695516169}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -57.31165456213057}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -76.21838989388198}, {"text": "val", "log_prob": -4.680946320295334}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -92.00372248375788}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -16.707566753961146}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -19.749026991426945}, {"text": "( val )", "log_prob": -6.919862270355225}]}, "epoch_30.pt": {"generated_sequences": ["if not not cond then val else if cond then if not cond then if cond and cond and not not cond and cond and cond and cond and cond then val else val else val else val ) else val else val )", "val + val * ( if cond then if cond then if not cond and cond then if cond and cond then if cond and cond then if cond then val else ( val * val + val * if not cond then if cond then if not cond and cond then val else ( val ) else ( if cond and cond and not cond and cond then ( ( if cond then val else ( val ) else ( val ) else if cond then if", "val * val ) ) else if not cond and not cond then val else val * val + val", "val + val * ( ( val ) ) ) ) else val )", "if cond and not not cond and not not cond and not not cond and cond and cond and not not cond and cond and cond and cond and cond and cond and not not cond and cond and not not cond then ( val ) * ( val * ( if cond then ( ( val + val ) + if cond then if cond then val else ( val ) * if not not cond then ( ( val ) else ( val ) + val ) ) ) ) else val else val", "( ( val * ( if cond then val else ( val ) ) else if not cond then if cond and not cond and not not cond and cond then val else val else if cond then val else val else if not not not cond and not cond then val else val * if cond and cond then val else ( ( ( val ) ) ) )", "val val * val * ( if cond and not not cond and cond and cond and not cond and not cond then if cond then if cond then if cond and cond then ( if cond then ( val * if not cond then if not cond then if cond then val else val else val else if not cond then ( if cond then val else val ) else val else val ) * if not cond and cond then if not cond then val else if cond then if not cond and not cond and cond and not not cond and cond then if cond then val else if cond then", "if not cond then val else val ) else ( ( if not not not cond and cond then ( ( ( val * val ) * ( val ) + ( val * if not cond and cond then val else val ) + val ) ) )", "val * ( ( if not cond then ( ( if cond then ( if cond then ( if not cond then if cond then if not not not cond and cond and cond and not not cond then val else ( ( ( if cond then ( ( val ) else ( val * ( ( val * val * if cond then val else val + ( if not not cond and cond and cond and cond then ( val ) else if cond then ( val ) * val + val ) else ( if cond then ( if not cond then if", "if cond then val else val ) else ( if cond then ( if cond and cond then val else ( val ) ) ) else ( if cond and cond then val else if not not not not not not not cond and cond and not not cond and cond and not cond then val else if not cond then if cond and cond then val else val else ( val + val + ( if cond and cond then val else val ) ) else if", "val * ( val * val )", "val + ( ( val ) ) * if not cond then ( if not cond then ( val ) else if not cond and not cond and cond and cond and cond and cond then val else ( ( ( val + val + if cond then if cond then val else ( val ) ) else ( if cond then if cond then ( if cond then if", "( val * if cond then val else if cond and not cond and cond and cond then val else if not cond and not not not cond and cond and not cond and not cond and cond and not not cond and not cond and cond and cond and cond then val else if not not not cond then if not not cond and cond and not cond then val else if cond and cond then val else val else if not cond then ( val ) else val else val ) else val else ( val else ( ( val ) ) ) ) else val )", "val * if cond then if cond and not cond then if cond then ( val * val ) else if cond and cond then val else ( val ) ) else ( if not cond then val else val ) else if cond then if cond then val else val else ( val ) ) ) else val + ( if cond + val else ( if cond then val else val ) ) else (", "( ( val ) ) ) else if cond then ( if cond then if cond then if not cond then ( ( val ) else ( val ) else val else val ) else ( val ) + if cond then ( if cond and cond then ( val + val * ( ( val * ( val ) * if cond then val else if cond then val else val ) ) * val else if not not cond and cond and cond", "if cond then if cond and not cond and not cond then ( val ) else if not cond and cond and not cond and not cond and cond and cond and not cond then if cond then if cond then if cond then val else ( val + val ) else if cond then if", "( then val ) else ( if cond then val else val + if not cond and cond and cond and cond and cond and not cond then if cond then if not cond and cond then val else val else if cond then ( val * ( val * val ) ) else ( if cond and cond and cond and cond then val if cond then ( val * val )", "val + ( val * if not cond then if cond and not not cond and cond and not not cond and not not cond then val else if cond and cond and cond and cond and cond then if cond then val else ( ( if cond then if cond and not cond then val else val else if cond and cond and cond then if cond then val else val else ( ( val + ( ( val ) ) * if cond then if cond then val else if not not cond and cond then if not cond then if", "( val ) else ( val ) + ( ( if cond and not cond and cond and not cond and cond and not not cond and cond and not cond and not cond then if cond and cond and not cond then if cond then if cond then val else ( val + if cond then if not not cond then ( val ) * if cond and cond and cond then if cond then val else val else if cond then val else ( val ) else ( val * ( val * if cond then ( val ) else ( ( if not cond and cond then if cond then val else if", "val + val * val + if not not cond then if cond then val else val else if cond then ( val ) else val * val + val * ( if cond then val else val * ( ( val ) + ( if cond then val else ( val ) * if not cond then ( ( val + if cond then ( if cond then ( ( ( ( ( val * if not not not not cond and cond and cond and cond and cond and not cond and cond and cond then ( if cond and not not cond and cond then val else ( ( ( if cond then val ) else if cond then if", "if cond then val else ( val ) else val ) * ( val * val * if not cond then if cond then ( val * ( ( val ) ) ) else ( if not cond and cond then val else ( ( ( val * if cond then val else val * ( ( ( ( ( val ) * if cond and cond and cond then ( if not cond and not not not cond then ( val * ( if cond and not cond and cond then ( val ) else ( val ) * val * if cond and", "val + if cond then if cond and cond and cond then val else ( ( if not cond and cond then val else if not cond then ( if not cond then val else ( if cond then ( val ) else val ) else val * ( val ) ) else ( if cond", "if val if cond then if not cond and cond then val else val else if cond then val else ( ( val ) * val ) )", "val * if cond and cond and cond then val else val + if not cond then val else if cond then val else val * val * ( ( if cond then val else ( ( if cond then if not cond and cond and not cond and cond and not cond and cond and not cond then ( if cond then if cond then if not cond then val else val else val + val * if not cond and cond and not cond and cond and cond then ( val ) else if cond then val else if not cond then val else val + val ) * val", "if cond then ( val ) else if cond then val else val", "val val * if not cond then val else ( val ) )", "if cond and cond and cond and cond and cond then val else if not cond and not cond then val else if not cond then if cond then val else if cond then val else ( if not cond and cond then if not not cond and cond and cond and not cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond and cond and cond then ( val ) else if cond then ( if cond then ( ( if cond then ( val + if", "if cond then val else if not cond then val else ( if not cond then ( if not cond then val else if cond then if not cond and cond and cond then if cond and cond and cond and not cond and not cond then val else val else val else if cond then ( val ) else ( val ) else val ) else val else val ) else if cond then val else if cond and cond then val else if cond then val else ( if cond and cond then ( if not", "val ( val + val ) * if cond and cond and cond and cond then if cond then if not cond then val else ( val * if cond and cond then if not cond then if not cond then if cond and cond then ( ( val ) * val ) else val else if cond then val else ( ( ( ( ( ( ( val * if not cond then val else ( if not not cond and not cond and cond and cond and cond and cond and not cond then ( if not cond and not cond and cond then if cond then if not cond and cond then ( ( val * val ) else", "val * if cond and cond and cond and cond and not cond and cond then ( ( val + ( val ) * ( val * if not cond then val else val ) * val * val * val ) else if not not cond then val else if not not not not cond and cond and cond then if not not cond and cond then ( ( val ) * if not cond and cond then if cond then val else if cond then val else if cond then val else val else val ) + if", "if cond then val else val", "val * ( ( ( if cond and cond and cond then val else if not cond then if not not cond and not not not cond then if not cond then ( val + if cond and cond and cond then if cond then if not cond and not cond then if cond and then val else ( val * ( val ) else ( if cond then if cond then val else val * val )", "val ) + ( if cond and cond and cond and not cond and not not cond and not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond and cond and cond then if not not cond then val else ( if cond and not cond then ( ( ( val * if not cond then if cond then ( if cond then if not cond then val else val ) else if cond then val else if not cond then ( val ) else if cond then if cond then if not cond then ( ( val + val ) else", "if not cond then ( if cond and cond then if not cond then ( val + val ) else ( if cond and not not cond then if cond then if not cond then if cond and cond then val else if cond and cond then if not not cond then if cond then ( ( val + if cond then ( ( ( ( ( val * val ) ) else val else if cond then ( val + ( ( val ) ) ) else val else if cond and not cond then val else if cond then ( if cond and cond", "val + ( val ) ) ) + ( val ) else ( val + val * if cond then if cond and not cond then if cond then val else val else if not not cond then val else val * val ) * if cond then if cond then ( if cond and cond then if cond then ( val ) else if not cond and cond then ( ( ( val * if cond then if not cond then if cond and", "val * val ) else if cond then ( if not cond then if cond and cond and cond then if cond and cond then val else ( if cond then val else ( ( val * if not cond then val else val ) else val * if cond then val else val else if cond then ( val * val ) * val + val * val ) ) else if not cond and cond and cond then val else val + val )", "val * val ) else ( ( ( val + val + val * ( val * if cond and not cond and cond then if cond then ( val ) else ( ( val * ( ( ( ( ( if not cond then ( if not cond and cond and not cond and not cond then ( if not cond then val else val + ( val + val ) else ( if cond then val else ( val ) ) ) else ( ( val ) * if cond then val else ( ( val ) + ( ( val ) * ( if cond", "val + val * val * ( if cond then if cond then if cond and cond then val else ( val ) else ( ( if cond then if cond then ( val ) else val * val else if cond and cond and cond then val else if cond and cond and not cond and cond then if cond then ( ( val ) else ( if cond then val else if cond and cond then ( val * val ) else val + ( val + val ) else if cond and not cond and cond and not cond and not cond and cond and cond and cond then val else if cond then ( val + ( val", "( if cond then if cond then val else val else if cond then val else val * if not cond then if cond and not cond and cond then if cond and not not cond then val else if cond and cond then val else if cond then val else if cond then val else ( ( val * val + ( if cond then val else if cond then if cond then ( if cond then ( if", "if not not not cond and not cond and cond and cond then val else val * val + ( val )", "( val * ( if cond and cond then ( val ) else if cond then ( if not cond then if cond then val else val else if cond and not cond and not cond then (", "( ( val ) ) else val )", "if not cond and cond then if not cond then val else val else val ) else val * if cond then if cond then ( val ) else if not not cond and not cond and cond and cond and not cond and cond and not cond and cond then val else if not cond then val else if not cond and cond and not cond then val else if cond then val else if not cond then val else ( val ) else val else if cond then if cond then val else ( if not cond", "if cond and cond and cond then val else ( if not cond then val else val ) else val ) else val else val", "val * if cond then val else val", "val * ( val + ( val + if cond then if cond then ( if cond then ( val ) else if not not not cond and not cond then ( val * if cond then if cond then if cond and cond and cond and cond and not cond and not not cond and not cond and not cond and not cond and cond then if not cond and not not cond then if cond then val else ( if cond then val else ( if cond then ( val ) else ( if cond then if cond then val else ( (", "if cond then val else if cond then if not cond then ( if cond and not cond and not cond then if cond then if not not not cond and cond then ( ( ( val + if cond and not cond then ( val ) else ( val ) + if cond then ( ( ( ( val * ( val ) + ( ( ( if cond then if cond and cond then if not cond and cond and not cond and cond then if not not cond and", "val * if cond then if cond and not cond then if cond then val else val else if cond then val else val else if not cond then * if cond then val else ( val ) else if cond then ( ( ( if cond then val else ( val ) * val ) ) * ( val * if cond then val else ( if cond then ( val ) else if cond then val else ( if not not cond then if cond and cond and not cond then if not cond and", "( if not cond and cond and cond and not cond and cond and not not not cond then val else if cond and cond then ( val )", "if cond then ( if cond then ( val ) + ( ( val ) ) else if cond then val else val )"], "accuracy": 0.1, "train_overlap": 0.02, "res": [{"text": "val", "log_prob": -4.32998064160347}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -26.303155947476625}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -18.84613844472915}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -76.68314209254459}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -91.6906778314733}, {"text": "( val )", "log_prob": -6.1365080550313}, {"text": "val * val", "log_prob": -6.859948007389903}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.93569382186979}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -19.850635204813443}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -85.11497300810879}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -85.20651648397325}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -75.4281929997378}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val * val * val", "log_prob": -8.792032714467496}, {"text": "val * val", "log_prob": -6.859948007389903}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -12.762988046044484}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -80.1112820332637}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -88.39119607530301}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -86.12544595613144}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -90.86930187890539}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -51.42299504717812}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -88.03407677513314}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.99096092017135}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.21865985461045}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.93189213512233}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -76.6636425423203}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if not cond and cond then val else val", "log_prob": -9.662320201983675}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -88.13596773345489}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -82.87042488937732}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -49.560873145004734}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -73.56686344539048}, {"text": "( val )", "log_prob": -6.1365080550313}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if not not cond then val else val", "log_prob": -8.92122486885637}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -31.285543410340324}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -93.27118854416767}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.083584471605718}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -95.17722550930921}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val + val", "log_prob": -7.05865216255188}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -98.47804708441254}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -98.20289470697753}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.279563912423328}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -17.76249681506306}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -93.8088379385299}, {"text": "val * val", "log_prob": -6.859948007389903}, {"text": "val + val", "log_prob": -7.05865216255188}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -81.13231231155805}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -95.18935040885117}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -88.54725191713078}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -85.79052701900946}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -83.2532905312255}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -38.524572087742854}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -86.10547279677121}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -20.924113626708277}, {"text": "val + val", "log_prob": -7.05865216255188}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -84.19237045879709}, {"text": "( val )", "log_prob": -6.1365080550313}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -89.36366671853466}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -18.02124389994424}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -89.35179818805773}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -92.0020386489341}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -90.15039180923486}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.07612566422904}, {"text": "val * val", "log_prob": -6.859948007389903}, {"text": "( val )", "log_prob": -6.1365080550313}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -65.4913212544052}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -13.141864404082298}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -91.08239574718755}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -28.420338525203988}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -15.044666003552265}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -84.12668324506376}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -89.82431998621905}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -94.20166572061135}, {"text": "if not cond then val else val + ( val )", "log_prob": -12.246592453680933}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -54.96017289056908}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -73.23337523825467}, {"text": "val", "log_prob": -4.32998064160347}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -86.91592878696974}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.988485272275284}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -18.124857005896047}, {"text": "( val )", "log_prob": -6.1365080550313}]}, "epoch_35.pt": {"generated_sequences": ["( val + val ) * ( if cond and cond then ( val + val + val ) ) else ( val * val * ( val", "val", "val", "if not not not cond and cond then ( if not cond then if cond then val else if cond then if not not cond and not cond then val else ( val + if cond then ( ( val ) else val * val ) * val ) + ( ( val ) ) * ( ( val + val ) * ( val ) * ( if cond and cond and cond and not cond and", "val", "( if not cond then if cond and not cond then if cond and not not cond and cond and cond and cond then val else ( if cond then ( val ) else val ) * ( if cond then if cond then if not cond then ( val ) else if not cond and cond then ( ( val ) else val ) else val ) else val * val ) ) else ( val + ( if cond then val else val ) else if cond then ( ( ( val ) )", "val", "not cond then ( val * ( val * ( val ) ) ) else val * ( ( val + if not not cond then if not not not cond then if cond then ( ( val ) + ( val * if cond then ( ( val ) else ( val ) else if cond then if not cond then if not not not not cond and cond then if cond and cond and cond and cond then if not cond and cond then ( val ) else if cond and not cond then if cond then ( ( ( if not not not cond and not cond and not not not cond then if cond then (", "val + if cond and cond then if cond then val else val else ( val + if cond then ( if not cond then if cond then val else val * if not not not cond and not not not cond and not cond and cond and cond and cond and cond and cond and not cond then val else if cond then ( if cond then val else ( ( ( val ) ) ) * ( ( val ) else if cond then val else if cond and not cond then if cond then val else if not cond and not not not cond and cond then if cond then val else", "( val ) + if cond and cond then val else val", "( val )", "( if cond then ( ( ( val ) ) else val )", "val", "if cond then ( if cond and cond then if cond then if cond and not cond and not cond and cond and not not cond then ( if not not cond then val else if not cond and cond and cond then ( val ) else ( val ) ) else if cond then ( ( if cond then val else if cond then val else val else if cond and not not not cond and not cond then if not not cond and cond then if cond then val else if not not not not not not cond then val else val else val + if not not not not not cond and cond and cond then if not not cond and not cond then val if", "if not cond and cond then ( val * val )", "( if cond then val else val else if not cond then if cond then ( val * ( ( val + ( if cond then ( ( if cond then if cond then val else ( if not cond then ( ( val ) ) else if not not not not cond and cond and not cond then val else ( if cond and cond then if not cond and cond and cond and not not cond and cond and not cond then if not not cond and not cond and cond and not not cond then val else if not cond and not cond", "if not cond then if not cond then val else val * if cond then val else ( if cond then ( ( if cond then ( ( ( val + ( ( ( ( ( val + val ) * if cond then if cond and not not cond then if cond and cond then val else ( ( if cond then val else ( ( ( val * ( ( ( ( if cond and not cond and not cond and not cond and not cond and cond and not cond and cond then val )", "then if cond then if cond then ( ( ( ( if cond and not cond and cond and not cond then val else if not cond and not not cond and cond and cond and cond then ( val + ( if not cond and cond and not cond then val else if cond then ( ( ( val ) * if cond then if not not cond and cond then ( if not cond then val else val * ( ( if cond then ( if cond then if not cond then val + ( val ) ) * val ) ) else (", "val * val", "( val + ( ( ( val )", "val + ( val + ( val * ( if not cond and not cond then val else val * val * if cond then if cond and not not cond then val else if not not not not cond and cond then ( val ) ) else val ) else if cond then val else ( val * ( if cond and cond then val else val ) * if cond then if cond then ( val + val ) else val ) * val + val * val ) ) ) else val * ( if not cond then if not not cond and cond then ( if cond then val else", "if cond then val else ( ( val * ( val ) * if not not cond and not cond then val else if cond and cond then if cond and cond then ( val ) else if not cond then val else if cond then ( if cond then val else if not not not cond then val else if cond and cond and cond and cond and not cond and not cond then if not cond then ( ( ( val ) ) * if cond then ( if cond then val else val", "if not not cond then if cond then val else if cond then if cond then ( val * val ) else val else if not cond then if cond and cond and cond and cond then val else if cond and cond then if cond then if cond then val else ( ( val * val * ( val )", "if cond and cond then val else ( if not not cond and not not cond and not cond and cond and not cond then ( val ) else ( val + val )", "( ( val * ( val ) * val ) ) else val ) )", "val * ( val * if cond then val else val * * val", "not cond then val", "if not cond and not cond then val else if cond and cond then if cond then if cond then val else if cond then val else if cond then if not cond then ( if cond then val ) else ( ( ( val ) )", "val", "val", "if not cond then if not cond then val else if cond and cond and not not cond and cond and not cond and cond and cond and cond then val else val else val else val", "if not cond then ( ( ( val ) ) * val * val )", "val", "( if cond then if cond then val else ( val * ( val + val ) else if cond then ( ( if cond then val else ( ( if not cond then val else val ) ) ) else val else ( val ) ) ) ) else if not not cond and cond and not cond and not not not cond and cond then ( if cond then val else ( ( ( ( val * if not cond then if cond and not cond then if not cond then val else if cond then ( val * val )", "if cond then val else if cond then val else ( if cond and cond and cond and not cond and cond and cond then val else val )", "val + val", "( val ) else val", "if cond and not cond then if not not not cond and not cond and cond then if cond and cond then if cond then if not not cond and cond then if cond then val else val else val else if not cond then val else if cond then val else ( if not not cond then val else ( val + if cond then if cond then val else val )", "( val * ( ( if cond then ( val + val ) else if cond then if cond then val else if not cond then ( if not cond then ( val ) else ( ( if cond then ( if cond then val else ( val + ( val + val ) * val + ( ( val + if cond and not not cond and not not cond and cond and not cond and not cond and cond and cond and not cond and cond and not cond and cond then val else if cond then if not", "val", "( val + if not cond and cond then val else if cond then if not cond then ( if cond then if not not not cond and not cond then if cond and cond then if cond then ( if cond then val * ( val ) else if not not cond then ( if not cond and cond then if not cond and not not cond and cond and cond and not cond and cond and cond then val else ( if cond then if not cond and not not cond and cond and cond then if cond and cond then val else if not cond and not cond then if", "if cond then val else if not cond then if not not not not cond and cond then val else ( ( val ) ) else if cond then if not cond then if cond then val else if not cond then ( val ) else ( if cond then if cond and cond and not not cond and not cond then ( ( val + ( if not cond and cond then val else ( if not cond and cond then if cond and cond and cond then ( val * ( if cond and not cond and not cond and cond and not not", "( val ) else val", "val * if cond then if cond then val else val ) else val else ( val ) * ( if not cond and cond then ( val ) else ( val ) else if not cond then val else if not cond then val else val", "( val * if cond then if cond and not not not cond and not not cond then val else if cond then if cond then val else if not cond then val else ( ( if not cond and not cond and cond and not cond then if cond then val else if cond then if not cond then if not cond then val else val else val else ( val * if cond then ( if cond then ( ( if cond then ( ( ( val ) ) * if cond and not not cond and cond then val else val ) ) else ( (", "val", "val", "val + val * if not cond then ( ( if cond then val else ( val ) * ( if cond then if not cond and cond then val else ( val * val * if cond and cond and cond then ( val ) else ( ( ( if cond then ( ( val * val ) else val ) ) ) * ( if not cond then val else ( val )", "if cond then val else if cond then if not not cond and cond then if cond and cond and cond then val else if cond and not cond and not cond and cond then if not cond then val else if cond and not not not not not cond and not not cond and cond and not cond and cond and not cond and not cond and cond then val else if cond then if cond then if not not cond and not not cond and cond and cond and cond then val else val else val else (", "val + if cond and not cond then val else val + ( ( ( if not not not cond and not cond then ( if cond then if not cond and not cond and cond and cond then ( val ) else ( val + val ) ) * ( if not cond and cond and cond and cond and not cond then ( if cond then val else val * if not cond then val else ( ( ( if cond then val else ( if cond then ( ( val ) ) ) ) * if cond then val else ( ( if not not not cond then val"], "accuracy": 0.32, "train_overlap": 0.28, "res": [{"text": "val", "log_prob": -2.485268539749086}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -25.327859641518444}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.96826677909121}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -78.56599802337587}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -92.16877173585817}, {"text": "( val )", "log_prob": -5.254033481236547}, {"text": "val * val", "log_prob": -4.746543906163424}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.932846626732498}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -20.779425426386297}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -86.68341407901607}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -85.62064962601289}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -76.17308220500126}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val * val * val", "log_prob": -7.327659835573286}, {"text": "val * val", "log_prob": -4.746543906163424}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.815396829741076}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -84.54822943755426}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -89.03946144133806}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -85.51693859929219}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -92.0828420505859}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -52.14941897452809}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -90.2294208558742}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.4632476628758}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.80270918738097}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.49399902974255}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.32586851809174}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if not cond and cond then val else val", "log_prob": -8.126203740481287}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -87.89107137313113}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -81.34103654278442}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -48.61539464071393}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -72.2789371192921}, {"text": "( val )", "log_prob": -5.254033481236547}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if not not cond then val else val", "log_prob": -7.965829351916909}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -31.22009398508817}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -97.04255618341267}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.325976963154972}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -97.17008785903454}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val + val", "log_prob": -5.168955096509308}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -100.30484319478273}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -100.79149426473305}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.755138494074345}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -16.088121466804296}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -95.57328608655371}, {"text": "val * val", "log_prob": -4.746543906163424}, {"text": "val + val", "log_prob": -5.168955096509308}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -81.06395476125181}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -97.9605930284597}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -85.46674381149933}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -86.2547148586018}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -83.04685858357698}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -36.903555129189044}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -87.60974253667518}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -20.281886125681922}, {"text": "val + val", "log_prob": -5.168955096509308}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -86.15143648255616}, {"text": "( val )", "log_prob": -5.254033481236547}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -89.035246825777}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.581742767244577}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -89.08599484432489}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -94.62575252261013}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -92.93969724932685}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.27870101155713}, {"text": "val * val", "log_prob": -4.746543906163424}, {"text": "( val )", "log_prob": -5.254033481236547}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -65.8316802540794}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.578034868463874}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -87.49982691323385}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -30.724317299202085}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.018272086279467}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -85.14705824898556}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -89.83710214402527}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -95.58181127626449}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.935749848838896}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -56.83744443254545}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -72.56557856919244}, {"text": "val", "log_prob": -2.485268539749086}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -88.88759733689949}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.653787448536605}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.887002279050648}, {"text": "( val )", "log_prob": -5.254033481236547}]}, "epoch_40.pt": {"generated_sequences": ["( ( ( val val", "if cond and not cond then val else ( val ) * val * val ) + if cond then ( if cond and cond then val else ( if cond then if cond and not not cond and cond then val else val else val * if cond then val else if not cond", "( val ) else if cond then val else ( val )", "( val val + ( val ) * ( ( if not cond and cond then if cond then val else val ) * ( val )", "( ( val ) + val ) )", "( ( if cond and cond then ( val ) else ( if cond then ( val * ( if not cond then val else val ) + ( if not not cond and not cond then val else if cond and not cond and cond then ( if not not not not cond and not not cond then ( val ) else val * val ) + if not not cond and not cond and cond and cond then val else if cond then val else val else val else val * ( ( if not cond and cond and cond and not not not cond", "( ( val ) ) else if not cond then if cond and not cond and cond and not not not cond and cond and not cond and not cond and cond and not not cond and cond and not not not cond and not cond and not not not not cond and cond and not cond and cond and cond then ( if cond then val else if cond then val else val ) ) else if cond then if cond and cond and cond then if cond then val else if", "val * ( val", "( ( val ) + val + if cond and cond and not not cond and not cond then ( ( ( if cond and cond and cond and not not cond then if not cond and cond and cond and cond then ( val + ( if cond then if cond and cond then ( val * val ) else val else val ) ) else ( ( if not not cond then ( val ) else ( val else ( val ) ) ) ) else val * val ) else val ) + ( val ) + val ) + val * val )", "val else if not not cond and cond and cond and not not not cond and cond then ( if cond and cond and not not cond and cond then val else val else ( val * val ) ) ) else val else val", "( ( val ) + val", "( val * val * if not cond then val else val ) else ( val ) * val )", "* ( if cond then ( if cond and not not not not cond and cond then if cond then if cond then ( ( val ) else if not not cond and cond and cond then val else if cond then val else ( val * val ) else val ) else ( val ) else if cond and not cond and cond and not cond and cond then if cond and cond and cond then ( val ) else if not cond and cond and cond then val else if cond and", "( ( ( ( ( val ) ( val * if cond then val else if cond then ( if not not cond and not not not cond then val else if cond then ( if cond and not cond then val else if not cond and not not cond then if cond then ( val * val ) else val * val else val + val ) else val ) ) else ( if cond then val else if cond and cond then ( val + if cond then val else ( val * if cond and not cond and not cond", "cond then ( ( val ) ) else val * val * val", "val", "( if cond and not not cond then if not cond then val else val * val * val", "val ( ( if cond ( ( ( val * ( val ) + if not cond and cond and not cond and cond then val else ( val + if cond and not not not cond and not cond and cond and cond and cond then val else ( ( if cond then ( ( if cond then if cond and cond and cond then val else if cond and cond then val else val ) else val else if not cond and cond then val else if not not cond and not not cond and cond and", "val + val", "val * ( val ) else val + val * val ) + if not cond then if not cond then val else ( ( val * if cond then val else val * if not cond then val else if not not not not cond and cond and cond and cond and not cond and not not cond and cond and cond and cond and not cond and cond and cond and cond and cond and cond and not cond and not cond then ( val ) else val ) else val ) + val ) * if not not cond and", "val if cond and not cond and not cond and cond and cond and cond and cond and cond then if cond then ( val + if cond and cond and cond then val else if cond and not not cond then val else ( ( if cond and not cond and not cond and not not cond and not not not cond and not cond then ( ( if cond then val else if cond and cond and cond then if cond and not cond then val else ( ( ( if cond then val else val * val + if cond and not cond then if cond", "( val + val ) else val * val + val else val * if cond then ( ( ( ( if cond and not not cond then val else ( val + val * val ) else val ) ) * val ) ) ) ) * if cond then ( val + if not cond then val else ( if cond and cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and not cond and cond and not not cond and not", "+ if not cond then if cond then if cond then val else if not not cond and cond then val else ( val ) else val ) else ( val )", "val + if cond then val else ( val )", "if not cond and not cond and cond and not cond and cond and cond then ( ( if not cond and cond then if cond then if cond and cond then ( ( if cond then if not cond and cond and cond then if cond then val else if cond then ( if cond then val else ( if cond and not not cond and not cond and cond then ( ( if not not not not not", "if cond then ( val else ( val ) ) ) * val * ( val + val ) * ( if not cond and cond and cond and cond and not cond and cond and not not cond and not cond and cond and not not cond and not cond then if cond then if not cond and cond and not not not cond then val else ( val ) * if cond then val else if cond and cond then val else val else val else val ) else val else val else if not cond and cond and cond and cond", "( if not not not cond then ( ( val )", "val + val + ( val + val + val + val + val", "val val if cond not cond val val + if cond * val + val * val + if cond and not cond then val else ( val * ( if cond and not cond then if cond then ( ( if cond then ( ( val ) else val ) ) + val * if cond then val else val + val + if cond then val else if not cond and cond and not cond and not cond and cond and cond and cond and not cond then if cond then ( val ) else val else ( ( val ) else if cond then val else", "val + val cond then val else ( ( if not cond then ( val ) else ( ( ( if cond then val else if not cond then ( val ) else val * val * val * if not cond and not cond and cond then ( ( if cond then if cond then ( val ) else val * if not cond and not cond then val else val ) else val else val ) + ( val ) + val", "val not not not not not not cond and cond and cond and cond and cond then ( if cond then ( val ) else if cond then ( val + val * val ) else val * val * if not cond and cond and not cond and not not cond and not not cond and cond and not cond and cond and cond and not not cond and not cond and cond and not cond and not not cond then val else if not cond and not cond then ( (", "val + ( val ( ( ( if not not cond and not cond and not cond and cond and not cond and cond and not not not cond and cond and cond and cond and not cond and cond and cond and not cond and cond and cond then val else val ) ) )", "val ) else if not cond and cond and cond and cond and not cond and not cond and not cond and not not not cond and cond then if cond and cond then if not not cond and cond then val else if not cond then if not cond then ( val ) else val else ( val * val ) else val else ( if cond then ( val ) else ( val * ( ( ( val )", "( val val * val + val + if cond then if cond then val else val * if not cond and cond and cond and not cond and cond not not cond and cond and not not cond and not not cond and cond and cond and cond and cond and cond and cond and not cond and cond and not not not cond and cond and cond and not cond and cond and cond and not cond and cond and not cond and not not cond and cond and cond and cond and cond then val else val else val ) + val", "if cond then val else ( val * if not cond and cond and not cond and cond then ( val ) else ( ( ( val * ( ( val * val ) ) + ( val ) ) ) ) + ( if cond then ( ( ( if cond and cond and cond then ( if not cond and cond and cond then ( if cond and not cond and not cond and", "val if cond val ) ( val + val + ( val * ( val * val * val", "( ( val val * val + val ) else val * if cond and cond then if cond and not cond and cond and cond then ( ( val ) else val else val ) else val ) * val ) + if not cond then val else ( val ) * if cond then if cond and cond and cond and not cond and cond and not cond and cond and not not cond and not not not cond then ( val * val ) else if cond and cond and not not not not not not cond and cond and cond and cond and cond and", "val + val", "( ( val * if cond and not not not cond then ( val ) else if not cond then if cond then if cond and not cond and not not cond and not not not cond and cond and cond then val else if cond then val else if not cond and not cond and cond then val else val else val else val + ( if not not cond then if cond and cond and cond and not cond and cond then val else val else if cond then if cond then val else (", "( if not cond and not cond and not cond then ( val ) else ( ( ( val + ( if cond and cond then ( if cond then val else if cond then ( val else if cond then ( if cond and cond and cond then val else val * ( if cond then val else ( val + val * if cond and cond and cond then if not cond then ( val ) else val * ( if cond then val else if not cond then val else val else if cond and not not not cond and cond and cond", "val * ( if not not not cond then if cond then if cond and not cond and cond then val else ( val * val", "( val ) ) ) else ( ( ( ( val ) else if cond then ( ( if cond then val else val * val ) ) + val + val + val * if not cond then val else val + val ) ) ) + val )", "if not cond and not cond and not cond and cond and cond and not not not cond and not cond then if not cond and cond and cond and not cond and cond then val else val else val ) else ( val )", "val + if not cond then if not", "val + ( if not cond then ( val * val ) else val * val", "val * val else ( ( ( if cond then if cond and not cond then val else val else val ) ) * val ) ) ) * if cond then if cond then val else ( val + if cond and cond then ( ( val + if not cond and not cond and not cond and cond then val else ( val ) else ( if cond then ( ( val + if not cond and not cond and cond then val else if cond and not cond and cond and not cond and not not not", "( val + val + if cond and cond and cond and cond and cond then if cond and cond then val else val else val else ( val + val * if not cond then if cond then val else if cond then val else if not cond and cond then val else ( if cond and cond then val else if cond then if not cond and cond and not cond and cond then ( ( val * val ) + ( val ) ) else if not cond then val else ( ( if not not not not", "( val ) else if not cond and cond and not cond and not cond and not cond and cond and cond and cond and not cond and not not cond and not not not not cond and not cond then ( if cond then val else val * ( if cond then if not not cond then val else ( if not cond then val else ( ( val ) ) ) + val * ( val )", "val ( ( val ) )", "val + val ) else val"], "accuracy": 0.08, "train_overlap": 0.06, "res": [{"text": "val", "log_prob": -3.700297249481082}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -26.250400485121645}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -18.5689441980212}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -79.41414958401583}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -90.5018857086543}, {"text": "( val )", "log_prob": -6.251898040762171}, {"text": "val * val", "log_prob": -5.782275368459523}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.354751917417161}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -20.874842074757908}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -87.19479227950796}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -87.49043081642594}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -76.18462647497654}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val * val * val", "log_prob": -7.761656961869448}, {"text": "val * val", "log_prob": -5.782275368459523}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -12.117378664435819}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -83.05478192528244}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -89.71749512688257}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -82.48764100437984}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -91.21776897343807}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -49.900490971747786}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -88.33025040163193}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -98.270822409424}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -66.94252328958828}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -88.47604148159735}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -79.1022658997681}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if not cond and cond then val else val", "log_prob": -9.789986411575228}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -89.04728321090806}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.13998891564552}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -46.947313545504585}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -75.85153077411815}, {"text": "( val )", "log_prob": -6.251898040762171}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if not not cond then val else val", "log_prob": -10.393336815526709}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -31.72918381600175}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -92.47234809724614}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -14.15199763874989}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -96.47929405444302}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val + val", "log_prob": -5.548786480445415}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -102.89403152780142}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -97.28635555517394}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.427294411114417}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.243464756757021}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -91.55177652498242}, {"text": "val * val", "log_prob": -5.782275368459523}, {"text": "val + val", "log_prob": -5.548786480445415}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -83.62051781197079}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -96.4640957560623}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.30963042215444}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -84.8642188255908}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -84.22138710855506}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -38.00959626655094}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -86.64902606746182}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -21.034869838738814}, {"text": "val + val", "log_prob": -5.548786480445415}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -80.07800214830786}, {"text": "( val )", "log_prob": -6.251898040762171}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -87.19392424158286}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.65195305366069}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -88.52859080466442}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -87.84327466285322}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -89.30872827838175}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -82.82248592877295}, {"text": "val * val", "log_prob": -5.782275368459523}, {"text": "( val )", "log_prob": -6.251898040762171}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -64.65320832084399}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -11.379711202695034}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -85.39532304240856}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -30.146830985555425}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -15.432858806103468}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -86.66086417937186}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.19132972275838}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -93.95471701188944}, {"text": "if not cond then val else val + ( val )", "log_prob": -13.152238996117376}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -54.53325114399195}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -74.625650829199}, {"text": "val", "log_prob": -3.700297249481082}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -89.86439786374103}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.993550126207992}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -18.50476459763013}, {"text": "( val )", "log_prob": -6.251898040762171}]}, "epoch_45.pt": {"generated_sequences": ["( ( ( if cond then val else val + ( ( val ) + val ) ) * val + ( ( val ) )", "if not cond and cond then val else val + ( ( if cond and cond then if not not not cond then if cond and cond then ( if not cond and cond and cond and cond then ( ( ( if cond and cond then ( if cond and not not cond then ( val ) else if not not not cond and not cond and not not not cond and cond then ( if cond then if cond and cond then val else ( val * if not cond and cond and cond and cond then", "val + val", "val + ( val * val + val + ( ( val ) + ( val ) ) )", "( if cond and not not cond and cond and cond then val else val", "( ( if cond then val else val )", "val * val", "val + val", "if not cond and not cond then ( if cond then if cond then val else ( val ) else ( ( val ) + if not cond and not not not cond and not cond then ( val + ( if cond and not cond then val else val ) else val else val ) ) ) else val ) else ( if cond then if cond then ( ( if cond then val else val ) else val ) else", "val", "if cond then val else val", "( val * if cond then ( val * ( if cond and cond and cond and cond and cond then val else val ) else val ) * val * val * if not not cond and not cond and not cond then ( val ) else val * val * if cond and cond then ( val + val * val * ( val ) else ( val", "val ( val ( ( ( val if not cond ( if cond then ( val + if cond then val else val + if not cond and cond and cond then val else val * val ) * if cond then ( val ) else val ) + val * ( val * if cond and cond then val else val * val * val + ( val + val + val * if cond then if not cond then val else val else if not cond and cond then val else val ) else val + ( val ) ) else if cond and not cond", "if not cond then ( ( ( val ) * if cond and cond and cond then val else ( if not not cond and not cond and cond and cond then val else val ) )", "val if cond then ( ( ( ( ( val ) ) ) * ( val * ( if cond and cond and cond then val else val ) * val ) + ( val + ( ( if not cond then ( if cond then ( if not cond and cond then if not cond then ( val ) else ( val else ( if cond then if cond then ( if not cond then if cond then val else val else ( val + if cond then ( val ) else ( val * ( ( if cond then ( val + ( val ) ) else val ) ) +", "( val * ( ( if cond and not not cond and cond and cond and not cond and not cond and cond and not not not not not cond and not not cond and cond and cond then val else ( if cond and cond and cond then ( if cond then val else val * ( val ) + if cond then ( if cond then ( ( val ) ) ) else if cond and cond and not cond and cond then ( val * ( if cond then", "val * val", "val * if cond then val else if cond and cond then val else val", "( val )", "( if not cond then val else val ) * val * val", "if cond then if not cond then val else ( ( val ) else val else if cond then val else val )", "( if not cond and cond then val else if cond then val else ( val + val ) * val ) ) * val", "if not not cond and cond then if cond then val else val else val * val", "val * ( val val ) then if cond then val else val", "if cond then ( if not not not cond and cond and not not not cond and cond and cond then if not cond then ( if not cond and not cond then ( if cond and cond and cond and not cond and not not cond and cond and not not not cond and cond and cond and not not cond and cond and cond and not not cond and not cond then ( ( val ) else val + ( ( val * val ) * val ) + ( if not not cond and cond and cond then if cond and cond then ( ( if cond then", "( if cond then if cond and not cond then if cond then val else ( if cond then ( val ) else val * ( ( ( val ) ) else val * ( val ) ) else ( val ) * ( val ) ) ) ) * ( ( val ) )", "if cond then ( val ) else val ) * val + if not not cond then val else if not cond and cond then ( val * val ) else if cond then val else ( ( if not cond then val else if not cond and cond then val else val * ( if not cond then ( val ) else", "val", "val", "( val val + val * val ( ( val + val + if cond and not not cond and not cond then val else if not cond and cond then val else ( ( val ) * if cond then ( ( ( if not not cond and cond then val else ( if not cond then val else ( if not cond then val else", "( val if cond then val val * val * if cond and cond and cond then ( ( val ) else val", "val val val", "val + val + val", "if not cond then val else ( val * val )", "val val val if cond then ( val ) else if not cond then val else val", "if val + ( if not not not cond and cond then if cond then ( if not cond then if cond then if cond then if cond then val else if cond then ( ( val ) * val + if cond and not cond and cond and cond then ( val ) else val + if cond then val else val", "( if cond and cond and cond then if not cond and cond then if not cond then if cond then val else val else ( if cond and cond then val else val ) * ( ( if not cond then if cond and cond then ( if not cond then ( ( ( if not not not not cond and cond then if not cond and not not not not not not cond and cond and cond and cond and cond and cond and cond then ( ( val ) else if not not cond then if cond then ( val ) else val else if cond", "val", "val * val if cond then val else ( ( val + val + val )", "( if not cond then ( val * ( if cond then ( if cond then if cond and not cond", "( val * if cond then ( val ) else if not not cond and cond and cond and not cond and cond and cond and not not cond and cond then if cond and not cond and cond then val else val else val else ( ( val + ( ( val ) ) ) )", "( val )", "if cond then val else ( ( ( ( val * ( if cond then ( ( val ) else ( if not not cond then val else val ) + val * ( ( val ) ) ) else if not not cond and not not cond then val else val ) ) ) ) * if cond then val else ( if cond then ( val + val ) else val ) )", "if not cond then ( if cond then val else if not not cond then val else val + ( val * if not not cond and not cond and cond and cond and not cond and not not cond then val else ( val * val * ( val ) * val ) * if not cond then ( ( val + ( if not cond and cond and cond then val else val ) * val + val )", "val", "val if cond then val else if cond then val else ( val * if not not cond then if cond and not cond and cond and cond then if not cond then if not not cond then val else val else val else val ) else ( val ) ) else val ) * val + ( ( ( if not not cond then if cond and cond then ( val + val ) else val else ( if not cond and not cond then if cond then val else if cond and cond then ( ( val ) else ( val ) ) else ( ( val ) else", "if cond then ( val * if not cond then ( if not cond then val else if cond and cond and cond and not cond and cond and not cond then if cond then val else ( if not cond then val else ( ( if cond then val else val ) ) else ( ( ( if cond then if cond then ( val ) else val ) * if not not not cond and cond and cond then ( if not cond then if cond and not cond then if not cond then ( if not not cond", "( val * if cond and cond then val else ( ( val ) ) * ( if cond and not not cond and cond then val else val ) + ( val + if cond then ( val ) else ( val + val ) )", "( ( if cond then val else ( if cond then if cond then ( val * val + if not cond then ( if cond then val else ( val ) ) else val else ( if not cond then if cond", "if not not cond and cond and not cond and cond and cond then val else val"], "accuracy": 0.38, "train_overlap": 0.28, "res": [{"text": "val", "log_prob": -2.6202753353863955}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.379510819446295}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.27688269224018}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -77.102383809397}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -90.3558258721605}, {"text": "( val )", "log_prob": -4.454387956764549}, {"text": "val * val", "log_prob": -5.163827992975712}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -13.435716197360307}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -21.439720559865236}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -85.69056807574816}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -86.79167245933786}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -73.92952028289437}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val * val * val", "log_prob": -7.752140859491192}, {"text": "val * val", "log_prob": -5.163827992975712}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.027753071859479}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -84.40221749711782}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -88.00368564436212}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -81.25200808770023}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -88.58289096481167}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -47.92949945223518}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -86.34848112263717}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -96.95075233606622}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.2106195059605}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -86.08472096011974}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -80.09254744602367}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if not cond and cond then val else val", "log_prob": -8.39641834050417}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -89.31519422493875}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -85.31624304736033}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -46.72008104948327}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -74.72737373667769}, {"text": "( val )", "log_prob": -4.454387956764549}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if not not cond then val else val", "log_prob": -8.04624334233813}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -30.694685142021626}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -94.76784410933033}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -14.760105865891092}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -94.89796109404415}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val + val", "log_prob": -5.111346729681827}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -100.3007878717035}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -98.94084376445971}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -15.78885193169117}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.042803110787645}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -90.83029990387149}, {"text": "val * val", "log_prob": -5.163827992975712}, {"text": "val + val", "log_prob": -5.111346729681827}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -81.94443396944553}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -99.76084754802287}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -88.94695135462098}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -83.94176892470568}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -85.54626956954598}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -36.06982457311824}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -85.83881202409975}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -19.31694296328351}, {"text": "val + val", "log_prob": -5.111346729681827}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -84.21711151860654}, {"text": "( val )", "log_prob": -4.454387956764549}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -88.4505010470748}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.87207662081346}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -88.66431021294557}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -87.6630798978731}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -89.43144095269963}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -82.35794502147473}, {"text": "val * val", "log_prob": -5.163827992975712}, {"text": "( val )", "log_prob": -4.454387956764549}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -64.40032799192704}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.086443770676851}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -85.41643237578683}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -28.17776666302234}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.683274104259908}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -85.66415091697127}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -86.49136635381728}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -92.43228877801448}, {"text": "if not cond then val else val + ( val )", "log_prob": -10.876193145057186}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -54.0203696815297}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -72.94358775881119}, {"text": "val", "log_prob": -2.6202753353863955}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -86.91320449649356}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.246157912537456}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.467625787481666}, {"text": "( val )", "log_prob": -4.454387956764549}]}, "epoch_5.pt": {"generated_sequences": ["val + if cond and not not cond and not cond and cond then val else ( val else val + val + if cond and cond", "( if cond and cond and cond then val else ( if cond then if cond and cond and cond and cond and cond then if not cond and cond and not cond then if cond then ( ( val else if cond then if not cond and cond and cond and cond then ( ( if cond and not not", "( if cond and cond and cond and cond and not not cond if cond and cond then ( ( if cond and not cond then val * ( val * ( val ) * val + val ) else val ) ) else if not not cond and cond then if cond and not not cond then val else if cond and not not not cond and cond and cond then val ) ) else ( if cond then ( if not cond then if cond then val else ( if not cond and cond then if not not cond and cond and cond then if cond then if cond and cond and cond and cond and cond then if not not cond and cond then if cond then if cond and not not cond and cond and not cond and", "( ( if cond and cond and cond and cond and cond and cond then if cond then ( ( ( val else if not cond and cond and not cond and cond and cond then if cond and not cond and not cond and cond and cond then val else val else if cond then if not cond then if cond then if cond and cond and cond then val else ( if not not cond and not cond and cond then ( ( if cond and cond and cond then if cond and cond and cond then val else ( ( val ) * ( ( val else if not not cond and cond and not cond then val ) else if not cond then val ) else val ) else val else ( ( ( val", "( ( val + ( if cond then val else if cond then if cond then if cond and cond and cond then ( val else if cond and not cond then val ) else if cond then ( ( val * val ) else ( if cond then if not not not cond then val", "val ( ( if cond and not cond and not cond and not cond then ( ( if cond and cond and cond then val else ( ( val ) * ( if not not not cond then ( if cond then ( ( val * val * ( ( ( val ) * ( val else ( val ) ) ) ) * val ) + ( ( if not cond and cond then ( ( val ) * val ) else if not cond and not cond and cond and cond then if cond and cond and cond and not cond then ( if cond then val ) ) ) else ( ( if cond and cond then ( ( ( ( ( ( val + ( if cond then val ) * ( ( if cond and cond and not cond and cond then ( ( ( ( ( if cond and", "if not cond and cond and cond and cond and cond and cond and not cond and cond and cond then val else val * val + ( val * (", "val * ( val else val ) ) + val ( if cond then val else val ) val ) if not cond and not cond and cond and cond and cond then ( ( val * val else ( if cond then val + if cond then ( ( if not not not not not cond then val else ( val else if not cond then val else if not not not not cond then if cond then ( ( if cond then val else ( val * val else if not cond and cond then val * val + ( val * ( ( ( if cond and cond and cond then ( if cond then if cond then ( ( val else if not cond then val ) ) else if cond then ( if cond and not cond and cond and not not cond then if cond then val else if not cond then ( if cond and not cond then if cond and cond and cond and not cond and not cond then if then val ) ) else ( ( val * val ) else val", "( ( ( if cond and cond and cond and not not else ( val else ( if cond then if cond and cond and cond then val else if cond and not not cond then ( val + ( val ) else ( if cond and not cond and cond and cond and cond and cond and cond and cond and cond then ( ( ( val", "( if cond and val ( val else ( ( ( val * val * val else val ) ( if cond then val * if cond then ( if cond and cond then if cond then if cond and cond and cond and cond and cond then ( if cond then if cond then val else val * ( val else val ) else if cond and not cond then if cond and cond then ( val ) ) * val else if cond and cond then if not cond then ( if cond and cond and cond and cond then if cond and cond and cond then if not cond and not cond and cond and cond and cond and cond then if cond and cond then val * ( if not cond then if not cond then val else ( val else val ) else if not cond and cond then val * val * val else val else if cond and cond then if cond", "val else ( val * if cond and not val val ) else ( ( val * ( ( if cond then ( ( ( val * if not cond and cond then val else ( ( if cond and cond and cond and cond and cond and cond and cond and not not not cond and cond then if not cond and cond and not cond and cond and cond then ( val else val * val ) else if cond and cond and cond and not cond and cond and cond and cond then if cond and not cond and cond and cond and cond then if not not cond and cond and not cond ( if not cond and cond then val else ( val ) else if cond then val else ( ( if cond then ( ( if cond and cond and cond then ( if cond then val else ( ( ( if cond then ( val ) + val )", "val + ( ( ( ( val if cond and not cond then if not cond then if not cond then val if cond then val else val else if cond then if not cond then if cond and cond and cond and cond then ( val else if cond and cond then if cond and cond then ( val else ( val * ( ( if cond then val + ( if cond then if cond then ( val ) + if cond then if cond and not cond then if not not cond and cond then if cond then ( ( if cond then if cond and not cond then ( val ) ) cond then val else val else ( if cond then val ) else val else if not cond then ( if not not not cond then val else if not cond then ( ( val else ( if cond", "val + ( ( ( val * ( ( ( val * if cond and cond and not cond then val else val ) ) ) ) + if not cond and cond and cond then ( if cond then if cond and not cond and not cond then ( val else val", "val else ( ( ( ( ( if cond then val else ( val * if cond and cond then ( if not cond then val else ( if not cond then ( ( val else val ) + if cond and cond then ( ( ( if cond then val )", "if not not cond then if not cond and cond and cond then if cond then", "val + val if not not cond and cond then if cond then if cond then if not cond then val else val else ( ( if cond then if not cond then if not not cond then ( ( val * ( ( val ) * val else ( ( ( val ) ) * val ) else if cond then if cond then if not cond and cond and cond then if cond then if cond then val ) else ( if not cond then val + ( ( val + ( val * val + if not cond then val + if cond then val else val * if not cond then if cond and not not cond then val ) else val * if cond then if cond then ( val else ( val * ( if cond and cond then ( ( val + if not cond then val + ( ( if not cond and not cond then if", "( val ( val * if cond then if cond then val else ( val * ( val + val ) * val else val * ( val + if cond then val ) * val ) ( if cond then ( val ) else ( if cond and not ( val ) ) * val ) else ( val + val + val else ( if cond then if cond then ( val else val * ( val else ( val + ( val ) * val * if cond and cond and cond then if cond then if cond then val else val ) ) + ( ( val ) ) ) * val * val + val ) + ( ( if cond and not cond and cond then ( if cond and cond and cond then ( val * val ) else ( ( ( if cond then if cond then val else if cond then if cond and cond and cond then if cond and cond then val )", "( val ( if cond and not not cond and cond then ( val + val else if not not cond and cond and cond then val val else if cond then ( ( ( ( ( val else ( ( ( val ) else val ) ) * if not cond and cond and cond then if not not cond then if cond and cond and cond and cond and not cond and not cond and cond and cond then val ) else ( if not cond then val else if cond then if cond and not cond and cond and cond and cond and not cond then val ) + ( if cond and not cond then if cond then if not cond and cond and not cond then ( val ) else val + if not not cond then ( ( if cond and cond and cond then ( if cond and cond then ( if not cond then val ) else val ) * ( val else val + * val ) else if cond then if cond then val else val + (", "val if not cond and cond then if not not cond and not cond then if cond and cond and cond and cond and cond and cond and not not not not not cond then val else ( val else val else val * ( val ) ) else val ) * val * if cond then ( val else ) ) * val ) ) * ( val else ( ( val * ( if not cond then val * else ( ( if cond and cond and cond and cond then if cond then ( val + val ) else ( val ) ) + ( if cond and cond then val else ( ( val else val ) + val ) * val ) else val + ( val else if cond then ( ( ( if not cond and not not cond then val ) ) * ( if cond then if cond then if cond and cond then val ) + if cond and not not cond and cond then val else val * if not not cond then ( if not cond and not not not not not cond and not cond and cond and cond then val ) + val else ( ( ( ( ( val * ( val ) ) ) ) ) + val +", "val + ( ( val if not not cond and cond and not not cond and if not not cond then val else val else val else val + ( if cond and not cond and cond and cond then ( ( val * if cond and not cond and cond and cond and not cond then val else val * ( val ) ) * val ) else ( if not cond then if not cond", "( ( val ) + if not not cond and cond and cond if cond and cond then val else val else val else val else if cond then ( if not cond then val ) else val else ( if cond and not cond and not cond and cond then val + if not cond and cond then", "if not cond then if not cond and cond and cond then if cond then ( if cond then val * val * if", "val * ( if not cond and not cond and not not not cond and cond and not not cond and cond then if not cond and cond and cond and", "( if not cond and cond and cond and not cond and cond and cond then val else if", "( ( if cond then if cond and not cond and val else ( val ) * if cond then val else val else if cond and cond and not cond and not cond then if cond then val else val else if cond then if not cond and cond and cond then ( val else ( ( if cond and cond and not not cond and cond and not cond and cond and cond and cond then if not not cond then ( ( val else ( if cond then ( val else ( if cond then if not not not cond then if cond and cond then if not cond and cond and cond and not cond and not not cond and cond then val else ( val ) * if cond and cond and cond then ( val else ( if not cond and not", "if cond and cond and cond and not cond and cond and not cond and not not cond and cond and not cond and cond then ( if cond and cond then val else ( ( if cond if cond then val else ( ( val * val * ( val * if not not cond then ( ( ( val ) + val ) else ( ( ( ( val ) ) else ( if cond then val ) else ( if not not cond and not cond then ( val + val * val * if cond then val * ( if cond then val + ( if not cond and not not cond and cond then ( and cond and cond and cond then if cond and cond then if not cond and cond and not not not cond and cond and not cond and not cond and cond and cond then ( if cond and not cond then ( ( if not not cond and not cond then ( if cond and not cond then if cond and cond then if cond and cond and cond and cond and cond then ( val else ( val * val ) else val * val else val else ( if cond and cond then ( val else ( ( ( val ) ) ) else val ) * if not not cond then if cond and not not cond and not cond then ( if cond and not cond", "( if cond then val else ( ( ( if cond then ( ( ( if cond then ( ( ( ( if cond then val * val ) else ( if cond and cond and cond and cond and cond then if not not cond then", "if cond and cond and cond and not cond and cond then val else if not not cond and cond and cond then if cond and cond and not cond and cond and cond and", ") val * ( ( ( ( if not not cond then val + ( ( if not cond val * val ) + if cond then val * val else val else ( if cond then val else val ) ) ) else val else ( val ) else val ) else val", "( ( ( val ( if cond then val else if cond and not cond then ( ( if cond then ( if cond then ( if not not not cond then val ) + if cond then val else val ) else if not cond and cond then val ) ) ) else if cond and not not not not cond and cond then ( ( val + val + ( ( val else if cond then ( val * val + ( if cond then ( ( ( val ) else val * val else val ) * if not cond and cond then val else val ) ) ) else ( val * val ) + if cond then if cond then val ) * val ) else ( if cond then if not cond then ( val", "val * ( ( ( ( val * val * val + ( val ) else val", "if not cond if not cond then val", "val val + if cond and cond and cond then if cond then ( val else if not cond then if cond and not not cond and cond and not not not cond then ( if cond then val ) else val + val + if cond then val + val * val * ( ( val * ( val * val ) + ( ( if not not not cond and cond and cond and not cond and not cond and cond and cond then if not cond then ( if cond then val ) + if cond and cond and not not cond and not cond then val else val else else val ) else if cond then val * val ) else val ) * val * ( ( ( val else if not not cond then if not cond and cond then val else val else val + val ) * val else val", "if not not cond and not not cond and cond and cond and cond and not cond and cond and cond and cond then val + if cond then val else val else val else ( ( val ) * if cond and not cond and cond then ( ( if not cond then if cond and cond then val else if not cond and cond then if cond then val + val ) ) else val ) + val + if not not cond then ( val * val else if not not cond then if not cond then ( val ) else ( val else val ) ) * ( ( ( val ) + if not cond and not not cond then ( if not cond then val + ( val else ( ( val ) else val", "val * val * ( if cond then ( val ) ) * val else val val ) * ( if cond and not cond and cond then if cond then cond then val else val else ( ( ( if cond then ( val ) ) ) * if cond then val + ( ( val + val ) ) + val else val ) * val + ( ( val else val + val ) + val", "( ( ( if not cond and not not cond ( ( val + ( val * val + if not cond then if not cond and cond and cond then val else if cond and cond then val + val ) else ( val * val * val )", "val ) else ( val ) ) * if cond and not cond and not not cond and cond and cond and cond and cond and cond and cond then if cond then ( val + if cond and cond and cond and cond and cond and not cond then ( if cond then if cond and cond then val else val else ( ( if not cond then if cond and cond then if cond then ( ( val + ( val else val else val ) else ( val ) ) * (", "if cond and cond then if cond then val else val", "( ( ( ( val ) ) ) ) + if cond and not cond and cond and cond and cond then if cond and cond then val else ( if cond and not cond and cond and cond then val * ( if not cond then if cond then ( val else ( val else val ) * if cond and cond then ( if not cond and cond and cond and cond and cond and cond then if cond then val ) else val ) ) + if not not not cond and not not not not not cond then if not cond then ( if cond then ( if not cond and cond and not cond and not cond and cond and", "( val + if cond then val else ( ( ( val ) * ( ( ( ( ( if cond then ( ( val * val + val * if cond then ( if cond then ( ( if not cond and cond and cond then val else val ) else ( ( val * val else val * val * if cond then if cond and not cond and cond and not cond and cond and not not cond then val ) + if not not not not cond and cond then val else val else val else ( (", "( if cond and not cond and cond and cond and not cond then val ) else ( val + val + ( val ) ) * if cond then val + if cond and not not not cond", "val * if not cond then ( if cond and cond and cond and not not cond then val else if cond then if cond and cond and not cond and cond and cond then if not cond and not cond and cond then val else ( val + (", "( if not not cond and not cond and cond and cond and cond and cond then ( ( if cond and cond and not not cond and cond and not not not cond and not cond and cond then if not cond then val else if cond then if not not not cond then if cond and cond", "val * ( ( if cond and cond then if cond and not not cond and cond then val else ( val ) val ) ) ) else val ) + if cond and cond and cond then if cond then ( val + if cond then if not not cond then ( if cond and cond and not cond then ( val else val + ( val else if cond then if cond and cond then val else if not cond and cond then if cond and cond then ( val ) else ( val else val ) else if cond then val", "val else ( if not cond and cond and cond then ( if not not cond and cond else if not not cond and not not cond and cond and cond and cond and cond and cond and not cond and not cond then ( ( val * val ) else ( val ) else if not cond and not", "if cond and cond then if val else val if cond then if cond and cond and cond then ( val else val ) else if cond and not not cond and cond then ( val ) else ( val ) * val else val else val ) else ( if cond then ( val else val ) ) else val else ( ( if not not not cond then ( val + ( ( ( if cond and cond then val * ( val ) ) else ( ( if cond then val ) ) ) ( val else ( ( val * val * val * val * val + ( ( ( if cond then if not not not not not cond then val * if not cond and not cond and not cond then if cond and cond and not cond and cond and cond then ( if cond then if cond and cond and cond and cond and cond and cond and cond then val else ( ( ( if cond then if not cond then ( ( val else ( val else val else ( val val else ( val else ( ( val ) + val ) + val ) else if cond then ( val * val * if cond and cond and not cond then val ) else ( val * if cond then val else val * val ) )", "val ) * ( ( if not cond then if cond and not cond and cond then ( val * if cond then ( if cond then ( val", "val + ( if cond and not not not not cond then val else ( ( ( if not cond and not cond then if cond and not cond and cond and not cond and cond and cond and not cond and cond and not cond and cond and not cond and cond then if cond then ( val else if cond and cond then ( ( ( if cond and not not not cond and not not cond then if not not not cond then if cond and cond and cond then ( ( val + val else val else val )", "val ( val", "( val + if cond then ( ( if cond then ( ( ( val else ( if cond then if not cond then if cond and not not not cond then val else val else val else if cond then if not cond and"], "accuracy": 0.0, "train_overlap": 0.0, "res": [{"text": "val", "log_prob": -6.829612746834755}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -31.35896995291114}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -25.0310678165406}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -98.00084647070616}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -103.93177590332925}, {"text": "( val )", "log_prob": -8.888153962790966}, {"text": "val * val", "log_prob": -9.271830588579178}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -20.090058971196413}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -28.427259353920817}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -99.42515022866428}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -104.3860114980489}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -89.8261304590851}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val * val * val", "log_prob": -11.882854949682951}, {"text": "val * val", "log_prob": -9.271830588579178}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -15.5737866461277}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -95.95907563250512}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -99.32108260504901}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -103.73623396735638}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -104.91744904499501}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -58.45339012891054}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -99.11763759050518}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -105.8590560015291}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -79.1722546517849}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -100.57346855662763}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -88.80675314646214}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if not cond and cond then val else val", "log_prob": -13.13054608553648}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -95.95384086295962}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -92.69960171915591}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -52.397483583539724}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -88.4769918397069}, {"text": "( val )", "log_prob": -8.888153962790966}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if not not cond then val else val", "log_prob": -13.112458489835262}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -39.905907237902284}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -110.98491336219013}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -19.34678104519844}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -111.38957410678267}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val + val", "log_prob": -9.61007972061634}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -115.88187393546104}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -112.15763860195875}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -20.605084903538227}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -21.05636783875525}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -105.85746748745441}, {"text": "val * val", "log_prob": -9.271830588579178}, {"text": "val + val", "log_prob": -9.61007972061634}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -93.55287250131369}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -110.00866429135203}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -100.93616427108645}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -95.08880718052387}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -94.25488817505538}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -44.33585591055453}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -108.2670240867883}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -26.57032512128353}, {"text": "val + val", "log_prob": -9.61007972061634}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -91.73401989974082}, {"text": "( val )", "log_prob": -8.888153962790966}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -102.12103157583624}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -21.046528536826372}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -106.6279095550999}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -94.06542777083814}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -102.25839572399855}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -96.60664155520499}, {"text": "val * val", "log_prob": -9.271830588579178}, {"text": "( val )", "log_prob": -8.888153962790966}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -75.00144162215292}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -16.913688085973263}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -95.33647960890085}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -36.1976649351418}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -19.128315530717373}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -102.61384962219745}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -98.6048014126718}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -109.26148856151849}, {"text": "if not cond then val else val + ( val )", "log_prob": -17.97062238305807}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -64.67087017558515}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -92.41931329667568}, {"text": "val", "log_prob": -6.829612746834755}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -98.2083281269297}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -20.060752430930734}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -23.833263523876667}, {"text": "( val )", "log_prob": -8.888153962790966}]}, "epoch_50.pt": {"generated_sequences": ["( ( val * ( ( val ) * if cond and not not cond then val else ( ( val + ( if cond then ( ( ( ( if cond then ( if cond then if cond and cond then if cond then ( val ) else val + val * val else ( val * val ) * if cond then val else if cond then if not cond then val else val else ( if cond then ( ( ( if not cond then if not not cond then if if not cond then if cond and cond then val else ( val ) else val * val + val )", "val", "( val ) )", "( ( val ) ) else ( if cond and cond and cond then ( if cond and not cond and not cond and cond then val else if not not cond then if cond then val else if cond then val else val else val ) ) + val ) + if not not not cond and cond and cond and cond then ( val + ( ( if cond then if cond then if not not", "val ) else val * if cond then val else val", "if not cond and not not not cond then if not cond and not cond and cond and cond and cond and cond then ( ( val ) ) else val ) * if cond then if cond then val else val else val else if cond then val else ( if cond then val else ( val ) ) else val ) ) * if cond and cond and cond and cond and cond and not cond then val else val ) + ( val * val * val ) ( ( if not not not not cond and not cond and not not cond and cond and cond and cond and not cond and cond and not cond and not cond and not cond and cond and not cond then ( ( val ) ) ) ) else val", "( val ) * ( if cond then if cond then if not cond then val else if cond and cond then if cond then if cond and not cond and cond then val else ( val ) else ( ( val * if cond then ( if cond and not not cond and cond and not not cond and cond and not not not cond and cond and not cond and cond and not not cond and cond and cond and cond and cond and cond and cond and not not cond and cond if cond and cond then val else val + ( if not cond then if cond then val else if cond then ( ( ( val ) + if cond then ( val + val ) else val + if not not cond and not cond and not not not cond then ( ( ( ( val cond then if cond and cond then if cond then if cond then if cond then if not cond then val else ( ( ( ( val + val ) * if cond", "val * val", "if cond then ( if cond then val else ( ( if cond then if cond then if not cond then if not not not not not not cond then ( val ) else ( val * val + val ) else if cond then val else ( val * if not cond and cond and cond and cond and cond then ( ( val ) * val ) ) else if not not cond then ( val + val ) else if cond then if cond then val else if not not cond if cond then val else ( if not cond and not cond and cond then if not cond and not cond then if cond then val else val else ( if cond then val else val ) ) * val ) )", "val + val + if cond then ( val ) else ( val * val * if cond then ( if cond and cond and cond then ( if cond then if not not cond and cond then if not not cond and not not not cond and cond then ( val ) else if cond and cond and not not cond and not not cond and cond and cond and cond and cond and cond and cond and not cond and cond and cond then ( val + val ) else ( if not cond and cond and cond and not cond val", "if cond then ( ( val + ( if not cond then val else val ) * if cond then val else ( ( if not not cond and cond and not cond and cond and cond then if cond then ( val ) else val + ( val ) + val ) ) * val + ( ( if cond and not cond then ( val * val * val + if not cond and not not cond and cond and not not not not cond and cond and cond and not not cond and cond and not cond and cond and cond then val else ( val * if cond ( if cond then val else val * ( val * ( val ) ( val ) ) * ( val ) * if cond then if cond then ( if cond then val else ( ( val ) * ( if cond then if cond then val else val + if cond then val else if cond then if not cond and not not cond and cond and cond and cond and cond then if cond and cond then val else ( val * ( ( if not cond and cond and cond then if cond then val and cond and cond and cond", "if cond then val else val * val + val * val + ( ( ( ( ( val + ( val ) ) ) ) ) ) + ( val ) )", "( val * if cond then ( if not cond then if not cond then ( ( if not not not cond then val else if cond then if not cond then val else val else if not cond and cond then val else val + ( val * val ) ) ) + if cond then ( val ) else if not not cond then if cond then val else val else if not not not cond then ( ( if cond and not not if cond and not cond and cond then val else ( val * ( val ) ) + val )", "val", "( if cond then if cond then ( val ) else val + val + if not cond and cond and cond then ( val ) else if not cond then if cond then val else ( if not not not cond then ( if cond then val else val ) else ( val * if cond then val else ( if not cond and cond then val else val ) else ( if cond then val else if cond and not not not not cond and cond and not not cond ( val ) + ( val ) * val * ( val ) )", "val * val * val * ( ( val ) ) else if not not not cond and not cond and cond and cond and not cond and cond and not cond and not cond and cond and not cond and cond then if cond then val else val else if cond then if not cond then val else ( val + if not cond then val else val ) else val ) else val else val * val * val ) ) + val ) * ( val + ( ( ( ( if cond then if cond and cond then if cond then val else ( if not", "val * val", "( val ) * if not cond and cond and not cond and cond and not cond", "( val ) else if cond then if not cond then val else if not cond and cond then val else val else if cond then val else ( ( val ) ) ) else if not not cond and cond and cond and cond and cond and not cond and cond and cond and cond and cond and cond and cond then ( ( ( val ) * if cond then if cond then ( val ( val ) + if not cond then val else ( val ) + if cond and cond then ( val ) else val ) ) else if cond then if cond and cond and not not cond and cond and cond then if not cond then val else ( ( val * val + ( val * val ) ) ) else val else val ) else ( val else val + if cond then ( val ) else val ) else val ) ) else val else val * val else val else if cond and cond then if cond", "if not cond and cond then val else ( val )", "val", "val", "val", "( val * val * if cond then if not not cond and cond and cond and cond and not cond then if cond then ( val + ( val ) * if cond and cond then if cond then if not cond then ( val ) else val * ( if not cond and cond and cond then if not cond then ( val + ( if cond then val else if cond then val else val ) * val * val ) else ( val ) + val + if cond then if cond then val else if cond if cond then if cond and cond then ( if cond and cond then val else if cond then val else ( val * val ) else ( if cond then if not cond then ( val ) * val * ( val ) ) ) else val * val else val else ( ( ( ( ( val ) ) ) ) + val ) ) * val + ( if cond and cond then val else val ) + ( if not cond and not cond then if cond then if cond and cond and not not cond and cond and not", "if cond then if cond and cond then ( val ) else val else ( if cond and cond and not cond and cond and", "( if cond then if cond then val else val * ( val ) ) else ( if cond and cond and cond then if cond then val else if cond and cond then ( if not cond then ( if cond then val else if cond then val else if not cond then val else val else if cond then if not cond and cond then val else val else if cond then val else val else if cond and cond and cond then if cond then ( if cond then if cond if cond then val else if cond then val else val", "( if not cond and cond then ( ( val ) + if cond and cond then if cond then val else val else ( ( if not not cond and not not not not cond and not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond then if cond then if cond then val else val else val + if cond then val else if cond and cond then val else ( val ) * ( val ) + ( ( if cond then val else ( val + val + val val ( ( val ) )", "( ( ( ( val ) * val ) ) else ( if cond then if cond then if cond then val else ( ( val ) ) + ( if not cond then val else if not cond and cond then ( if cond and cond then if cond then ( ( val * val + ( if cond then ( val ) else val * ( if not not cond then ( ( if cond then ( val + if not cond and cond then val else val ) + ( if cond then if not cond ( if not cond and cond then val else ( val * ( ( val ) ) * val ) * val * val * ( ( val * ( ( if cond and not cond then ( val ) else val ) ) * if cond then ( val * ( val ) * val * if cond then val else if cond then ( val ) else val ) * ( if cond and cond then if cond then ( val + val ) else ( val ) + ( ( if cond then ( val ) else val + val ) else val ) * if cond then if cond then ( val ) else if cond then if cond then if not cond then val else ( if cond then ( val ) else ( ( if cond then ( val ) ) else", "if cond then val else val", "( if cond then ( if not not not not cond and cond and cond and cond and cond and not not not cond and cond and cond and not cond and cond and cond then ( val ) ) else val else ( if cond and cond then ( val * if cond then ( ( val ) else val + val * val * if cond then ( ( if cond then val else val ) + val + val val ( if cond and cond and cond then if cond then ( ( ( if cond then if not cond then val else val * val * if cond and cond and cond and not not cond and not cond and cond and cond and cond and cond then if not cond then ( ( if not cond and cond then ( if not cond and cond and cond then ( val ) else ( ( ( val * val * val ) * ( ( val ) + ( val ) ) ) + val else ( val ) ) ) * ( if cond and not cond and cond and not ( if cond then val else val )", "val", "( val )", "( ( ( if cond then if not cond then val else val * val * val ) + val ) * if cond then val else ( val + val * val ) + ( val * val + ( val ) ) ) if not cond then ( val ) else val", "val", "if cond and cond and cond and not cond then val else if cond and not not cond then ( if cond then if cond and cond and cond then if cond then val else ( ( if cond then val else if cond and cond then if cond then val else if cond then ( val * ( val ) * ( ( ( ( ( val * if cond then val else val ) + if cond then val else ( val + if cond then ( ( if val * val * ( val ) ( if cond and cond and cond then if cond then if cond then val else val else ( ( if cond then ( if cond then ( if cond and cond then val else val ) else ( if not cond and cond then if not cond and cond and not cond and cond and cond and cond and cond then val else val else ( if cond then ( if cond then val else val ) * ( ( val * val ) ) ) * ( ( val ) ) ) + ( if cond then ( val ) else ( if cond then val else ( ( val ) ) ) val", "val * val * if not not cond then val else ( ( ( ( ( if cond then if cond and cond then val else ( if cond and not not not cond and not cond then if cond then val else val ) else if cond then if cond then ( ( ( ( val ) + if cond and cond then ( ( ( val ) ) ) + val ) else val * if not cond and cond and not not cond and not not cond and cond val * val + ( val + ( ( val * ( ( if cond then ( val ) else val * if cond then val else ( ( ( ( if not cond and cond and cond and cond and cond then ( val ) ) else if cond then if cond then ( ( val ) ) else if not cond and cond and not cond then if cond then val else if not cond then ( val ) else val ) else val else ( (", "( ( ( if cond and cond then ( if cond then val else val * val + ( ( ( if cond then val else if not cond then val else val ) * val * ( val * ( ( ( ( ( val + ( val * ( if cond then ( ( if cond and cond then if cond and cond and cond and not cond and cond and cond and cond and cond and not cond and cond and cond and cond and cond and cond and not cond if cond and cond then val else if cond then ( if not cond then if not cond then val else val else val ) else val ) ) ) else val * val", "val", "if cond then ( if not cond and cond and cond and cond then if not cond and cond and cond then val else val else if cond then if cond and cond and not cond then val else if cond and cond and cond then val else if cond then val else val else val ) ) else if cond then if cond then if cond then if cond then if cond then ( ( val ) ) else ( val ) + if not cond then val else if not not cond and not cond and cond and not cond and cond and if cond then if cond then val else val else val else if cond then if cond then ( if cond and cond then ( if cond then if cond then if cond", "if cond then if not cond then val else val", "val", "if not not not cond and not not cond then if cond then val else val", "val * ( if cond then ( ( if not cond and cond and cond then ( if cond then val else val * if not not not not cond and cond and cond then ( if cond then if cond and not cond then ( ( if not not cond then val else val ) ) else if not cond and cond and not not cond and cond and not cond and cond then if cond and cond then if cond then if not not not cond and cond and cond and not cond and cond and not cond and cond then ( val * ( if not cond and cond if cond then val else val", "if not not cond and cond then val else if cond then val else if cond then val else if cond then ( if cond then ( val ) else val * val else ( val + ( if not cond then if cond and not cond and not not cond and not cond and cond and cond and cond and cond and cond and cond and cond and cond and cond val else val * val + val + val + val", "val else ( val + ( ( if cond and not cond and not cond then ( val ) else val ) else ( if cond then ( val ) else if not not cond then val else val * if cond then if cond then ( if cond then val else val * ( if cond and not cond and cond and cond and cond and cond then ( if not not cond val * val * if cond and cond and not not cond and cond and not cond then val else val * if cond then val else val ) else val", "if cond then if cond and cond and not cond and cond then ( if cond", "val", "val else val + val * val * ( if not cond then if cond and cond and cond and cond and not cond and not cond and cond and cond and cond and cond and cond then val else val ) else val ) + val * ( ( if cond then if not cond and cond then if cond and not not cond and cond and cond then val and cond then if cond then if cond then ( val ) else ( if cond then if cond then ( val + if cond then if not not if cond then val else ( if cond then if not cond then if not not not cond and not cond and cond and cond and cond and cond and cond then val else val else val + ( val ) ) else ( ( ( if not not cond and cond and cond and cond and cond and cond then val else ( val * val * val ) * val ) + val ) + val val", "( ( if cond then val else val ) else if cond then val else val ) else if cond then ( ( ( if cond and not cond then if cond then if cond then val else val + ( if cond and cond and cond then ( if not not not cond then val else val ) else if cond and cond then if not cond then if cond then val else if cond then if cond then if cond then val else if cond then ( if cond then ( if cond then", "( ( val * ( if cond then val else ( ( ( val * val + ( ( val ) ) * ( ( val ) ) ) * val ) * if cond then if cond and not not cond and cond then ( ( if cond then val else ( ( val * if cond then val else ( ( ( val ) + val * ( if not cond then val else if cond and not not cond and cond then ( val ) else ( val ) * val * if cond and cond and cond and not not cond and cond ( if not cond and cond then val else if not cond and not cond then ( if cond then if not cond then val else ( ( val ) * ( if not cond and cond then ( if cond and cond then ( val ) else val ) else if cond then if cond and cond then val else val else ( val ) ) ) ) else ( ( ( if cond then val else ( val ) ) ) * val ) ) ) )"], "accuracy": 0.3, "train_overlap": 0.28, "res": [{"text": "val", "log_prob": -3.960277669131756}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -25.03597153373994}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -19.557877979474142}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -81.06860235286877}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -91.19744030758739}, {"text": "( val )", "log_prob": -5.604700471740216}, {"text": "val * val", "log_prob": -5.991319625638425}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -14.291683279443532}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -20.833289458416402}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -89.32866407930851}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -87.20883714524098}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -78.83733303984627}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val * val * val", "log_prob": -8.52016315003857}, {"text": "val * val", "log_prob": -5.991319625638425}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -12.212626983877271}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -84.60424756305292}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -89.73532081372105}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -84.69192862161435}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -93.10679264203645}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -52.0202389776241}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -90.80039765755646}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -96.79839167685714}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.95187525660731}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -87.1717520741513}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -81.63050737557933}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if not cond and cond then val else val", "log_prob": -9.626081652240828}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -90.60507322940975}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -84.62233664491214}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -47.30432375520468}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -76.2233895213576}, {"text": "( val )", "log_prob": -5.604700471740216}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if not not cond then val else val", "log_prob": -9.620704317872878}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -32.77225031843409}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -94.79272917844355}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -14.157261403859593}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -94.6008293395862}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val + val", "log_prob": -6.113271434325725}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -96.82424635835923}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -99.3724052561447}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.141096093691885}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -17.352806114358827}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -96.11508653080091}, {"text": "val * val", "log_prob": -5.991319625638425}, {"text": "val + val", "log_prob": -6.113271434325725}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -84.74031224555802}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -95.03856401634403}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -88.43373808613978}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -86.58628313918598}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -84.60185536229983}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -37.530381709337234}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -89.6702311844565}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -21.72817640961148}, {"text": "val + val", "log_prob": -6.113271434325725}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -85.34166732034646}, {"text": "( val )", "log_prob": -5.604700471740216}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -90.07212868682109}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.020295879337937}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -89.56142491474748}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -95.01641254476272}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -92.84903562325053}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -82.46187473996542}, {"text": "val * val", "log_prob": -5.991319625638425}, {"text": "( val )", "log_prob": -5.604700471740216}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -70.62339089810848}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -12.116428718320094}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -90.49587276251987}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -29.131187176331878}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -15.421372862998396}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -87.34741479344666}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -89.8027808109764}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -91.49980682879686}, {"text": "if not cond then val else val + ( val )", "log_prob": -13.500991469365545}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -56.73829906992614}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -75.30554545670748}, {"text": "val", "log_prob": -3.960277669131756}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -89.75571780418977}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.521583489724435}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -18.952218488557264}, {"text": "( val )", "log_prob": -5.604700471740216}]}, "epoch_55.pt": {"generated_sequences": ["( ( val + if not not cond and not cond and not cond and not not not cond and cond and not not cond and not not cond and not cond and not cond and not cond and cond and cond and cond and cond and not not not cond and cond and cond and cond and cond and cond and cond and not cond and cond and cond and cond and cond and cond and cond then if cond then val else ( val + ( val ) ) )", "val", "val", "val * val", "val", "val * val", "if cond then ( val ) else val * val + if not not not cond and not not cond and not not cond and cond then if cond then ( ( ( val ) ) ) else val", "( if cond and cond and not cond and not cond and cond and not cond and cond and cond and not cond and cond and cond and not cond and cond and cond and not cond and not cond and not cond and cond then val else ( if not not cond and cond and cond then ( val ) else if cond then if cond then val else if cond then ( if not not cond and not cond then ( ( if not cond then if cond then ( val ) else val else ( ( val ) + if cond then", "( val ) * val + ( val + if cond then val else if cond and not cond then val else val )", "if cond then val else ( if cond and cond then ( val ) else if cond and cond then if cond and cond and cond then val else ( if not cond and not not cond and not not not not not not cond and cond and cond and cond then ( ( val * ( ( ( if cond then val else if cond and cond then if cond then val else val else val ) else ( if cond then val ) )", "( ( val * if cond and not cond then ( ( ( if cond then val else if not cond and cond then if cond then if not cond and not cond then ( ( ( ( if not cond then val else if not cond and cond and not cond and cond and not cond and cond and cond and not not not cond and cond and cond and not cond and not not not cond and cond then if cond then if cond then if not cond and not cond then val else val else if not cond then val else if not cond then val else val + val *", "( ( if cond and cond then val else val )", "( ( ( val ) * if cond then if cond and cond then ( ( val ) + if not cond then if cond then if cond then val else if cond then val else if cond and cond and cond then if cond then if cond then val else val else val else ( ( if cond then val else val * ( ( ( if not not cond and cond and cond and cond and not cond and not cond and cond and cond and not cond then val else ( val * val * ( if cond", "val", "val", "if not cond and cond and cond and cond and cond and cond then val else if not not cond then val else ( val ) + val ) else val + val", "val", "val * val * if cond and not cond and cond and cond and cond and cond and not not cond and cond and not cond and not cond and cond then val else val + if cond and not cond then val else val ) * if not not cond then ( if cond then ( ( ( ( ( ( val * ( val )", "( ( ( val * if cond then if cond and cond and not cond then val else val ) else val ) * val * val ) * if cond then ( if cond then val else val + val ) ) + val + ( if cond then ( val ) else ( val * val ) ) ) ) else ( ( val * val )", "val", "val", "val * val + if cond then val else ( val ) + val", "( ( val + ( if not cond then ( if not cond then if cond and cond and cond then val else ( val ) else val * val ) + if cond and not not not not cond and cond and cond and cond and cond and cond and not cond and cond and cond and cond and not not cond and not cond and not not cond and if not cond and not cond and cond and cond and cond and not cond then val else val", "if cond then val else val", "if cond and cond and cond and not not not cond and cond and cond and not cond and cond and cond and cond and cond and cond and cond and not cond and not not not not cond and cond and cond and cond and not cond and not cond and cond and cond and val + if not not not cond then ( val ) else if cond and cond then val else val", "( ( ( ( ( val * ( val * val * if not not cond then ( val ) else val ) ) + ( ( val * ( val ) ) + val ) + ( if * val ) )", "if cond then val else val", "( val )", "( if cond then val else val * val + ( ( val ) * val * ( if not not not cond then val else if cond then ( ( if not not not cond and cond and cond and not cond and cond then val else val + if cond then if not not not then val else if cond then val else val else ( if not cond and not not not cond and cond and cond and cond and not cond and cond then if not cond and cond and cond and cond and cond and cond and cond and cond and not", "if cond then if cond then val else ( val ) else (", "val", "if cond then val else if not not not not cond and not cond then val else val", "val", "val", "( val + val ) + val + val ) + val * if cond and not cond and cond then if cond then if cond then val else ( if not not cond and not cond and not cond then if cond and cond then if cond and cond then val else val else ( if not cond then if cond and cond then val else val else if not not cond and cond then val else val + val ) ) else if not not cond and cond and cond and cond then if not cond then val", "val", "val", "val", "if cond then if cond then ( ( ( ( if cond and cond and cond then ( val ) else if cond then ( val ) else ( val * if cond then val else ( val ) * val * ( ( ( val * ( val ) ) + ( ( ( if cond and cond then val else val ) * val + val ) * if cond and cond then ( ( val ) ) else val + if cond and not cond and not not cond then if cond then val else val + ( val", "val", "if cond and not not cond and not cond and not cond then ( ( val * val * if cond then ( val + if cond then if not cond then val else val else val + val + val + ( if not cond then ( if cond and cond then ( ( if not not not not cond and cond and cond and cond and not cond then ( ( val ) + ( val ) ) else ( val ) ) + ( ( if cond then ( ( val", "if not cond and cond and cond and cond and cond and cond then ( val ) else val", "val cond and cond and cond and cond then val else ( ( if cond then if cond then val else val )", "if not cond then val else val", "val * val * if cond then ( if cond then ( val ) else if not not not cond and cond then ( val ) else val * if cond then val else ( if not cond then val else val * ( val ) ) + val", "( if not not cond then ( ( ( if cond then if cond then val else val ) else if cond then if cond then if cond then val else if cond then ( if not cond and not cond then if cond and not not cond then val else val else val else ( ( val * val ) ) else if cond and not not not cond and cond and cond and not not cond if cond and not cond and cond and cond then if not not not cond and not not not cond and cond then val else val else ( if cond and not cond and not cond and cond then if not cond then val else if not cond and cond then val else val else if cond and not cond and cond and cond and not cond then if cond and cond and not not cond then ( ( if not cond and cond and not cond and cond and cond then val else ( if not not cond and cond and not cond and cond and", "if cond then val else ( if cond then if cond then val else val ) else val + ( ( ( ( if cond and cond and cond then val else val ) * val ) else val ) * ( if cond then val else val * if not not cond and not not cond and cond and not not cond and not cond and not not cond and not cond and not not not cond and cond and cond and cond and cond and cond and cond then val else ( if cond then if", "val * ( if cond then if cond then val else ( ( if cond then val else ( val ) ) ) else if cond then if cond and cond and cond and not cond then ( ( val ) else val else ( val ) )", "( ( ( ( if cond and cond then val else ( val ) * ( ( if cond and not cond and not cond and cond and not cond and not cond and cond and cond and not not cond and cond and cond and cond and not cond and cond and cond and not cond and not cond and not cond and cond and not cond and not not not not cond and cond and not not cond and cond then ( val * val * ( if cond then if cond then ( ( val )", "val * val * val + if cond and cond and cond and not not cond and cond then val else ( ( ( ( if cond then val else val ) ) ) ) * ( val ) * val * val + val + if not cond and cond then ( ( val ) )"], "accuracy": 0.5, "train_overlap": 0.42, "res": [{"text": "val", "log_prob": -3.039409409277141}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.379185758531094}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -18.845968476496637}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -77.64203059568536}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -89.71969699847978}, {"text": "( val )", "log_prob": -5.065070966258645}, {"text": "val * val", "log_prob": -5.538056466728449}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -14.18575324327685}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -19.422375535359606}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -87.84927058627363}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -86.6887754353229}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -73.86255043942947}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val * val * val", "log_prob": -8.152085833018646}, {"text": "val * val", "log_prob": -5.538056466728449}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.278329000575468}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -80.82346768537536}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -88.19100943009835}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -83.80721580050886}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -93.50545810977928}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -49.90742721571587}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -88.90912001486868}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.85209612874314}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.4942925190553}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -85.77845339302439}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.84530208958313}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if not cond and cond then val else val", "log_prob": -8.682913420023397}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -87.94752766401507}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.72549127892125}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -45.24066995084286}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -73.77564111643005}, {"text": "( val )", "log_prob": -5.065070966258645}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if not not cond then val else val", "log_prob": -8.802207622211426}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -30.72693086625077}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -95.91335088433698}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -14.548490143148229}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -97.33531006705016}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val + val", "log_prob": -5.709534449735656}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -99.19972646422684}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -98.87412864190992}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.55222298926674}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.829116569715552}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -93.77940917015076}, {"text": "val * val", "log_prob": -5.538056466728449}, {"text": "val + val", "log_prob": -5.709534449735656}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -82.19198237697128}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -95.21559374732897}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.79386018007062}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -86.25966675463133}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -83.17805402795784}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.063934002420865}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -88.68648478621617}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -19.82644500513561}, {"text": "val + val", "log_prob": -5.709534449735656}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -81.86049010558054}, {"text": "( val )", "log_prob": -5.065070966258645}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -88.86357053997926}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -16.069442506879568}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -90.36416353471577}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -90.44649136136286}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -90.86730345664546}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.83003579068463}, {"text": "val * val", "log_prob": -5.538056466728449}, {"text": "( val )", "log_prob": -5.065070966258645}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -66.90143354306929}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.746604566695169}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -86.1032932989765}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -28.53753348812461}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.648366226581857}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -84.89300998183899}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.23508605407551}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -91.30566880572587}, {"text": "if not cond then val else val + ( val )", "log_prob": -12.298249496729113}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -53.98110869922675}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -74.14466992788948}, {"text": "val", "log_prob": -3.039409409277141}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -88.63983534672298}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.942720097955316}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.586269354913384}, {"text": "( val )", "log_prob": -5.065070966258645}]}, "epoch_60.pt": {"generated_sequences": ["val else val * val ) * ( if not not cond and cond and cond and not not not not cond and not cond and cond then val else val ) else ( val ) * ( if not cond and not not cond and not cond then if cond then val else ( val * if cond then val else val + val * ( if cond then ( if cond and not cond then if not not cond and not cond then if", "val * val ) else if cond then ( ( if cond then ( ( ( if cond then val ) else if not cond and cond then ( val ) else val else if cond and cond then val else val + ( val ) ) ) else val * if cond then ( if not cond and not cond and cond then ( ( ( if cond then ( val * val * val * ( if cond then ( val ) else if cond then if not cond and not not cond and cond then if cond then ( val ) else", "if cond then ( val )", "if cond and not not cond", "( val * val * if not cond and not cond then val else val ) * ( ( val ) ) ) ) )", "if cond then val else ( val + if not cond then if not cond and cond then ( ( if not not cond and not cond and not cond and cond and cond and not not cond then ( if cond and not cond and not not not not not cond and not cond and cond and cond and cond and cond then ( val ) else ( if cond then val else val ) ) ) else val else ( ( val * val * val * val )", "if cond then if cond then ( val ) else val else if cond and not cond and cond and cond then if cond then val else ( ( ( val + if not not cond then if not not cond and cond then if not cond then ( val ) else ( val + if cond and cond and cond and not cond and cond and cond and not not not not cond and cond and not cond then ( val ) else val ) ) else val + ( ( if cond and cond then val else ( ( val ) * if not cond and not cond and not not not cond then if not not cond then if cond then val else val else val + if not cond and cond and cond and not not cond and not not cond and cond and cond then val else val else ( if not cond then val else val ) + val + val * val * ( val + val * if not cond and cond then val else val + if cond then if not cond and not not not not cond and not not cond and cond and not cond and not cond and cond and cond and cond", "val ( val + ( ( if not not cond then val else ( val ) ) ) * ( val * ( ( val ) * if cond then if not cond then if not not cond then if cond then val else val else val else val * ( val + if cond then if cond then ( val ) else if cond then if not not not cond and not cond then ( if cond and cond then if cond and cond then val else val + ( val ) ) else ( val * if cond then ( val ) ) else if cond then (", "val * ( ( val + ( if cond and cond then val else val ) ) ) * ( if not not not not not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond then ( ( ( if cond then ( if not cond and cond then val else ( val ) ) ) + if cond and not not cond and cond then ( val * val ) else if cond then ( if cond then val else", "( ( val * val * val + val ) )", "val", "if cond then ( if cond then if not cond then ( if cond and cond then ( val + ( if not cond then if cond then val else val * if cond then val else val * val ) else val else val else ( if not cond and not not not cond and not cond and cond and cond and not cond then ( ( ( if cond then ( ( ( val ) ) else if cond and not not cond and cond and not cond then ( if not cond then if not cond then", "val * val", "val * if not cond then val else ( ( val * val ) + if cond then val else val * val + val + ( val ) * if cond then if not cond and cond then if cond and cond and cond and cond then if cond then val else ( val ) else if cond then if cond then val else val else ( if not cond and not not cond then val else val + if not not cond and not not cond and not not not cond and not cond then if cond then ( ( if not cond then val", "val * ( ( val + val + ( ( val ) ) ) ) ) * ( val ) ) ) + ( if not not not cond and not cond and cond and cond and cond and not not not cond and cond and not cond and not cond then val else if not cond then ( ( ( ( if cond then val else ( ( val ) ) ) ) ) else ( if cond then val else val * if cond then val else ( val + ( if not cond and not cond and cond and cond then val else ( val + val ) + ( if not cond then val else", "( ( ( val + if not cond and cond then ( val ) else if cond and cond then val else if cond then ( if not not cond and not not not not cond and cond and not cond and cond and not cond and not cond and cond and not not cond and cond and not not not cond then val else if cond then val else val * val )", "if not not not not cond and cond and cond then ( ( ( if not not not cond and not not cond and not cond and not not cond and not cond and cond and cond then val else ( val * ( val * ( if cond then ( ( ( val ) ) ) + val + val + if cond then val", "if cond then if not not cond then ( val ) else val else ( val * ( val ) * ( val * val + val * ( val * val ) + if not cond then if cond then ( ( if not not cond and cond then val else ( if not cond and not not not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond then ( if not not cond and cond then if", "val * ( val )", "( ( val ) * if cond then ( if cond then val else val + if cond then val else if cond then if cond then val else if not cond then val else if not cond then val else val else ( val ) ) else ( ( if not not not cond and not cond and cond and not cond and cond and not cond then ( ( val ) * val * if not not not cond and cond then ( ( val * ( val * val ) ) ) * val + if cond then if cond and not cond then", "( val ) * ( ( ( if cond and not cond and cond and cond and cond and", "val * val * ( ( val ) + val * ( if cond then ( if cond and not cond and not not not cond and not not not cond and not cond and cond and not not not cond then ( if cond then if cond then val else ( val * val ) + val * ( if not not cond then if cond then if cond then val else val else if not cond and cond and cond then val else val else if cond and cond and cond then val else val else val ) + ( if if not cond then val else val", "val", "val", "( val * val ) + ( if cond then ( val ) else ( val * if cond then val else if cond then val else val ) * val * if not cond and cond then ( val ) else if cond then ( ( ( val ) ) else ( ( val ) + ( if cond then val else if cond then if", "val * if cond then if cond then if not cond then val else val else val else ( if cond then val else val * val ) ) else if cond and not not cond and not cond then val else ( val ) * val * val * val ) else ( if not not cond then if cond then val else ( if cond then if not cond then ( val + val ) else val ) else ( val ) ) ) else ( ( val + if not cond then val else val * if not cond then", "( ( if not not cond then val else val ) * val * if not not cond then if not cond and cond and cond and not cond then val else val else val else if cond then val else val ) * val * val", "if not not cond then ( if cond then if cond then if cond then val else ( val ) else val else if not not cond then ( if not cond and cond then if cond then ( if not not cond and cond then ( val * ( if not not cond and cond and not cond and cond and not cond and cond then val else if not cond and cond and cond then if cond and cond then if not cond then val else val else ( ( if not cond then if cond then ( val * val", "val", "( val * if cond then if cond then if cond and cond then val else val else ( val ) ) ) ) else ( ( if cond then if cond and cond then val else if not cond and not not not cond and not cond and not not cond and cond and not cond and cond and not cond and cond then ( ( ( ( ( if cond and cond then val else if not not cond and cond and not", "if cond then ( val * val ) else ( if not cond then val else val * ( if not cond then val else val + if cond then val else if cond and cond and not cond then ( ( ( if cond then val else val + if not not cond then val else ( if not cond then val else val * val + ( if not cond val * val", "val", "val", "val", "( ( val )", "val + val + val", "val", "val else val else if cond and not cond and not cond and cond and not cond then val else val * ( val ) ) * if not cond and cond and not not cond and cond then val else if not cond and cond then if not cond then val else if cond then if not not cond then ( if cond then if cond then if cond then ( if cond then val else val ) else if cond then val else", "val + val ) + if cond and not cond and cond and not cond and not cond then if cond and not not not cond then if cond and not cond then val else ( if cond and cond then val else ( if cond then ( val * val ) ) else ( if cond then val else val + val ) ) + val ) ) * val", "val", "( if not not not cond and cond and not cond and not cond then val else if cond then val else val )", "if not not not not not cond and not not cond and not cond and not cond then if cond then if cond then if cond then if cond and not cond and cond then ( val + if cond then ( ( if cond then ( val ) else val + ( val ) ) * ( ( if not not not cond and not cond and not not not cond and cond and not cond and cond then val else if not not not", "( if cond and cond then val else if cond then ( if cond then ( if cond then * if cond and cond and cond then if not not cond and cond and not cond and not cond and not cond and not cond and cond then val else if cond then ( ( val ) ) else val else if cond then if not not not not not cond and cond and cond and cond then if not not cond then val else val else if cond then ( if cond then val else val else ( if cond then if not cond then val", "if cond then ( if not cond then val else ( val + val ) + val ) else val ) )", "( if cond then val else if cond then ( val ) else ( ( val ) ) * ( val ) ) ) ) ) ) else if cond and cond then if cond then val else if cond then if not cond and not cond and not cond and not cond and not cond and not cond and not cond and cond then val else val else if not cond and cond then val else ( ( val ) + if cond and cond and cond and cond and cond then if not not cond then ( val ) else if cond then val + val + ( val", "val + ( if cond then if not cond then val else val else ( val + if not not cond and cond and not not cond and not cond and not not cond then ( ( if cond and not not cond then val else ( if cond then val else if cond and not cond then if cond and cond and cond and not cond then if not not not cond then val else ( if cond and not cond and not not", "( val )", "val", "val * val ) + ( if cond then ( ( val ) + if cond then val else ( if cond and not not cond and not not cond and cond and cond and not cond then ( val * if cond and not cond and cond then ( if cond then if cond then val else if cond then ( val ) else val else if cond then ( val ) ) else val * if cond and cond then ( ( val * ( ( val ) * if not not not cond and cond and cond then if cond and cond then (", "( if cond then if not not not cond then val else if not not not cond and not cond then val else ( val ) else val ) * if cond then ( val ) else val else val * ( val + if cond then if cond then ( val ) else val else val + val ) ) ) ) * if not cond then val else if not cond and cond and cond then if not cond and cond then val else if cond and not cond and cond then if cond then if not cond then"], "accuracy": 0.32, "train_overlap": 0.28, "res": [{"text": "val", "log_prob": -2.224775904789567}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.397443103254773}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -18.85514694522135}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -77.06414548296016}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -87.7861078310525}, {"text": "( val )", "log_prob": -4.057946704793721}, {"text": "val * val", "log_prob": -5.201666230801493}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.974365242756903}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -20.10257546871435}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -84.00751421792665}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.28603540407494}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -74.60368544550147}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val * val * val", "log_prob": -8.662383346818388}, {"text": "val * val", "log_prob": -5.201666230801493}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.754539286601357}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -82.87034316489007}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -86.1273859081557}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -81.52038287330652}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -93.18518315185793}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -50.433848346583545}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -85.47316556429723}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.76474978600163}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.38076038262807}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -83.71791569353081}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -77.28345942252781}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if not cond and cond then val else val", "log_prob": -8.772991536534391}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -87.07745603902731}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -82.35728244762868}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -44.73043052502908}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -73.91112472553505}, {"text": "( val )", "log_prob": -4.057946704793721}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if not not cond then val else val", "log_prob": -8.399107827921398}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -30.09588958043605}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -92.00860276987078}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -14.359365832526237}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -94.55364471115172}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val + val", "log_prob": -5.13090283004567}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -98.1138658914715}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -97.01168302365113}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.618512790417299}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.139067163458094}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -91.46365464595146}, {"text": "val * val", "log_prob": -5.201666230801493}, {"text": "val + val", "log_prob": -5.13090283004567}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -80.94275455945171}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -94.51604207162745}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -86.01100735418731}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -84.21122405375354}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -83.62995366426185}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -34.93308340423391}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -88.37942308199126}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -20.361551661626436}, {"text": "val + val", "log_prob": -5.13090283004567}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -83.5529322080547}, {"text": "( val )", "log_prob": -4.057946704793721}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -86.1783997489838}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.27942228456959}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -87.8798980677966}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -86.90384664572775}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -91.35826622851891}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.59819220658392}, {"text": "val * val", "log_prob": -5.201666230801493}, {"text": "( val )", "log_prob": -4.057946704793721}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -64.86283273069421}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.963695278856903}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -86.51783281378448}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -28.17402592720464}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.75968318368541}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -83.76137284212746}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -87.68253639934119}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -92.40453540417366}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.367909182794392}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -54.3028744244948}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -76.26690932607744}, {"text": "val", "log_prob": -2.224775904789567}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -85.59038657648489}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -14.269739608978853}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -17.24934501107782}, {"text": "( val )", "log_prob": -4.057946704793721}]}, "epoch_65.pt": {"generated_sequences": ["val * val", "if not not not cond then ( val ) else val", "( if not cond then val else ( ( ( val ) ) + val ) * val else val", "if cond then if cond then if cond and cond then ( if not cond then ( ( val ) ) else ( val else val else ( if not cond and cond then if cond and cond then val else val else ( val ) ) else ( val * val + ( val )", "if cond then if not cond and cond then ( val ) else ( if cond then ( val * ( if cond then ( val ) else val ) * val", "if cond then val else val", "if cond then val else val", "val + val * val", "if cond then ( ( if cond then val else val ) else ( if not cond and cond then if cond then ( val ) else if not cond then val else val else if cond and cond then ( if not not not cond and cond and cond then ( ( val ) ) else val * ( val + ( if cond then if cond and cond and cond then if", "if cond then if cond then val else val else ( val * val + val )", "val", "( val ) ) + ( val + if cond then val else ( val )", "( if not cond then if not cond then ( val ) else if not cond and cond and cond then if cond then ( ( ( ( val * if cond and cond then ( ( if cond and not not cond and cond then if not cond then val else ( val ) ) else ( ( val ) ) + val ) else val else if cond then if cond then val else ( ( if cond and cond and not cond then ( ( val ) ) else if cond and cond then", "val + if not cond then val else ( if cond then if cond then val else ( val ) else if cond then val else val", "val", "val", "( if cond then if cond then ( ( if not cond then val else val ) else ( if cond then val else val * ( val ) else val * ( ( if cond and not cond and cond and not cond and not cond and cond then if not cond then ( ( val + if cond then ( ( val ) else ( val + if not cond then val else ( if cond then if not cond then val else if cond and cond then ( val", "if cond then val else if cond then ( val", "val", "if cond then val else ( val ) + ( ( ( val ) * ( val ) ) ) ) * val ) )", "val * ( val )", "val + val", "val", "val", "val", "( ( val ) + val )", "val", "val", "val * if cond then ( val * if cond and cond then val else val ) else val + val", "( if cond then val else if cond and not cond and cond then val else if cond then if cond and not not not not not not not not cond and not not not cond then ( val ) else if cond then ( val ) else val else val else val + val else val * if cond and cond then val ) else if not cond then val else val )", "val + val", "( ( val * if not cond and cond then ( if not not cond and cond and cond and cond and cond and not cond and cond and", "( val + ( if cond then val else ( if cond and not not cond and cond and cond and cond then ( val ) else ( if cond then ( val ) else val * ( if cond then val else if cond then ( val ) else ( if not not cond and cond then val else val ) )", "val", "val * ( val", "( val * ( ( val * ( val + ( val ) ) * val ) ) ) )", "val + if cond and not cond then val else ( if not cond then ( val + if cond and cond then ( val + val ) else val else val + val", "if cond and not not cond and cond and cond and cond and not not not not cond and cond then ( if cond and cond and cond and not not cond and cond and not not cond and cond and cond and not not not cond and not cond and not cond and not not not cond and cond then ( if not cond then if not cond and not not cond and cond then if not cond then if cond then val else ( val * ( if cond then val else if cond then val else ( ( if cond", "val", "if not cond then ( val ) else ( if cond then ( val * ( val * if cond and not cond and not cond then val else val ) )", "val * val", "val + if cond and cond then val else ( val * val * if not not not not cond then ( val + val ) else val", "if cond and cond and cond then if not cond then val else val else if not cond then ( val ) else val ) else ( ( if cond then ( val + val ) ) else ( val * if not not not cond then ( ( if cond then ( if cond then ( val * val * val * ( if cond then val else val ) ) else ( val * ( if cond then if cond then if cond then if not not cond", "val", "val", "val + val + if cond then val else ( val * if not cond then ( if cond and cond then val else (", "if cond then val else ( if not cond and cond then val else val ) * if not cond then val else if not cond and cond and cond and cond and cond then ( val ) else val else val", "if cond and not cond then ( val + if not cond then val else ( val ) + val ) else if cond and not cond and not not cond and cond and not not cond and not not cond and not cond then val else ( val ) cond then val else ( val )", "( val ) ) ( val ) ) * ( val * if not cond then val else ( if not cond and cond then ( val ) else ( val ) * val )", "val"], "accuracy": 0.52, "train_overlap": 0.44, "res": [{"text": "val", "log_prob": -4.439830103423446}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -26.69150367155089}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -19.284251781442435}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -77.4823775406112}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -91.69216460717143}, {"text": "( val )", "log_prob": -6.633590016164817}, {"text": "val * val", "log_prob": -6.999818396696355}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -14.551657645439263}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -21.283577054884518}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -86.86134127434343}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -87.79055268224329}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -76.61742502177367}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val * val * val", "log_prob": -9.462418283510488}, {"text": "val * val", "log_prob": -6.999818396696355}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -13.307906127884053}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -82.38463560119271}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -91.72467436565785}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -83.30592823127517}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -95.73650551796891}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -50.62459847910213}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -89.49836060535745}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -98.76504804292927}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -70.4705566780176}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -86.53927206341177}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -80.76531489862828}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if not cond and cond then val else val", "log_prob": -10.299169996520504}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -89.62439796287799}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.34559784358134}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -45.70500658344827}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -74.10598444830975}, {"text": "( val )", "log_prob": -6.633590016164817}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if not not cond then val else val", "log_prob": -9.824119838885963}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -32.799230316333706}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -95.06407302850857}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.901144298492}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -97.73500268429052}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val + val", "log_prob": -7.145078999805264}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -100.02403162140399}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -100.2312336449977}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -17.118075420177775}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.981488641002215}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -93.2370238895528}, {"text": "val * val", "log_prob": -6.999818396696355}, {"text": "val + val", "log_prob": -7.145078999805264}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -84.00590826419648}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -95.95985241804738}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -88.44780670912587}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -87.01711360295303}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -86.80650935240556}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -37.52138004347216}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -86.23237918270752}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -20.21096048632171}, {"text": "val + val", "log_prob": -7.145078999805264}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -82.73277136625256}, {"text": "( val )", "log_prob": -6.633590016164817}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -85.88430889032315}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.47509487485513}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -90.38010799704352}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -89.88874503702391}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -91.81530607258901}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.8579231944168}, {"text": "val * val", "log_prob": -6.999818396696355}, {"text": "( val )", "log_prob": -6.633590016164817}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -64.29455154298921}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -12.311085988912964}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -86.16515345723019}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -30.35571159448591}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -16.537104950635694}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -86.54523650679039}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -91.10512469161768}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -94.48995889874641}, {"text": "if not cond then val else val + ( val )", "log_prob": -13.285650317091495}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -52.9938367647992}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -72.77259384526405}, {"text": "val", "log_prob": -4.439830103423446}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -88.3499248548178}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -16.501596308371518}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -19.035709244955797}, {"text": "( val )", "log_prob": -6.633590016164817}]}, "epoch_70.pt": {"generated_sequences": ["( ( val + ( ( val ) * val ) ) * val * val + val ) ) else if cond then ( ( val ) ) * if cond then ( ( val * ( ( if cond then val else ( ( val ) * ( val +", "( val + if cond and not cond and cond and not cond then if not not not not not not not cond and not not cond and cond and cond and cond and cond and cond and not not cond and cond and cond and cond and not not not cond and cond and not not cond and not cond and not cond and cond and cond then if cond then val else val else val else ( ( val + if not cond then ( val ) else", "val", "( val ) * val", "val + if cond then if cond and not cond then val else val else val", "val ( ( if cond and cond then if cond then ( val ) else val else ( if cond then if cond then if not not cond and cond then ( val ) else if cond and cond then val else ( val * ( val ) * val ) else val ) else ( val", "val + val * if not not cond then val else val * if cond then if cond then ( val ) else val else val", "val", "( val )", "val", "val not not cond and cond then ( ( ( ( if not not cond and cond and cond then val else if cond then val else val ) ) + if cond and cond and not cond and cond then if cond and cond and cond then ( if cond then val else val * if cond then val else ( if cond then if cond then ( if cond and cond and cond and cond then val else if not cond then val else ( ( val * if cond then val else if cond and cond then if cond", "( ( val ) )", "( if cond and not cond then ( val * val ) else val ) * if cond then val else if not cond then if not cond and cond and not cond and cond and cond then if cond then val else ( ( val ) ) else val else if cond then if cond then val else if cond then if cond then if cond then ( val", "if not not not cond then ( ( val * if cond then val else val ) else ( if cond then if cond then if not cond then ( if cond then ( val ) else val ) else if cond and cond and not cond and cond and cond then val else if cond then if not not cond then ( ( ( val ) ) + if not not not not cond and not cond and not cond and not cond and cond and not cond and cond and not not cond and cond then val else val else ( if cond", "val", "val", "val", "if not cond then if cond then val else if not cond then val else ( if cond then ( val * ( val ) + val * ( val ) +", "val", "val * val", "( ( if cond and cond and cond and cond and not cond and not cond and not not not cond then if not not cond and cond and cond and not cond and cond and not cond then val else ( ( ( val + if cond then val else val ) + val ) ) else ( if not cond and cond and cond and not cond and cond and cond then if not not cond then ( ( if cond then val else if cond and cond and cond then ( if", "val else val ) * val", "val ) + ( ( if cond and not cond and cond and not not cond and not not cond and not not not cond and cond and cond then if not cond then if cond then val else val else ( val * if not cond then val else if cond and cond then if cond then if cond then if cond and not cond and cond and cond then val else ( if cond then ( val * val * val + ( ( ( ( ( if cond then if not not not cond and cond and cond and cond and cond then val else", "if cond then val else ( if cond then if not cond then val else if cond then if cond then ( ( if cond then if not cond then ( ( ( if cond then ( if cond and not cond then ( val * if not cond then ( if not cond then ( ( val ) else if cond then val else val ) ) else ( val + ( val ) ) * val + ( val ) + if cond then ( val * val + val ) else if cond then val else val else", "val * val", "( val + if cond then ( if cond then if not cond then if cond then ( if cond then if not cond and cond then if not cond and not cond and", "val", "val", "if cond then val else val else val + if not cond then if not cond and cond then val else val else val * ( if cond then ( ( ( ( val ) ) ) + ( val ) ) else ( val ) + if cond then val else val", "( val ) + val", "val val * val", "val ) ) + if not cond then val else val ) ) + val * val", "if cond and cond and cond then val else if cond then val else val else val * val * ( if not cond and not not cond and cond then if not cond and cond and cond and not cond and cond and not cond and cond and cond and cond and not not cond and cond and cond then val else if not not cond then ( ( val ) ) else val ) * val ) else if not not not not cond and cond and cond and not cond and cond then if cond then ( val * ( ( if cond then val else if cond then val else ( ( val + val", "val ( if cond if not cond then ( val * if cond and not not cond and not cond then ( ( if not cond then val else ( val + ( val * ( if cond then ( ( val * if cond and not cond then if cond then val else ( val + val * val ) else val + val ) ) * val", "val", "( if not cond and cond then if cond and cond then if cond and cond and not cond then val else val else ( val ) ) else val ) else ( ( ( val ) ) ) * val )", "( if cond and not cond and cond then val else ( ( if cond then val else ( if not cond then val else val ) ) * val ) + val * if not cond then if cond then if cond then ( val ) else ( val + val * val * if cond then if cond then ( ( if cond then if cond then if cond and cond then ( if not cond then val else val ) else ( if cond then val else val ) else val * if cond then ( val * val + val", "val", "( if cond then ( if not not cond then ( val * ( val * val ) * if cond then val else if cond then val else ( ( ( val ) ) * if cond then if cond then ( if not not not cond then ( val ) else val else val ) else if cond then val else val + val + if cond and not cond then if cond then val else val else val ) * if cond and cond then ( ( val * if cond then val else if not not cond and", "val + val * val", "( if not not cond and cond then ( ( if cond", "( ( val * if not cond and cond then ( if cond then if not", "not cond then ( ( if cond then val else val + val * val * val ) else val", "if cond then val else val", "val if cond then val else if cond then val else val", "if cond and cond then ( val ) else val + ( val )", "( ( ( if not cond and not cond and cond and cond then ( val * if cond then val else val ) else val + val", "val", "val + ( ( val + ( val ) ) * if cond then ( ( if cond then if cond and not not cond and not cond and not not not not cond and not cond and not cond and cond and cond and cond then val else val else val else if not not cond then val else ( ( val + val * if cond then ( val ) else if cond then val else ( if not not cond then if cond then val else ( ( ( val ) * if not cond and cond then ( val ) else val * val ) ) *", "( ( val * val * ( val )"], "accuracy": 0.46, "train_overlap": 0.38, "res": [{"text": "val", "log_prob": -2.0948105871211737}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.932426748302532}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.480641935195308}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -76.3693774829153}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -89.66710416332353}, {"text": "( val )", "log_prob": -4.316509556258097}, {"text": "val * val", "log_prob": -4.898430910776369}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.235443165700417}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -18.3565941308334}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -84.90056706557516}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.14054343651515}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -76.65309275989421}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val * val * val", "log_prob": -7.442953985417262}, {"text": "val * val", "log_prob": -4.898430910776369}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.251121014764067}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -80.44175330968574}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -89.35377399879508}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -81.75586302985903}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -91.66358537116321}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -47.58530073257862}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -86.90220167953521}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.103576872556}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.02595177898183}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -83.26395382010378}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -79.71508389315568}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if not cond and cond then val else val", "log_prob": -8.568849442875944}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -88.86499696201645}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -82.21615120617207}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -43.047530924959574}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -72.20116569602396}, {"text": "( val )", "log_prob": -4.316509556258097}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if not not cond then val else val", "log_prob": -8.578012252983171}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -31.034815763763618}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -91.75668492517434}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -13.592838185897563}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -92.93732693581842}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val + val", "log_prob": -4.767953972099349}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -96.28175803320482}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -97.21359536144882}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.947100622288417}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.280837837606668}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -90.88623110204935}, {"text": "val * val", "log_prob": -4.898430910776369}, {"text": "val + val", "log_prob": -4.767953972099349}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -83.3298389489064}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -91.08356938889483}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.05081459856592}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -84.0589106483967}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -84.61665876745246}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.05074229516322}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -80.99858675559517}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -19.123147396254353}, {"text": "val + val", "log_prob": -4.767953972099349}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -80.77375106606632}, {"text": "( val )", "log_prob": -4.316509556258097}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -82.0285755454097}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -17.039003000594676}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -88.25227131677093}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -88.7077391758794}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -88.52228915155865}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -80.50578660919564}, {"text": "val * val", "log_prob": -4.898430910776369}, {"text": "( val )", "log_prob": -4.316509556258097}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -65.82786320429295}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.61963241151534}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -83.88946077506989}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -26.890471243939828}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.59944842394907}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -84.1137967617833}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.2813655413338}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -90.23989212047309}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.54278378240997}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -50.36970252619358}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -71.23356269387295}, {"text": "val", "log_prob": -2.0948105871211737}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -85.43395782768494}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -14.871321936341701}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.636179164110217}, {"text": "( val )", "log_prob": -4.316509556258097}]}, "epoch_75.pt": {"generated_sequences": ["val", "if cond then val else if not cond and cond then val else if not cond then val else val * val * ( if not cond and cond and cond and cond and not not cond and cond and cond then val else val ) * val ) ) * val + val * if not cond then if cond then val else val else val ) * if not cond and not cond and cond and cond then if cond then ( val *", "val", "val * ( ( val + if cond then if cond then val else val else ( ( val ) * val ) * val * if cond then if not cond then val else if cond then val else if cond then ( ( ( if cond then if cond then val else val ) ) + ( ( val * val + val ) ) else ( ( val ) ) ) ) else val ) ) * ( val ) + if cond and cond then ( ( val ) )", "if cond then val else val * if cond then ( val + val + ( val ) ) else ( if cond then val else ( val * val ) * ( ( if not cond then val else if cond then if cond and cond then if cond then if not cond and cond then if cond then val else val else ( ( ( val ) ) ) else if cond and cond and cond then if cond then val else val else val * val ) ) else ( ( val ) ) * val * ( if cond then if cond", "if cond then val else val * ( val )", "val * ( if cond then val else ( val )", "( ( val ) + val )", "val", "val * if cond then val else val", "( ( if cond then val else val * if cond then ( val ) else val )", "if cond then val else if not cond and cond then ( if cond then val else val ) else ( ( if cond then val else val ) else", "( val + ( val + ( ( val + if cond then if cond then val else if cond and cond then if not cond then if cond and not cond and cond then val else val else val else ( val + if not cond then val else ( val ) + if cond and cond then if not not not cond then ( if cond then val else val ) + val ) else val else val else ( val * val", "val + val * val", "val * val * ( if", "val", "if not cond then ( if cond and cond and cond and cond and cond and not not cond then if cond then val else val else ( val ) ) else if cond and cond then ( if not not cond and cond and cond and cond then if cond then if cond then if cond then if cond then val else val else ( val * val ) else ( val ) else ( val ) else val * ( val ) * val ) else ( val * ( if not cond and not cond and cond then val else (", "val", "if cond then ( ( ( if not not not not not cond and cond and not not not not cond and cond then ( ( ( val ) + val ) else val ) * val * ( ( val * if cond then if cond then if cond then val else ( if not not cond then ( ( val * if cond then if cond then ( val + val ) else", "if cond then ( ( if cond then val else val + if not cond then if cond then ( val * ( val + val ) * val + ( val ) ) else if cond then val else val else if cond then val else val + ( if cond then if cond then val else if cond then if not cond then val else val else if cond then val else ( ( ( val ) + if cond then if cond then ( val ) else if cond then if cond", "val * val * ( if cond then val else val )", "( if cond then val else ( ( val ) ) ) ) * if cond and cond then if not not cond and cond and cond and cond and not cond and cond and not cond and not cond then val else val else ( val )", "( val + if not not not not cond then ( val + val ) else ( if not cond then ( val ) else ( ( ( ( val * ( val ) ) ) ) * val ) * if cond then val else if cond then ( if not cond and cond and not not cond and cond then if cond then val else val ) else val else if cond then if cond then val else ( ( val + if not cond then val else if cond then ( val * if cond then val else ( if cond then ( val", "val", "if not cond then ( val ) else val", "val", "val * val * ( if not cond and cond then val else ( val * if cond then val else val ) ) * val", "( val * ( if cond then val else val ) ) )", "val + if cond then if not cond and not cond and cond then ( val + if cond then ( val ) else val * ( val * ( val ) + val ) else ( if not cond then ( if cond then if cond then val else val else ( val ) * val * ( if cond then ( val ) + ( ( if cond and not cond then ( ( ( ( if not cond and not not not not not cond and not cond then val else if cond then if cond and not cond then if cond then (", "val * val * ( if cond then ( val ) else ( if cond then if cond then val else val else ( ( val ) ) + if not cond then if not cond then ( ( if not cond and cond and cond then if cond then ( val * val ) else ( ( val ) ) + val + val + ( val * val + val + val * val * if not cond then val else if cond then if cond then ( (", "if cond and cond and cond then ( ( if cond then ( ( val ) ) + ( val ) + ( if cond and cond then val else if not cond and cond and cond then if cond then if not cond then val else val else if cond and cond and cond then val else val else val * ( val ) ) * val + val ) + if cond then val else val else val", "val + if cond and not not not cond and cond then val else if cond then val else if cond then val else ( val * if cond then val else val * if cond and cond then val else val )", "( val + ( if cond and cond then ( if not not cond and not not cond then ( ( if cond then val else val * ( val ) ) ) * val * if cond then ( ( if cond then if cond then val else ( if cond then if not cond and cond then val else ( if cond then if not not cond then ( ( ( ( val ) * ( if not not cond then if cond then val else ( ( if not cond then ( val )", "if cond then ( ( if cond then ( ( if not cond and not cond and cond then ( ( if not not cond and cond and not cond then ( val ) else if cond then if cond then if cond then val else ( val + val + val ) else ( if not not cond and cond and cond then if not not not cond and cond and cond then ( val ) else val ) else val * ( ( ( ( val + val * val )", "val", "if cond then ( ( if cond then ( if cond then ( val ) else val + ( val ) ) else val ) ) else val ) ) + if not not cond and cond then val else val", "val", "val * val", "if cond then if cond then ( ( val + ( ( val + ( ( val ) ) ) * val + if not cond then ( if not cond then if cond then val else val else val ) ) ) else ( val * if cond then val ) else val else ( val ) else ( if cond then if cond then val else val else val ) + if cond and cond and cond then val else val ) ) else val", "val", "( if cond then val else val + if not cond and not not cond then ( val ) else if not cond then ( if cond then val else ( val ) ) else val else val * val * val * if cond then val else val", "( val ) + if not cond then if not cond then ( val ) else val else val", "val", "if cond then if cond then val else val else val + ( if cond and cond then val else if not cond then ( ( val * val ) ) else if not cond and cond and cond and not cond and cond then val else if cond then if cond then if cond then ( if cond then ( val ) else val else ( val ) * if cond then if cond then if cond and not cond and cond then if cond and cond then val else if cond then if cond and not cond then val else if cond then val else val else val else if", "val + val", "val + if cond and cond then if cond then if not cond then val else if not cond then if cond and cond and cond and cond then val else if not not cond and cond and cond and cond and not cond and cond then val else if not cond then val else val else", "( if cond and + val else if cond then val else ( val ) )", "( if cond then val else val ) * val * ( if not not cond and cond and cond then val else if cond then if cond then if cond then val else val else ( if cond then val else if cond then if not cond then ( ( val * if cond then if cond then val else if not cond then if", "( val ) + val + if cond then if cond then ( val * val ) else val else val * val ) + val", "( val ) + if cond and cond then val else ( ( val * ( if cond then if cond then ( val ) else val ) * val ) )"], "accuracy": 0.44, "train_overlap": 0.3, "res": [{"text": "val", "log_prob": -2.4583731405436993}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.467040316783823}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.186763317440636}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -75.26606622198597}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -90.01937540480867}, {"text": "( val )", "log_prob": -3.903098420938477}, {"text": "val * val", "log_prob": -4.789272854686715}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.823725679772906}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -18.318158800713718}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -84.38894561724737}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.49578377697617}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -74.2706724407617}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val * val * val", "log_prob": -7.182888005685527}, {"text": "val * val", "log_prob": -4.789272854686715}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.958977816684637}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -82.34597637248226}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -87.51798147941008}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -83.16229602508247}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -88.16360424784943}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -48.436692534945905}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -87.14648420456797}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.53960309969261}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -64.6659940534737}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -82.7976576333167}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.70377625990659}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if not cond and cond then val else val", "log_prob": -8.101116481178906}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -89.29755756142549}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.10842038178816}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -43.03609870932996}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -72.12215876486152}, {"text": "( val )", "log_prob": -3.903098420938477}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if not not cond then val else val", "log_prob": -8.042278757086024}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -29.4525081042666}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -91.09321883926168}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -12.615649397223024}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -94.5924333455041}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val + val", "log_prob": -4.897274293587543}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -95.82992045476567}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -97.94433575100265}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.60239122895291}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.18429283372825}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -89.32186363753863}, {"text": "val * val", "log_prob": -4.789272854686715}, {"text": "val + val", "log_prob": -4.897274293587543}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -83.75000869832002}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -91.03626805520616}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -86.90734522370622}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -87.3416977294255}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -83.4763063704595}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.698556600138545}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -84.19456251920201}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -18.70796793187037}, {"text": "val + val", "log_prob": -4.897274293587543}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -82.8014725074172}, {"text": "( val )", "log_prob": -3.903098420938477}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -83.04013606812805}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.8088070404483}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -89.08417857345194}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -87.92668242286891}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -89.26896822988056}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -80.04565815185197}, {"text": "val * val", "log_prob": -4.789272854686715}, {"text": "( val )", "log_prob": -3.903098420938477}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -64.68078719312325}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -9.709276463021524}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -84.98010828485712}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -25.11002763407305}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.32478366815485}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -83.38894251268357}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.99982080748305}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -90.20592905208468}, {"text": "if not cond then val else val + ( val )", "log_prob": -10.851010817103088}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -51.385021354071796}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -70.8072913363576}, {"text": "val", "log_prob": -2.4583731405436993}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -87.57806099997833}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -14.810804084962001}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -15.655958710121922}, {"text": "( val )", "log_prob": -3.903098420938477}]}, "epoch_80.pt": {"generated_sequences": ["if not not cond then if cond and cond and cond then ( val * val", "( ( if cond and cond then ( if cond then val else val + val ) ) else ( val + val )", "( ( val * val + if not cond then if cond then val else if cond then ( if cond then val else ( val ) ) else if cond then val else if cond then val else if cond then ( ( if not cond then if not cond and cond then if cond and cond then if cond then if cond and cond then ( ( ( val ) + if cond then ( ( val ) ) else", "( val ) * val * ( val + if cond then if not cond then val else ( val ) else if not cond then if cond and cond and cond then val else ( val + if cond then if not cond and not cond and cond and not cond then if cond then if not", "if cond then if not cond then ( val + ( val + if not cond then if cond then ( val ) else val ) else val ) ) else if not cond then ( if cond then ( if cond then ( val ) else val ) else if cond then ( if not not cond and cond and not cond then if cond then val else val else val + val else if cond and cond then val else val * ( val ) ) else if cond then ( ( ( ( val ) * val ) )", "( if cond and cond then ( ( ( ( val * val ) ) ) else ( val ) + val * val * if cond then val else val ) ) )", "if cond then val else if cond then if cond then ( ( val ) + ( ( ( ( val ) ) + val * ( val * if cond then ( val ) else if not cond and cond and cond and not cond then if cond then if cond and not cond then val and cond then ( val ) else if not cond and cond then val else val else ( ( val ) ) ) ) else val ) * if cond then ( ( val )", "val * val + if cond then if cond then ( if cond then val else val ) else ( ( val ) ) ) else val else val", "val", "if cond then val else val", "val", "if not not cond and cond then ( val ) else ( ( if not not cond then if cond then if not cond and cond then val else if cond and cond and cond then if cond then val else if cond then ( val * if not not not cond then ( val * ( if not cond and not cond then if not not not cond and cond and cond and cond and not not not cond then ( ( ( ( val )", "( if cond then ( ( val + if cond and cond then val else val ) else ( ( ( if not not not cond and cond then val else if cond and cond then val else ( val ) ) ) ) ) else if not not cond then if cond and cond then ( if not not cond and cond then ( val * if cond then val else ( val * if cond then if not cond then val else ( ( if not cond and cond and cond and not cond", "( val * if cond then if cond then ( if cond then if cond then if cond then val else if cond then ( if cond then ( if cond then if cond then ( val ) else if not cond then ( val ) else ( if cond then if cond then val else val else val * ( val ) ) ) else val else if cond then val else if cond then val else ( if cond and cond and cond and not cond and not not cond and cond and cond", "val", "val", "val and not not not cond and cond then val else if cond then if cond and cond then val else val else ( if not cond then if cond then if cond then val else if not not not not cond and cond then if cond then ( val ) * ( val * if cond then val else val * val ) else ( val ) + if cond and cond and cond then val else if cond then if cond then val else ( ( val ) ) else ( val ) else val else if cond then val else ( if cond then", "if not not not not cond and not cond then ( val + ( if cond then val else if not cond then ( val ) else if cond then if cond and cond and not cond then if cond then ( ( ( ( val ) ) ) else ( val ) ) + ( val ) else ( if cond then if cond then val else if cond and cond then val else if not cond then if cond then val else if cond and cond and cond then val else", "if cond then val else ( if cond and not cond and cond and cond and not not cond and cond and cond and cond then if cond then val else if not cond then val else if cond then val else if cond then if cond and cond then if cond and cond and cond then if cond and cond then val else ( val * if cond then ( ( val * val ) ) else val ) else if cond and not not not cond then if cond and cond then ( val ) else ( if not not", "val + if cond then val else ( ( if cond then if not not cond then ( ( if not not not cond then val else if not cond and cond and not cond then if not cond and cond then ( val * val + val * if not cond and cond and cond and not cond and not not cond and cond and cond and cond and not cond and not cond and not cond and not not cond and cond and cond and cond and not cond and not cond and cond then val else ( if cond then val", "if cond then if not not cond then ( ( if cond and not cond then if cond then if cond then val else ( ( val ) ) ) else if cond then ( val * if cond and cond then val else val ) else val else if cond then val else ( ( val + if cond and not cond then if cond then ( val ) else if cond then ( val ) else ( val ) ) ) else if not cond then ( ( ( if cond then ( val )", "val * if not cond then ( ( if cond and not cond then val else if cond then if cond then if cond then if not cond then ( val ) else val else ( ( val * ( if cond then val else if not not not not cond then ( val + ( val * val ) * val ) + ( val * if cond and not cond then val else if cond and cond then val else val", "val", "( if cond then val else if cond then val else ( val )", "( val )", "val", "if cond then ( if cond then ( ( ( ( val ) ) ) ) else val ) ) else if not cond and cond and cond and cond and cond and cond then if cond then ( ( val ) * ( val ) + val ) else val", "val", "val", "if not cond then if cond and cond then if cond then if cond and cond then ( val + if cond then ( if cond and cond then val else ( val ) ) + ( val * if not cond and cond then val else if cond then val else ( val ) ) ) else ( if cond and cond then ( val", "if cond then ( val ) else val * ( ( val + val * ( val * ( val * val * if cond then if cond and cond then val else ( ( if not cond then ( if cond then ( val ) else if not cond then val else val else if cond and not cond and not cond and not cond and not not cond then ( val + val + ( val ) + val + ( val * if not not cond and not cond and cond then if cond and cond then (", "val", "( ( if not cond and not not cond and not cond and cond then if cond then if cond then if cond then val else if not not cond and cond and cond and cond and not not cond and not not not cond and not cond and cond then val else ( if cond then ( ( ( if cond and not cond and cond and cond then if not cond and cond and cond then val else if not cond then val else val + if cond and cond then", "val + val * val + if cond then ( val ) else ( ( val + if not cond and cond and cond then if not cond then val else if cond then val else if cond then if cond then if cond then val else val else val else ( val ) else ( ( val ) ) + val + if not cond and cond then ( val ) else if cond then if not cond and not cond then val else if cond then if not cond then val else val else if cond and cond", "if cond then val else val * if not cond then val else ( val + ( ( val ) ) + if cond then val else if cond then val else if cond then if cond and not not cond and not not not cond and cond and cond and cond and cond then val else val else val + val ) * ( if cond then if cond and cond and cond then val else if not not cond then ( val * val + if cond and cond then val else ( val +", "( ( if cond and cond and not cond then val else ( ( ( if cond then val else if cond then if cond and not cond and not cond and cond then if cond then if cond then val else if cond then ( ( ( if not cond and cond then ( val + if not cond and cond and cond and cond and cond and not cond and cond and cond then val else ( ( if", "val + val", "val * if cond and cond and not not not cond and cond and cond then val else ( if cond then if cond then ( val ) else if not cond then ( if cond then val else val * ( if not cond and cond then val else if cond then if cond then if cond then val else val else ( val ) * if not cond then val else val ) ) * if cond then ( ( val * if cond then val else val ) * ( val + val", "if cond then ( if cond then val else ( val + ( ( if not cond and cond then val else val ) * ( if cond then val else ( ( val ) * ( ( if not cond then val else val * ( ( val * if cond then val else if cond then ( val ) else val ) ) ) + val * ( val ) * if not not not not not cond and cond then", "if not not cond and cond and cond and cond then val else val + val", "if not not cond and not cond and cond then if cond then ( val ) else val else val * ( val * val * val + if cond then val else ( val ) + ( ( if cond and not cond and cond then if cond and not cond and cond then ( val * if not cond then if cond and not not cond and cond and cond then if cond and cond then (", "val", "val", "val", "if cond then ( val + ( val * ( val ) * val ) ) else val", "( val ) * if cond then val else ( ( if cond then val else val * ( if cond and not not cond and cond and not cond and cond and cond then val else ( val ) + if cond and cond then ( if cond then if not cond and cond then val else ( ( ( if cond then ( if cond then val else val + if not cond and not cond then val else ( ( val + val + val ) * if cond and cond and cond and cond", "if cond then if not cond then if cond then if cond then ( val ) else val else if cond then ( ( val ) ) * val ) else if not cond then val else ( ( val + val ) + if not cond then val else val )", "val * ( ( if not cond and cond and not cond and cond and not not not cond then if cond then val else val else val ) )", "val * val * ( if cond then ( ( val ) ) ) else ( val + if cond then ( val ) else val else val ) ) * if not cond then val else val", "val + ( val + ( if not not not cond and cond and cond then val else if cond then if not not not cond then ( if not not not cond and not not not not not cond and not cond then ( if cond then ( ( ( val ) * val * ( val + val * if not not cond and cond then ( val * if not cond then if cond then if cond then if cond then if not"], "accuracy": 0.36, "train_overlap": 0.3, "res": [{"text": "val", "log_prob": -3.647733762860298}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -25.082185540057253}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.54524071663036}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -75.7697412854177}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -90.50692657288164}, {"text": "( val )", "log_prob": -5.094630108214915}, {"text": "val * val", "log_prob": -5.645899850875139}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.98637682129629}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -18.630696652719053}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -84.23869576968718}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -85.48695862083696}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -72.31023653119337}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val * val * val", "log_prob": -8.098293740302324}, {"text": "val * val", "log_prob": -5.645899850875139}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -12.09790573164355}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -81.34488438244443}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -87.5495939712273}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -81.41515304651693}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -89.17957491974812}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -49.28966721861798}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -87.19948499315069}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.98840709280921}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.39265024045017}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -83.682662731444}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -77.08697370960726}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if not cond and cond then val else val", "log_prob": -9.367570266244002}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -88.35763165948447}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.10559028736316}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -45.52349598222645}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -74.46228875214001}, {"text": "( val )", "log_prob": -5.094630108214915}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if not not cond then val else val", "log_prob": -9.079673418658786}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -30.482411287288414}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -93.25317467260174}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -13.669001451227814}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -94.46268680901267}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val + val", "log_prob": -6.0902574602514505}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -96.83499839634169}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -98.26964427856728}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -15.735181777446996}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.661045486980584}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -90.62947952700779}, {"text": "val * val", "log_prob": -5.645899850875139}, {"text": "val + val", "log_prob": -6.0902574602514505}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -82.89797271601856}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -92.82419456227217}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.86353014037013}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -84.57482310192427}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -85.01768225297565}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.090125227114186}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -84.87517074216157}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -19.53247577341972}, {"text": "val + val", "log_prob": -6.0902574602514505}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -82.41101937222993}, {"text": "( val )", "log_prob": -5.094630108214915}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -84.58803582040127}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -16.598328934516758}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -88.7969488480012}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -85.82821802888066}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -91.69441215554252}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -80.76178759679897}, {"text": "val * val", "log_prob": -5.645899850875139}, {"text": "( val )", "log_prob": -5.094630108214915}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -65.24551501730457}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.898554751416668}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -84.28159843437606}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -26.716168845974607}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -15.380069824284874}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -83.0880672968924}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.5468039906118}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -90.57271943287924}, {"text": "if not cond then val else val + ( val )", "log_prob": -12.188508028862998}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -51.89389543667494}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -73.63107939863403}, {"text": "val", "log_prob": -3.647733762860298}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -85.24438524025027}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -14.789791606075596}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -17.825568916334305}, {"text": "( val )", "log_prob": -5.094630108214915}]}, "epoch_85.pt": {"generated_sequences": ["if cond then if cond and cond then val else val else val else val + if cond then val else val * if cond then val else ( val * val + val ) )", "( val ) ) else val )", "val else ( val * if cond then ( ( ( if not not cond and not not cond and cond then if cond then val else val else ( if cond then val else ( ( if not cond and cond and cond and not cond and cond and not cond then val else if cond then val else ( if not cond and cond then ( val ) else val + ( ( val * ( val ) ) ) else val ) ) + if not not cond and cond and not cond", "val * val * val", "if cond then val else if cond then ( val ) else val )", "if cond then val else if not cond and cond then val else ( val )", "val", "if cond and cond and cond then if cond then ( if cond and cond then val else if not cond then if not not cond then ( if cond and cond then ( if not cond and cond and cond and not cond then if not not cond then val else if not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond then val else val else if cond then ( if cond then", "if cond then val else ( ( val ) ) )", "( val + ( ( ( val ) ) ) ) * ( if cond then ( val * val ) else ( ( if cond then val else val * ( val ) ) ) ) else if cond then ( if cond then val else val ) ) + val", "val", "if cond then ( val + ( val * if not cond and cond and cond then if cond then val else ( ( if cond then val else val + ( val * val * if not not cond and cond and cond then if cond then ( if cond and cond then ( if not not not cond and cond then if not not not cond and cond and not not not not cond and cond and not cond and cond then val else if cond and cond then if cond then if cond", "( val )", "val + val * val ) else if not cond then val else ( val + val )", "( val * ( ( val ) + ( val + val * ( val + ( ( val ) * val ) ) ) + val", "val * if cond then val else if not cond then val else ( ( if not not not cond and cond and cond and not not not cond and cond and cond and cond and not not cond and not cond and", "val + if cond and cond then val else ( ( val + val * val ) * if cond then if cond then if not not cond and not cond and not cond and not cond and cond and cond then val else if cond and cond then if cond then val else val else val else if cond then if cond then if cond then ( ( ( val + if not not cond and cond and cond and not cond and cond and not cond and cond then val else if cond then ( ( val ) * if not cond then ( ( if cond then if cond", "if not not cond and not not not not cond and cond then if cond then val else val else if cond then val else if not cond and cond and cond and cond and cond and cond and cond and cond and cond then val else val else if cond then ( if cond then if cond then if not cond and cond then if not not cond and cond and cond then ( val + val * if not not cond and cond and cond then ( ( val ) else ( if cond and not cond and cond and cond and", "val", "val", "( ( if cond and cond then val else val ) + val * val ) ) ) + ( val )", "( val )", "val + ( ( ( val ) * ( if cond then if not cond then if not not cond then if cond then val else ( val + val ) else val + val ) * if cond then ( ( ( val + val ) ) else val + val ) else val ) ) ) * ( val )", "+ if cond then ( if cond then ( ( if not cond then if not cond and cond then if not not not not cond and not cond then ( if cond then val else if cond then val else val * ( ( ( val ) ) * val + if not not cond and not cond then if cond then ( val ) else ( val ) else ( ( val * val ) ) else val * val ) ) else if not cond", "val * val", "val * val ) else val ) else if cond and cond then ( val * val ) else val ) ) ) else ( if cond then ( ( ( val * ( ( val ) ) + ( ( val + ( if cond then ( ( val * ( val * ( ( ( ( val ) ) ) + ( val * ( if cond then if not not cond and cond and cond and not cond", "val", "val", "if cond then if cond then if not cond then if cond then val else if not cond and not not not cond then if not cond and not cond and cond and cond and not not cond and cond and cond and not not not not not not cond then if cond then if cond and not cond then if not not cond then if cond and not cond and cond then ( val ) else if not not cond and not cond and cond and cond and cond and cond and not cond then ( val * if not cond then if", "( if not cond then if cond then val else val else ( val * val + val * val ) ) * val ) + if cond then ( if cond then ( val + val * if cond and cond and not cond and cond then if not cond then val else ( if cond then ( ( if cond and cond then if not cond and not cond and cond and cond and not cond and cond then val else val else if not cond and not not cond and cond", "if not cond then val else val", "if cond then val else ( if cond and not cond and not cond and not cond and cond and cond and cond then val else val ) * val * val ) + val ) * if cond and cond then ( val + val ) else ( if not not cond then val else val ) ) + if not cond then val else val * val )", "( val + val )", "( val ) * val", "val + ( val * ( val ) ) ) else val + if cond then if not cond and cond then if cond then val else ( val + val + if cond then ( val * if not not cond and cond and not cond then ( if cond and not cond then ( val ) else val * ( ( val * val ) * if cond then ( if cond then if not cond then ( (", "( ( if cond and cond then val else ( if cond then ( if cond then val else ( if cond and cond and cond and cond and not not not cond and not cond and cond and cond and cond and not not not cond and cond and not cond and not cond then ( if cond then val else ( val * if cond then val else if cond then val else val ) ) ) else ( val + if cond then val else val * val + ( val ) ) ) + if cond then ( (", "val * if cond then val else ( val ) + val", "if cond then val else if not not not not not cond and not cond then ( val + val ) else val * if cond then ( ( ( val ) ) else ( ( if cond and cond and cond then if cond and not cond then if not cond then ( val ) else val else val else val else val + ( val + ( ( ( ( val ) * val ) )", "( val * if not cond then val else ( val + if cond and not cond then ( val * val ) else val + ( val + if cond then if cond and cond and cond and cond and cond and cond and cond and cond then ( ( val ) else val else val * val ) ) ) ) * if cond then val else val ) )", "( ( ( val * ( if cond and not cond and cond and cond and not cond and cond and cond and cond and not cond then if cond and cond then if cond then val else val else ( if cond then val else ( val * val * val ) ) * val + val * val + if not not not cond and cond and cond then if cond then if not not cond then if cond and cond then if cond then ( val * ( (", "if not cond and cond and cond and not cond then val else if cond and cond and cond then ( if not cond and cond and cond then ( val + ( ( ( val + val * if not cond and not not cond and cond and cond and cond then if cond then ( ( ( val + if cond then val else val ) else val ) ) * if cond and not cond then if not cond and cond and cond then ( val + ( val ) ) else if cond then", "val + ( if not not cond and not cond then ( ( val ) ) else val * if cond then val else val ) ) else ( val ) ) ) + val ) ) else val else val ) )", "( val ) ) + ( if not not cond and cond and cond and not cond then if not cond then if cond then if cond then ( ( ( if cond and cond and cond then if cond and not not cond then ( val ) else ( val + val * if cond then val else ( if cond and cond and cond then val else val ) else val ) ) ) * val else if cond then ( val ) else val else ( if not", "( val ) + val * val + ( val )", "val + if cond then val else ( val + ( val + if cond then ( ( ( val ) ) else val ) * val * val * if cond and cond and cond then val else ( if cond then val else val * ( val + val ) ) ) ) * val ) ) + if cond then if not not cond and not cond and cond and cond then val else if cond then ( val ) else ( ( ( if", "( val * if cond then if cond then val else if not cond and not not not cond and not cond and not cond and cond and not cond and not cond and cond and cond and cond then val else ( if cond then val else ( if cond then if cond then val else ( ( ( if not cond then val else ( if not not not cond and cond then ( if cond then ( ( val + val + ( val + ( val ) ) + ( if not cond and cond and", "val * if not cond and cond then val else val )", "val then if cond then val else if cond and not cond then if cond then if cond then val else val else ( ( if cond then if not cond and not cond then if cond then ( val ) else ( val ) * val else ( val * if cond then val else ( if not cond then val else if cond then val else ( val ) * val ) ) * val ) ) ) * ( ( val * if cond then (", "val + if cond then val else ( val ) ) * if cond then if", "if cond then if cond and cond then ( ( if not cond and cond and not not cond and cond then val else val ) else val + val ) else val + val + ( if cond then ( ( if cond then ( ( val ) else ( ( val ) ) + ( val ) ) + val ) ) ) + ( ( if not not cond and not not not not not not not not cond and cond and cond and cond and not not not not not cond and cond and"], "accuracy": 0.32, "train_overlap": 0.26, "res": [{"text": "val", "log_prob": -3.0319733256474137}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -23.871986924103112}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -18.18242903117789}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -75.57393600029172}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -88.8421383567038}, {"text": "( val )", "log_prob": -5.018154698074795}, {"text": "val * val", "log_prob": -5.198120624059811}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.690822165983263}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -20.74658964984701}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -85.58082917224965}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -85.56874755467288}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -74.15668600273784}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val * val * val", "log_prob": -7.457743825681973}, {"text": "val * val", "log_prob": -5.198120624059811}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.56913179840194}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -82.69069226743886}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -87.81262703018729}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -80.94248802858056}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -88.71548923163209}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -48.90584253598354}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -87.10285487628425}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -96.61817013446125}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -66.56684841422248}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.52462194170221}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -79.76788222088362}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if not cond and cond then val else val", "log_prob": -8.779471453803126}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -88.79597685919725}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -84.00969068426639}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -45.88941452326253}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -74.39457263835357}, {"text": "( val )", "log_prob": -5.018154698074795}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if not not cond then val else val", "log_prob": -8.61537156580016}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -30.396802878633025}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -91.73044931111508}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -13.195294801145792}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -93.45847031709854}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val + val", "log_prob": -4.9849175398703665}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -97.17079524343717}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -95.71876551955938}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.917521084396867}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -15.28152625221992}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -89.59873820870416}, {"text": "val * val", "log_prob": -5.198120624059811}, {"text": "val + val", "log_prob": -4.9849175398703665}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -82.05936210684013}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -94.74078178207856}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -86.7494011548988}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -82.72913459589472}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -86.54200513171963}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.77699523577758}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -83.34602247612202}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -18.76440494292183}, {"text": "val + val", "log_prob": -4.9849175398703665}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -81.75289623663411}, {"text": "( val )", "log_prob": -5.018154698074795}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -85.508840301889}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.725014379568165}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -86.86295086384052}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -86.3171608838893}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -89.08392191035091}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -81.13474145549117}, {"text": "val * val", "log_prob": -5.198120624059811}, {"text": "( val )", "log_prob": -5.018154698074795}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -62.342112934202305}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -10.819322032853961}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -86.84356852972996}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -27.51496236762614}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -14.804354367544875}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -84.86926750728162}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.33791698864661}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -92.4204554790631}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.501990814402234}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -52.27112238407426}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -71.7756331837445}, {"text": "val", "log_prob": -3.0319733256474137}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -85.8805061453022}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -14.38143951795064}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -16.417092439573025}, {"text": "( val )", "log_prob": -5.018154698074795}]}, "epoch_90.pt": {"generated_sequences": ["( val * ( val * ( if not not not cond and cond then if cond and not not not cond and not cond and cond and cond and cond and cond and not not not cond and not cond and not not not cond and cond and not not cond and cond and not cond and cond and not not not cond and cond then if cond then ( val ) else val else val else ( ( ( val ) * if cond then if cond then val else if not cond then ( if not not not cond then if", "( ( ( if cond then if cond then val else if not cond and cond and cond and not cond and not cond and cond and cond then val else ( val ) ) else val ) else val else val * if cond then if cond then if cond then if not not cond and not cond then ( val ) else ( if not cond then val else if cond then if not cond then ( if not cond then val else if cond then ( if not cond then ( val ) else val ) else val else ( val ) ) else ( if cond then val else val ) else", "( val )", "if cond then ( val * val ) else if cond then ( if cond then val else ( ( val * if cond then ( val ) else if cond and cond then val else val + val + if not not cond and cond and not cond and cond and cond and cond then if cond then ( if cond then val else val else ( if cond then val else val ) + ( val ) + ( if not cond then ( if cond then val else val ) else if cond then ( if cond then ( val", "val + if not cond then if cond and cond and cond then if cond and cond and not not cond and not cond and cond and cond and not not cond and cond and cond and not cond then if not not cond then val else ( val ) else ( val ) ) else ( if cond then ( if cond then val else ( val ) * val * ( if cond then if cond and cond and cond and not cond then if not not not cond then ( if not not cond and cond and not cond and cond and not cond and cond", "if cond then if cond and cond then ( ( val ) ) else ( val ) else if cond and not not cond and cond and cond then val else if cond then if cond then ( val ) else val else if not cond then if cond and not not not cond and cond and cond and cond and not cond then if cond then val else val else ( if not not cond then ( val ) else if cond then ( val * ( val + if cond then ( val ) ) else ( (", "val", "if cond and not not cond and cond and cond and cond and cond and cond and cond and cond and cond then val else ( ( ( val ) * if cond then val else val ) ) ) + val ) )", "if cond then val else val", "( val ) * ( if cond then val else ( if cond then val else val * val ) + val ) ) ) else if not cond then ( val + if not cond and cond and not cond and cond and not cond then ( if cond then val else if cond then val else ( val * val * ( if cond then ( if not cond then val else val ) else val + if cond then ( if cond then ( val ) ) else ( if cond then (", "val", "val", "( if cond then val else val + val + ( val ) + if cond then if cond then ( val ) else val else ( if not cond then val else if not not cond and cond then val else val ) )", "val * if not cond then if cond then val else if cond then ( val + ( val ) ) ) else val else if cond and not cond then ( val + if not not cond then val else val ) else if cond then ( ( if cond and cond then if cond and cond then if cond then val else if cond then val else if cond then val else ( ( if not cond then val else ( ( val ) + ( ( if cond then ( val else val ) ) ) )", "( if cond then if cond then val else if not cond then if cond then val else if cond then if not cond and not not not not cond and not cond and cond and not cond and cond and not not not cond and cond then if cond and cond and not not cond and not not not cond and cond and not cond then val else if cond and not not cond and cond then ( if cond and cond then val else if cond then val else val ) else if not not cond then val else if cond then ( val ) else ( ( if cond then ( val * val", "val + if cond and cond and not not not not not cond and cond and not not cond then val else if cond then if not cond and not cond then val else val else if cond then val else ( val * val * ( ( val ) ) ) ) else if not cond then ( val + val + ( val ) + if cond then if cond then if cond then if cond then val else if not not not not not cond and not not cond and cond and cond then val else val else if cond and", "if not cond and cond then val else val else if cond and cond and not cond and cond and not not not not cond and cond and cond and not cond and not not not not cond and cond and cond and cond and cond then val else val ) else if cond then val else val", "val * ( val * val ) * val ) * if not cond and cond then ( if cond then val else ( val ) else ( ( val ) ) ) else val else if cond then ( val * val * val * if not cond and not cond and not cond then val else val ) else val else val * val else ( if not cond and cond then if cond then val else if not not cond and cond then if cond then if cond then ( val ) else if not not not cond then ( val * if cond", "val * ( ( ( if not not cond and not not not cond and cond then val else val ) ) else if not cond then if cond then val else val else val ) else if not cond then if cond then if cond and cond then if cond then val else if cond and cond then if not cond then if not cond and cond and cond and cond and not cond and not not not cond and not cond and cond and cond and cond and cond and cond then if not cond then val else val else ( val + ( val ) *", "if cond then val else val ) else if cond and cond then if cond then val else ( val * val ) else val else if cond then val else ( val * if not cond and not cond then val else ( if cond then val else val ) ) ) else if cond then if cond and cond then val else if cond then val else val else if cond then if not cond and cond then if cond then val else val else ( val * ( val + val + val + if cond then (", "val * if cond then if not not not cond and cond and cond and cond then val else val else val ) else val else ( val * if cond then val else if not not not cond and not cond and not not cond and cond then if not not cond then if cond then val else ( val + if cond then if not cond then if cond and cond then ( val ) else ( if not not not cond and not cond then ( ( ( val + val ) ) ) ) else if cond then ( ( val", "( if cond then if cond then val else val else val else val )", "( val + val ) * ( if cond then if not not cond and cond and not not cond then ( val ) else if cond then val else val ) else ( ( val + val ) + val ) + if cond and cond and cond then if not cond then if cond then if cond and cond then if not cond then val else val else if not not cond and not cond then if cond then ( val * val ) else if cond then if not not not cond then if cond then val else if not cond then ( ( if", "if not not cond then if cond and not not", "val * if not cond then val else val + if not not cond then val else val ) + val * if not cond and not not cond and not cond and not not not cond and cond and cond and not cond and cond then val else if not cond then ( ( if not not cond then if not not cond then ( if cond then val else ( val + ( val ) ) ) else val ) + val else if cond then val else val else ( ( val ) ) ) ) else val else val )", "val", "( ( ( val ) ) ) ) + if cond and cond then if cond then ( val ) else val else if cond then ( if cond then val else val * if cond then if not cond then val else val else if cond then val else if not cond then val else if cond and not not cond and cond and cond and cond and cond and not cond and cond then ( val * if cond then ( val + if cond then val else ( if cond then val + val ) else ( if not not cond and cond and cond and cond and", "val * if not cond then val else ( if not not cond then ( val * ( ( val ) ) else ( val ) ) * ( val ) * val ) ) else if not cond and cond then if not cond and cond then val else ( ( ( if cond then if cond then val else ( if cond then val else if not not cond and not not cond then if cond and not cond then val else val + val * if not cond and not cond and not cond and cond and cond and cond and not cond and not not not cond then", "val * if not cond then ( val ) else val else ( val * ( val ) ) + if cond then ( val ) else if cond then val else if cond then val else ( if cond then val else ( ( if cond then ( val ) else val * if cond and not cond and cond then ( val + val ) + val + val * if not not cond then val else val", "val * ( val * ( ( if cond then val else val * if cond then val else if cond then val else val * val ) ) ) else if cond then val else val ) * ( if not cond and cond and cond and cond and not not cond and cond then ( ( if cond then ( val ) else val * if not cond then val else val * ( val ) ) ) else ( val ) ) ) ) * val * val + val * val * if cond then val else if", "val", "( if cond then ( if cond and cond then ( val ) else val ) else if not cond and not cond then if cond then if cond then if not cond and cond then val else val else val else if cond and cond then val else if not cond then val else val else if cond then ( if cond then val else ( val + val + val * val * if cond then val else val ) ) ) ) else if not not cond then val else ( if cond then if not cond and not cond then if not not cond", "if cond and cond then if cond then val else ( ( if not not cond and cond then ( ( if not cond then val else if cond and cond then val else ( ( if cond and cond then ( ( ( ( if not not cond and not cond and cond and cond and cond then ( ( val + ( val ) ) + ( if not not cond then if cond then ( val * ( ( val ) * val ) ) else val * ( if cond then val else if cond then if cond then", "( val ) ) + ( ( val * ( val * if cond and cond and not not cond and not cond and cond then if cond then if cond then ( ( ( if cond then if not cond then val else ( ( val ) * val ) ) else if not cond then val else val else ( val * if cond then if cond then val else val ) else val else if not cond then ( if cond then val else val ) * val ) else val ) * ( if not cond then if cond then if cond and cond then if not cond then if", "val", "if not cond then if cond then val else if cond then ( val ) else ( val ) + ( if cond then ( ( if cond then ( if cond and cond then val else ( val ) ) else ( if cond then if not not not not cond and cond and cond and cond and cond and not not not cond and not not not cond and not cond and cond then if cond then val else val else val else val ) else val ) else ( val * if cond then val else val * if cond then val else ( if", "val", "( if cond and cond and cond and cond and cond then ( ( if not not not not not not cond then val else ( ( ( val ) ) ) ) ) else val else ( ( if not not not not cond then val else val ) * if cond then if cond then if cond then val else ( val ) else ( val ) else val ) else ( if not not cond and cond then if cond then val else ( ( val ) + val * ( val * ( if not cond then val else ( ( ( val", "if cond then ( if cond then if not cond and cond then ( if not cond and not not cond and not not cond and cond and not cond then val else ( ( ( ( val * if cond and cond then if not not not cond and not not cond then val else val ) else val ) + val ) else ( if not cond then ( ( val ) ) else if cond then val else ( if cond then val else if not not cond and cond then ( val ) else ( ( ( (", "( val + val + if not cond and cond then if cond then ( val + ( if cond then if cond then val else if not cond and cond then if not cond then val else val else ( ( val ) ) ) else ( val * if not cond then val else val + val ) ) else val + if cond then val else ( val * ( val + val ) * if cond then if cond then if cond then ( ( val ) ) else val and cond and cond then if cond then val else ( val * if cond then val", "val + ( if cond then if not cond and cond then val else ( val * val + val ) else val ) else val ) ) * if not cond then val else if cond then ( if cond and cond then if not cond and cond then ( val ) else val else ( ( val ) * ( val ) * val * if not cond then if not not not cond and cond then val else ( val ) else if not cond then val else ( val ) else val else val ) ) ) else if cond then", "if not cond and not not cond and cond and not not cond and cond then ( val ) else ( if cond then val else val ) else val ) * ( val ) + val )", "if not cond then val else ( val * if cond and", "( ( val + if not not not cond and cond then val else ( val ) ) * val + if not not cond and not cond then val else ( val * ( if not cond then val else ( if cond then val else val * val ) else if not cond then val else val ) ) ) * if cond then if cond and cond then val else val else ( val", "( val * if not cond then ( val + ( val + val ) * val + val + if cond and cond then ( val ) else if not not cond and cond and cond and not not cond and cond then ( val * val ) else val else ( ( val * ( val * ( val ) ) ) ) ) * val ) else if not not not cond and cond and not not not not cond and not not not cond and not cond and cond and cond and cond and cond and not not cond and cond", "( if not cond and not not not cond and not cond and not cond then val else ( ( if cond then if cond then if not cond and cond and cond and not cond and cond and cond and not not cond then ( val ) else val else if cond then val else if not cond then if cond then ( val ) else if cond then val else if not cond and cond and cond and not cond and cond and not cond and cond and not not cond and cond and not cond and not not not cond and cond and cond and not not not cond and not cond and cond then if", "( if not not not not not cond and cond and not cond and cond then val else ( if cond and not cond and cond then if not not not not not not not cond and not not cond and not not cond and cond and not not cond and cond and not not cond and cond and not not cond and cond and cond and cond and not not not cond and not not cond and cond and cond and cond and not not not cond and cond and not not cond and cond and cond and not cond and ) else val else if cond then if not not cond and cond then", "val * if cond then ( val ) else if cond then ( val ) else if cond then if cond then val else if cond then ( ( val ) ) else val else val else val ) * val + ( ( if not not cond and cond and cond then ( val ) else if cond then if cond then if cond then val else ( ( ( val + ( if not cond and cond and cond then ( val ) else val + val ) ) else val + val ) ) else ( val + ( if not cond and cond then ( (", "( ( if not cond and not cond and cond then if cond and cond then val else val else if cond then if not cond and not cond and not not cond and cond then val else if cond then val else val else if cond then if not cond and cond then ( ( val ) ) else if cond then ( ( val ) ) else ( val ) ) else val * ( val ) ) else val * val ) else ( val )", "if cond then val else if not not cond then val else val * if not not cond then if not not cond and cond and not cond then ( if cond then ( if not cond then if cond then if cond then if cond then val else ( val ) else val else if cond then if cond and not not cond then val else ( if not cond then if not cond then ( if cond and cond and cond and cond then if cond then ( val ) else val else ( if not cond then if not cond then ( ( ( if cond"], "accuracy": 0.2, "train_overlap": 0.18, "res": [{"text": "val", "log_prob": -3.491011055186391}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -25.09750544745475}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -20.070980376476655}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -74.99111070018262}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -92.34150836066692}, {"text": "( val )", "log_prob": -6.223388071171939}, {"text": "val * val", "log_prob": -6.051419044146314}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -15.585606785549317}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -19.69269692490343}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -84.53858992827008}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.70823734530131}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -76.35620563081466}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val * val * val", "log_prob": -8.609690348152071}, {"text": "val * val", "log_prob": -6.051419044146314}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -11.242617761658039}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -81.15961173508549}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -88.72386984381592}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -85.11341231799452}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -91.31350577709964}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -51.6979065714404}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -87.83592452894663}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -97.27071043261094}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -67.4188774782524}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -84.48995400487911}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -76.61224234319525}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if not cond and cond then val else val", "log_prob": -8.552218420663849}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -89.9113310961693}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.09589886394679}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -46.511583536397666}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -73.29832909436664}, {"text": "( val )", "log_prob": -6.223388071171939}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if not not cond then val else val", "log_prob": -8.497225736675318}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -32.88751367258374}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -94.12268013259745}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -15.963875302812085}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -95.54010176612064}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val + val", "log_prob": -6.12472825543955}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -97.9034579382278}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -99.88533062167699}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -16.300049062265316}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -17.526232108823024}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -90.39355694720871}, {"text": "val * val", "log_prob": -6.051419044146314}, {"text": "val + val", "log_prob": -6.12472825543955}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -84.52372805733467}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -95.25550455466146}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -88.9716619157698}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -86.03991440194659}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -85.00177307071863}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -35.7205351384473}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -83.91891293961089}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -20.865340292046312}, {"text": "val + val", "log_prob": -6.12472825543955}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -84.14168436449836}, {"text": "( val )", "log_prob": -6.223388071171939}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -86.42068040341837}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -16.141355719184503}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -91.19399759094813}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -88.61903804950998}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -90.44657504826318}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -80.83842567692045}, {"text": "val * val", "log_prob": -6.051419044146314}, {"text": "( val )", "log_prob": -6.223388071171939}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -61.30166527265101}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -11.74419993814081}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -87.56949862660258}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -28.332504509249702}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -15.47829372898559}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -83.81591609676252}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -92.0048395814083}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -93.73149108458892}, {"text": "if not cond then val else val + ( val )", "log_prob": -12.97128647507634}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -53.13271247729426}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -75.29182525957003}, {"text": "val", "log_prob": -3.491011055186391}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -89.27384506055387}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -15.712600237107836}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -17.843300045409705}, {"text": "( val )", "log_prob": -6.223388071171939}]}, "epoch_95.pt": {"generated_sequences": ["val + if not not cond then ( val * val * ( ( if not cond and cond then val else ( if cond then val else if not cond then if not cond then val else if cond and not not cond then ( val ) else val else if cond then ( ( ( if not cond then val else val ) ) else val * val * ( if not not not cond and cond then ( val ) ) else if cond then val else val else ( if cond then ( ( ( ( val * if cond then val else ( val", "if cond and cond then val else if cond then val else val", "( if cond then ( val + if cond then val else val ) ) else if not not cond then if not cond and cond and cond then val else ( ( val + if cond then val else if cond then ( ( val ) * val ) else if cond then val else ( val ) ) else if not cond and cond then if cond then val else if cond then ( if not cond and not cond and not cond and cond and not not not cond and cond and not cond and not cond and", "val not not cond and not cond then val else ( if not cond then ( ( val ) else if cond and cond then ( ( val * if not cond and cond and not cond then ( val * ( if not cond then ( ( val + if not cond then ( if cond and cond and cond then val else val ) ) else if cond then val else val else val * if not cond then val else val ) + ( val ) + val * val ) else if not cond and not cond", "val", "val + ( val * if cond then val else val * if cond then if cond and not cond then ( val ) else val else if not cond and cond then if cond then (", "if cond and cond then if cond and cond then val else val else ( ( ( ( if cond then ( if not cond and cond then if cond then if cond then ( val ) else val else ( if cond and not cond then val else if cond then val else val else if cond then if cond then val else val else if cond then if cond and not cond and cond then ( if cond then ( if cond then ( ( if cond then if cond then if", "val", "( if not cond then ( if not not not cond and cond then if cond then val else val else if cond and cond then ( if cond and cond then ( val + if not not cond and cond then val else if cond and not not not cond and not cond and cond then val else if cond and cond and not cond and not not not not cond and cond and not not not cond and cond and not cond and cond and cond and cond then ( ( val ) * if not cond and not cond and cond then val else ( if cond then (", "if cond and cond and cond then if cond and cond then val else val else ( if cond then if not cond then if not not cond and cond then ( if cond then val else val ) else", "if cond then val else if not not cond then ( ( if cond then ( ( if cond then val else ( if not cond and cond then if not not not cond and not cond and cond then if cond then val else ( if not cond then val else val * if not not cond then ( val ) else val else if not not not cond and not cond and cond and cond and cond and cond and cond and cond and not cond and cond then ( ( ( if cond then if cond and cond then val else ( if not cond then", "( if cond then ( val ) else if not cond and not cond then val else ( if not cond then val else val ) + if cond then if not not not cond and cond and not not cond then ( ( ( ( if not cond then val else ( val ) * if not not cond and cond and not not not not cond and not not cond and cond then val else if cond and cond then if cond then val else ( val * ( val + if cond and cond then ( if not cond then ( if not not cond and cond then val else val ) else", "if cond then ( val * if cond then if cond then ( val ) else val else ( if not cond then val else if not cond and cond and cond and not cond and cond and cond and cond then val else if not cond and cond then ( val ) else if cond then if cond and cond then if cond then ( ( val ) ) else val else ( ( ( val * if not cond and not not cond and cond and cond then val else val * val ) ) ) * if cond then val else val ) + if cond then", "val", "( val ) * val", "if not cond then val else ( val ) * val", "( val )", "( ( val ) + ( val + val ) )", "( ( if cond then ( if cond then if cond then val else ( ( if cond then if not not cond then val else ( val ) else if cond and not not not cond and cond then ( val ) else val ) * val else ( val * val ) ) ) ) else if cond then val else val else val", "if cond then if not not cond and not cond then val else val else ( if cond then ( if not not cond and cond and cond and cond then if cond and cond and cond then ( val ) else ( if cond and cond then if not cond and cond and cond and not cond and cond and cond and cond and cond and not cond then if cond then ( val ) else val else ( if cond then val else ( ( val ) ) + ( val * if cond then val else ( val ) )", "( if cond then val else val ) * ( val * if cond then val else ( ( if not cond and cond and cond and cond then val else ( ( ( val * ( val * val * if not cond and cond and cond and cond and not cond and cond and cond then val else if not not cond then val else val ) ) * ( val ) * val ) * if cond and cond then if not cond then ( val * ( ( if cond then ( ( if not not cond and cond", "( ( if cond and cond and cond and not not cond and cond then val else val ) * if not cond and cond and not cond and cond and cond then val else if cond then val else ( ( ( if cond then if not not cond and cond then ( ( ( if not cond and cond and cond and not not cond and not not cond and cond and cond then val else val + if cond then val else val ) ) ) else val * if not cond then val else val ) * ( if not not cond", "val", "val", "if cond then ( val ) else if cond then if cond then val else val else ( ( val + val ) ) else ( if cond then ( val ) else ( val * ( val ) ) + val + if cond then if cond then if not cond and then if cond then val else val else val else if cond then val else ( if cond then if cond then ( ( if not cond and not cond and cond then if not cond then ( ( ( val + val", "if cond then if cond then if cond then val else ( val + val ) else val", "( ( if cond then ( ( if not cond then val else ( if cond then ( val * ( val ) ) else val * val + ( val ) * if cond then val else ( val * if not cond then if cond then val else val else if not cond and not not cond then val else if cond and not cond and not cond and not cond then ( val + ( ( val ) )", "val + val", "( ( val ) + if not not cond then ( ( ( if cond then val else ( if cond then val else ( val * ( val ) * if cond then ( if not cond and cond and cond and cond and not cond and cond and cond and cond then val else if cond then val else val ) * ( if not cond and not cond and cond and cond then ( val ) else val ) * val + if cond and not cond then ( val * if cond then val", "val * ( val )", "val * ( if not cond and cond and not not cond then ( if not not cond then val else if cond and cond then val else val * val ) else if not cond then val else ( if cond and cond then if not cond and not cond then ( val ) else val ) else ( if not not cond then if cond then val else if not cond then if cond then val else if not cond then ( val ) else ( if cond then if not cond and cond then ( ( val ) else if cond and cond and not cond", "if cond and cond then ( val ) else if not cond then ( val * val + ( ( val ) * if cond then ( ( ( if cond and cond and not not cond and cond and cond and cond and cond and cond and cond then val else if cond then if cond and not not not not cond and not not not cond and not cond then val else val ) else ( ( if cond and cond then val else val )", "val", "val", "val", "if cond then ( ( if cond then ( ( if cond then if cond then ( if not cond and cond and cond and cond and not not cond and not cond and cond and cond and not not cond then if cond and cond and cond and cond and cond and cond and cond and cond and not cond and cond then if cond then val else if cond then val else if cond then val else val else val else val ) else if cond then ( if not cond and not not not cond then ( val ) else", "if cond then val else ( ( val ) * ( ( if not cond then val else if not cond then ( ( val ) else if cond then ( val + val ) else if cond then if cond then if cond then val else ( val ) else val ) else val ) ) + if cond and cond then if not cond then if cond and cond then if not not not cond then if cond then val else val else ( val * val ) else if cond then val else ( ( val ) * if cond", "val", "( val ) * if cond then val else val", "val + if cond then val else ( val )", "val * ( if not cond then if cond then val else if cond then ( if cond and cond then val else if not not not cond and cond then val else ( ( ( val ) + if not cond and cond and cond and cond then if cond then ( if not not cond and cond then if not not cond then ( if cond and not cond and not cond then val else if cond then if not cond and not not not cond and cond and cond and not not cond and cond and not cond and cond and not", "val", "val", "val", "val + if cond and cond then ( val * if cond then val else val )", "val", "( val * if cond and cond and cond then ( ( val * val ) ) else val )", "if cond and cond and cond and cond and cond then ( ( ( if cond then ( ( ( val ) + ( if cond then if cond and not cond and cond then ( ( ( ( if not cond then if not cond then ( val * ( val ) ) else ( if cond then val else ( if not cond and cond and not cond and not cond and not not not cond and cond and cond and cond and cond and cond and not cond and cond and cond and not not not cond and cond and cond and cond and cond then if not not", "( ( if not cond then ( val + ( val ) else val ) + if not cond then if cond then val else val else val ) else ( if cond then if not cond and cond and cond and cond then ( val ) else val ) else val * val ) + ( ( if cond then val else val ) * ( if cond then if cond then if not not not cond then val else ( if cond then val else val ) * if cond then val else val * if not cond then if cond", "( if cond then ( if cond then if not not cond and cond and cond then val else if not not cond then ( val * ( val + ( if cond and not not cond and not cond and cond and cond then ( val * if cond then if cond then val else if not cond and cond then ( val ) else val else val * if cond then if cond then val else if cond then val else ( if cond then val else if not cond and not cond and not cond and cond and not not"], "accuracy": 0.46, "train_overlap": 0.34, "res": [{"text": "val", "log_prob": -2.2795102717354894}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val + val * ( if cond and cond and cond and not not cond and not cond and not cond and cond then val else val )", "log_prob": -24.127952728653327}, {"text": "( val * val ) * if cond then val else if cond then ( val ) else val", "log_prob": -17.08634035778232}, {"text": "if cond then if cond then if not not not cond then val else if not cond then if not not not cond then if cond then ( val ) else val else ( ( val ) ) else if cond then val else if not not not not not not cond and cond and cond and not not cond and cond and cond and cond and not not cond and not cond and not not cond and cond and not cond and cond then val else if cond then ( ( val * val ) ) else val else", "log_prob": -74.65008334536105}, {"text": "( if cond and cond and not cond and not not cond and cond then val else ( val ) + if cond then val else val + ( ( ( val * if not not cond and not not cond and cond and cond and cond and cond then val else val ) + ( ( val ) ) * val * if cond then val else ( val ) + ( ( ( if not not cond and not not not not cond then val else ( ( if cond and cond and cond and cond then if", "log_prob": -90.61054633074673}, {"text": "( val )", "log_prob": -4.366570222657174}, {"text": "val * val", "log_prob": -4.7785823286976665}, {"text": "( ( if cond then val else val ) ) + val", "log_prob": -12.459547442791518}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if not cond then ( if cond then ( val * ( val ) ) else val ) else val", "log_prob": -18.02916595339775}, {"text": "( if not not not not cond then ( ( if cond then val else val + if cond then if not cond then val else val else if cond and cond and cond then val else ( val + if cond then val else if not not not cond and cond and cond and not cond and cond then if cond then if not not cond then ( val ) else ( ( if cond and cond then ( if not not not cond and cond and not cond then if cond then ( if cond then ( if", "log_prob": -83.68648850676254}, {"text": "val + if cond and cond and cond then if cond then if not not not not not not cond and cond and cond and cond then val else val else ( ( if cond then val else val * ( if cond then val else ( ( if cond then val else if cond then val else ( if not not cond then val else ( val ) ) * val * val * if not cond then val else ( ( val * if cond and cond then if cond then ( if not cond then ( if", "log_prob": -84.16411224953481}, {"text": "if cond then ( val ) else if cond and not not cond then if cond then ( val ) else ( val ) else ( ( ( if cond then ( if not cond then if cond and cond then val else if not not cond then ( val ) else if cond and cond then if not cond and cond and not cond and cond and not not cond and cond and not cond and cond and cond and cond and not cond and cond and cond and cond and cond then val else ( if cond then", "log_prob": -75.78015791706275}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val * val * val", "log_prob": -7.157672874047421}, {"text": "val * val", "log_prob": -4.7785823286976665}, {"text": "if cond and not cond and cond and cond then val else val", "log_prob": -10.89720477105584}, {"text": "if not cond then ( if cond then ( ( val ) ) else val ) else if cond then val else if cond then ( ( val * if cond and cond and cond then if cond and cond and cond then if cond and cond then val else val else val else if not cond then if not not cond and not cond and cond and cond and not not not cond and not cond then ( val * if cond then if cond then ( val ) else ( ( if cond and cond and cond and", "log_prob": -81.35539216391044}, {"text": "( if cond and cond and cond and not not cond and cond then if not cond then val else if cond then if not cond then ( ( val + if cond and cond then if not not cond then ( ( if not cond then ( val ) else ( val ) ) + ( val + if not not not cond and cond and cond and cond and not not not cond and cond and cond and cond and not cond then val else ( val + ( ( if cond then ( ( if cond and", "log_prob": -88.28166488948045}, {"text": "if not not cond then val else if cond then ( val + val + ( if cond then val else val ) + ( if cond then val else ( val * val ) * if cond then val else ( val * val * if cond then val else val ) * ( ( if not cond then if cond then val else val else ( if not cond and not not cond and not not not not cond and cond and cond and cond and not not cond and cond and cond and not cond and cond", "log_prob": -81.46483881014865}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if cond then val else if cond then ( val ) else ( ( ( ( if cond then if cond then val else ( if cond then ( if not cond and not not cond and cond then if cond then ( val * val + val + if not cond then ( val ) else val + if cond and not cond and not not cond then val else val ) else val else if cond and not cond then val else val + val ) else val ) else if not cond then ( if cond then", "log_prob": -89.04798907923396}, {"text": "val + ( ( val ) + if cond then if not not not cond and not cond and cond and cond then val else val else if cond then val else val * if not cond and cond and cond and cond then ( val ) else ( ( val ) ) ) * val", "log_prob": -47.13272335482179}, {"text": "val * ( if not not cond then if not cond and cond then val else val else val ) * if cond and not cond then ( ( if cond then ( ( ( ( if not cond and cond then ( val ) else val + if not not cond and not not not not cond and cond and cond then if cond then val else if not cond and not not not cond and not cond and cond and not cond then if cond then if cond then val else ( val ) else if cond and", "log_prob": -85.90167128544999}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if cond then ( if cond and cond and cond then if cond and cond and cond then val else ( ( if not cond then ( val ) else if not cond then ( ( ( if cond and cond then val else if cond then ( val + ( ( ( ( val * ( ( if cond then ( ( val ) + if cond and cond and cond then ( ( ( ( ( ( val + val + ( if not cond then val else if not not not not cond then val else if", "log_prob": -95.5264923274517}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "( val ) + if cond then val else if cond then ( if cond and not not cond then ( val * val ) else ( val ) * if cond then val else ( if cond then ( ( if cond and not cond then if cond then val else ( val ) else val ) * val ) else val + val ) ) else val * val", "log_prob": -66.89986813737778}, {"text": "if cond then if not not cond then val else val else if not not not cond and cond then val else if cond then if cond then val else val else ( val * val ) + ( if cond then if cond then val else if cond then if cond then if not cond then ( val ) else ( val ) else if cond then ( ( if cond then ( ( ( val ) * if cond then if cond then if cond then ( ( val + if cond and not not cond then val", "log_prob": -83.1423367287498}, {"text": "( if not not not cond then ( val ) else if cond then if not cond then if cond and cond and cond and not cond and cond and cond and not not cond and cond and cond and cond then val else if not cond then val else if cond then if cond then if not cond then if not cond then if cond and not cond then val else if not cond and cond then val else val else if cond and not cond then if not not not cond and cond and not cond then if", "log_prob": -78.85213146349997}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if not cond and cond then val else val", "log_prob": -8.094091999228112}, {"text": "if cond and not not cond then val else if not cond then if cond then ( ( ( if cond and cond and cond and not not cond then ( if cond then if not not cond and not not cond and cond then val else if not cond and cond then ( if not cond and cond then val else ( val * val * ( val ) ) * val * if cond and cond and cond and not cond and cond then ( ( if not cond and cond and not not cond and cond and", "log_prob": -87.87567856407259}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val * if cond then if cond and cond and not cond then if cond then if cond and not cond and not not cond and not cond and cond and not cond then val else val else val else ( val + val ) else if cond then val else if not cond and not cond then val else val * ( val * val * if cond then if cond and cond and cond and cond and cond and cond then val else if cond then val else if cond then ( if cond and cond then val", "log_prob": -83.93564815685386}, {"text": "( val + ( val ) ) + ( ( ( ( if not cond and cond then ( ( val ) + ( val ) ) else ( val ) ) ) ) * val ) + ( val )", "log_prob": -46.17550173436757}, {"text": "if cond and not cond then if cond then val else if not cond and not not cond then if cond then val else ( val ) else if cond and cond then val else if cond then if not cond and not not cond then val else ( val ) else ( if cond and not not cond then ( val ) else val * if cond then val else if cond and cond then val else val * if cond then val else val ) else val", "log_prob": -71.41886873572366}, {"text": "( val )", "log_prob": -4.366570222657174}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if not not cond then val else val", "log_prob": -7.931267078150995}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val * if not cond and cond then val else ( if cond then val else if not not not cond then val else if cond then val else ( val * val ) )", "log_prob": -29.265296502504498}, {"text": "if not cond then ( if not cond and not cond and cond and cond and cond and cond then ( if cond then ( val ) else ( ( if not cond then ( ( val + ( ( if cond then if cond then val else val else val ) * val ) + if cond then if cond then val else val else ( val ) * ( val + val ) ) ) else val ) ) ) else val ) else val * ( val * val ) + if cond then val else if", "log_prob": -94.34567487146705}, {"text": "val + ( ( ( val ) * val ) )", "log_prob": -13.000088353641331}, {"text": "val * ( val + val * val ) * if not not cond then if cond then ( ( if cond then ( ( val * val ) ) else val ) ) else ( ( if cond then if not cond and not cond and not cond and cond and cond then ( val ) else if cond then ( ( ( val ) * val * ( val * ( val + val ) * val * ( val ) + if not cond then if cond then if cond then val else if not not cond", "log_prob": -93.537533402181}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val + val", "log_prob": -4.967623267322779}, {"text": "if cond then ( ( ( ( ( val ) ) ) + if cond then ( val + if not not cond then ( ( val ) ) else ( if cond then val else if cond then ( val + val + val ) else if cond then val else if cond then ( val ) else val ) ) else ( val * ( ( ( ( val * ( if cond then if cond then if cond then ( if cond then ( val + ( val * val ) + val + ( ( if", "log_prob": -96.94469605392078}, {"text": "if not cond then if cond then if not cond and cond and not cond and not cond and cond and cond and cond and not cond then ( ( if cond then if not cond then val else val else val * val ) * if not not cond then ( val + ( val ) * val + ( ( ( val ) ) ) ) else val + val + ( ( val * val ) + ( ( ( if cond then ( val + val ) else val ) ) ) ) ) else if", "log_prob": -100.19400760898134}, {"text": "( val + if not cond and cond then val else ( val ) )", "log_prob": -14.371711168903857}, {"text": "( if cond then val else ( ( val ) ) ) + val", "log_prob": -14.952171251468826}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val * val + ( ( val * if cond then if not not cond and cond and not not not cond and not cond then val else val else ( ( if cond and not cond then if cond then val else if not not cond and not not cond then ( if cond then val else ( ( val + val ) ) ) else val else val ) + val + if not cond then if cond then val else if cond and cond then val else val else ( ( ( ( ( if cond then", "log_prob": -89.50105691683711}, {"text": "val * val", "log_prob": -4.7785823286976665}, {"text": "val + val", "log_prob": -4.967623267322779}, {"text": "if not not cond then ( if not cond and not cond then if cond then val else if cond then val else ( if cond then val else if cond and cond and cond then ( val ) else ( val * val * val + if cond and not not cond and not not cond and not cond and cond then if not cond and cond and not cond and cond and cond and not cond and cond and not not not cond and cond and not cond then val else if cond then ( if not not", "log_prob": -81.92825760651613}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if cond and cond and cond then ( if cond then ( val + if cond then ( ( ( val * ( val ) ) ) * if cond then if cond then if cond then val else ( ( val ) + ( val ) ) else ( ( val * ( if cond then val else val + ( ( val + ( val ) + val * if cond then if cond and not cond then if cond then val else val else ( if cond then val else val + ( if not cond then", "log_prob": -93.7711317728681}, {"text": "if not cond and not not not cond and cond then ( val ) else val + if cond and cond then val else if not cond then if cond then if cond and cond then val else val else if not cond and cond then ( val * ( ( ( ( if cond and cond and cond and not cond and not cond then val else val + if cond then val else ( ( if not cond then val else val + val + val * if cond and cond then if cond then val else val", "log_prob": -87.62762542167911}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "( ( ( if not not cond and not cond and not cond and cond then val else if not not cond and cond and cond and cond then if not cond then if cond and cond and cond then ( ( if cond then ( if not cond then val else ( if cond then if not cond and cond and not cond and not cond then val else val else if cond then if not cond then ( ( val * val + if cond then ( val ) else if cond then ( ( if cond then", "log_prob": -82.23434053151868}, {"text": "if cond and cond and cond and cond and cond and cond and cond and cond then ( if cond then ( ( if cond then ( if cond then val else ( val ) * if not not cond and cond and cond then if cond and cond and cond and cond and not cond and not cond then if not cond and cond then val else ( val ) else if cond then ( val + if cond then val else ( if cond then ( ( val ) + val ) else val + val ) )", "log_prob": -84.58278110437095}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "( if cond and cond and cond then if cond then val else ( if cond then val else if not cond then val else if cond then val else val ) else if not cond and cond and cond then val else val )", "log_prob": -33.71482457534876}, {"text": "( if cond and not cond then if cond and cond then if cond then val else ( val ) else ( if not not not not cond then ( val * val * val ) else val ) else ( ( if not cond then if cond then val else ( if cond then val else val ) else ( val * if cond then if cond then val else val else ( if cond then val else if cond then if not cond then val else ( val ) else ( ( ( val ) ) ) *", "log_prob": -81.94631084566936}, {"text": "if not not cond then if cond and cond then val else val else if cond then val else val + val", "log_prob": -18.54880280426005}, {"text": "val + val", "log_prob": -4.967623267322779}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "val + ( if cond and cond and cond and cond and not cond and cond then val else ( ( if cond and not cond and not cond and not cond and cond and cond and cond then if cond then if not not not not cond then ( ( val ) ) else val else val else if cond then val else val * ( if cond and cond and cond then ( if cond and cond and cond then val else if cond then val else ( val ) ) else if cond and cond and cond", "log_prob": -82.19757976016263}, {"text": "( val )", "log_prob": -4.366570222657174}, {"text": "if cond then ( ( ( ( if cond then ( ( val ) + ( ( if not cond and cond then if cond then if cond then if not cond then val else val else ( val ) else val else if cond then val else ( val ) ) * if not cond and not cond and cond and cond then ( val ) else if cond then ( if not not cond and not cond then ( val ) else val ) else if cond then if cond then val else val else val ) *", "log_prob": -84.9508355584112}, {"text": "if not cond then val else if cond and not cond and cond and cond then val else val", "log_prob": -15.393756262608804}, {"text": "val + ( ( val * if not cond and not cond and not not cond then ( if cond then val else if cond and cond then ( val + if cond then val else val * val * ( val + val + val + ( if not cond and cond then val else val + val ) ) ) else if not cond and cond and cond then if cond then val else val else if cond then if not not cond and cond and cond then val else if cond then val else if not cond", "log_prob": -87.73841553932289}, {"text": "( ( ( ( ( val ) * ( ( if not not cond then if not cond then val else val else if not not cond then if cond then ( if cond and cond and not cond and cond then ( ( if cond and cond and not not cond then if cond then if not not cond then if not cond and not not cond and cond and not cond and cond and cond and cond and cond and cond then val else val else val else ( val + val * if cond then ( (", "log_prob": -87.02407848491566}, {"text": "val + ( ( val * ( val ) + if not cond then ( val + ( if cond then if not cond then val else val else if cond and cond then if cond then ( if cond then if cond and cond then ( val ) else if cond and cond then if not not cond and cond and cond then val else ( val ) else val else val * val ) else ( ( val * val ) * if not cond then val else if cond and cond then val else if cond and", "log_prob": -89.68559916137019}, {"text": "if not cond then if cond then if cond and cond and cond and cond then val else ( ( if cond then val else ( if not not cond and not cond then val else ( val ) * if not not cond and cond and cond and cond then if cond then if cond then ( val * ( ( ( if cond then val else val * if cond then if cond then val else if cond then if cond then val else val else ( if not cond and cond then ( val ) else val", "log_prob": -78.26686776877614}, {"text": "val * val", "log_prob": -4.7785823286976665}, {"text": "( val )", "log_prob": -4.366570222657174}, {"text": "if cond then if cond then val else if cond then if cond then val else if cond and not cond then if not cond and cond and cond and not not not cond and not cond and not cond and not not cond and not not not not not cond and not cond and not not cond and cond and cond and cond and cond and cond and not cond and cond and not cond and cond and cond and cond and cond then val else val else val else val else ( val )", "log_prob": -62.954814150580205}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if not cond and cond then ( val ) else val", "log_prob": -9.935695885214955}, {"text": "( ( ( if cond then ( val ) else val + val ) + ( if cond then if cond then val else val else val * if not cond and not not cond and cond and cond then val else if cond and cond and cond and cond then ( val * if cond and cond and not cond and cond and cond then val else ( if cond then if not cond then val else val else ( val ) ) ) else if cond and cond and not cond and not cond then ( val )", "log_prob": -85.07709566364065}, {"text": "if cond then ( if cond and cond then ( if cond then ( val ) else ( val ) ) else val ) else ( ( val ) )", "log_prob": -27.061373082571663}, {"text": "val * if cond and not cond and not cond and cond then val else val", "log_prob": -13.97574097639881}, {"text": "if cond then if not cond and cond then ( val ) else ( ( val + val ) ) else ( ( ( if cond then val else if cond and not cond then if not not cond and cond and cond then val else val else if cond then if not not cond then val else if not cond and cond then ( if cond then val else if not cond then ( ( ( val + val ) ) * if cond then if cond then if not not cond and cond and not cond and not", "log_prob": -83.18776076147333}, {"text": "( val ) * val + ( ( val ) * val * if not cond then val else ( val ) + ( val + ( if not cond then ( val + ( if cond then val else if not cond and cond and not cond and cond then ( if not not cond and not cond and cond and cond and cond and cond then ( val ) else val * ( ( if cond and not not not not not cond and cond and cond and cond and cond and cond and cond then if cond", "log_prob": -88.80126228235895}, {"text": "if cond then ( ( if not cond and not cond and cond then ( val * if cond then ( val ) else val ) else if not cond then ( if cond then ( ( val ) ) else val + ( ( ( val ) ) ) ) else val + ( val * ( val ) + if cond and cond and not cond and cond and cond and cond and not cond and not cond then val else ( val ) + val ) + if cond then ( val * val + if cond", "log_prob": -91.91316544509027}, {"text": "if not cond then val else val + ( val )", "log_prob": -11.157866387278773}, {"text": "( ( val ) + ( val * ( val ) ) ) + ( if cond then if cond then if cond then val else if cond then val else ( ( ( ( val ) ) ) ) else val else if not cond then if cond then ( val ) else val else val )", "log_prob": -51.9453172730864}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "if cond then if cond then if cond then val else ( val ) else if cond then if not not cond and not cond and cond and not cond and cond and cond and not cond and cond then val else ( val * val ) else ( val ) else if cond then ( ( val + ( val ) * val + ( if cond then val else if cond then val else ( val ) ) * val + val ) ) else val", "log_prob": -70.46791131841019}, {"text": "val", "log_prob": -2.2795102717354894}, {"text": "( if cond and cond then val else ( if cond then if cond then if cond then val else val else val else val ) + val ) * ( ( if cond then if cond then ( ( ( if not cond and cond then val else val ) * if not not not cond then if not cond and cond and not not cond and cond then ( if not cond then if cond and cond then val else val else val ) else ( if cond and not cond and cond then ( ( if not", "log_prob": -83.67498406779487}, {"text": "( ( if not cond and not cond then val else val ) )", "log_prob": -13.38957274646964}, {"text": "if not cond and cond then val else if cond then val else if cond then val else ( val )", "log_prob": -15.585257101163734}, {"text": "( val )", "log_prob": -4.366570222657174}]}}}